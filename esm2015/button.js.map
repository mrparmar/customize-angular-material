{"version":3,"file":"button.js","sources":["../../../src/lib/button/button-module.ts","../../../src/lib/button/button.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatAnchor, MatButton} from './button';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatRippleModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [\r\n    MatButton,\r\n    MatAnchor,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatButton,\r\n    MatAnchor,\r\n  ],\r\n})\r\nexport class MatButtonModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  Inject,\r\n  Input,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  CanColorCtor,\r\n  CanDisableCtor,\r\n  CanDisableRippleCtor,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\r\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\r\n\r\n/**\r\n * List of classes to add to MatButton instances based on host attributes to\r\n * style as different variants.\r\n */\r\nconst BUTTON_HOST_ATTRIBUTES = [\r\n  'mat-button',\r\n  'mat-flat-button',\r\n  'mat-icon-button',\r\n  'mat-raised-button',\r\n  'mat-stroked-button',\r\n  'mat-mini-fab',\r\n  'mat-fab',\r\n];\r\n\r\n// Boilerplate for applying mixins to MatButton.\r\n/** @docs-private */\r\nexport class MatButtonBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n\r\nexport const _MatButtonMixinBase:\r\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\r\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\r\n\r\n/**\r\n * Material design button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\r\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\r\n             button[mat-flat-button]`,\r\n  exportAs: 'matButton',\r\n  host: {\r\n    '[disabled]': 'disabled || null',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatButton extends _MatButtonMixinBase\r\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\r\n\r\n  /** Whether the button is round. */\r\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\r\n\r\n  /** Whether the button is icon button. */\r\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\r\n\r\n  /** Reference to the MatRipple instance of the button. */\r\n  @ViewChild(MatRipple) ripple: MatRipple;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              /**\r\n               * @deprecated Platform checks for SSR are no longer needed\r\n               * @breaking-change 8.0.0\r\n               */\r\n              _platform: Platform,\r\n              private _focusMonitor: FocusMonitor,\r\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\r\n    super(elementRef);\r\n\r\n    // For each of the variant selectors that is prevent in the button's host\r\n    // attributes, add the correct corresponding class.\r\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\r\n      if (this._hasHostAttributes(attr)) {\r\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\r\n      }\r\n    }\r\n\r\n    this._focusMonitor.monitor(this._elementRef, true);\r\n\r\n    if (this.isRoundButton) {\r\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._getHostElement().focus();\r\n  }\r\n\r\n  _getHostElement() {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /** Gets whether the button has one of the given attributes. */\r\n  _hasHostAttributes(...attributes: string[]) {\r\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\r\n  }\r\n}\r\n\r\n/**\r\n * Raised Material design button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\r\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\r\n  exportAs: 'matButton, matAnchor',\r\n  host: {\r\n    // Note that we ignore the user-specified tabindex when it's disabled for\r\n    // consistency with the `mat-button` applied on native buttons where even\r\n    // though they have an index, they're not tabbable.\r\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '(click)': '_haltDisabledEvents($event)',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatAnchor extends MatButton {\r\n  /** Tabindex of the button. */\r\n  @Input() tabIndex: number;\r\n\r\n  constructor(\r\n    platform: Platform,\r\n    focusMonitor: FocusMonitor,\r\n    elementRef: ElementRef,\r\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\r\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\r\n    super(elementRef, platform, focusMonitor, animationMode);\r\n  }\r\n\r\n  _haltDisabledEvents(event: Event) {\r\n    // A disabled button shouldn't apply any actions\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}