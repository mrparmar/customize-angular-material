{"version":3,"file":"list.js","sources":["../../../src/lib/list/list-module.ts","../../../src/lib/list/selection-list.ts","../../../src/lib/list/list.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  MatCommonModule,\r\n  MatLineModule,\r\n  MatPseudoCheckboxModule,\r\n  MatRippleModule,\r\n} from '@angular/material/core';\r\nimport {\r\n  MatList,\r\n  MatNavList,\r\n  MatListAvatarCssMatStyler,\r\n  MatListIconCssMatStyler,\r\n  MatListItem,\r\n  MatListSubheaderCssMatStyler,\r\n} from './list';\r\nimport {MatListOption, MatSelectionList} from './selection-list';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\r\n  exports: [\r\n    MatList,\r\n    MatNavList,\r\n    MatListItem,\r\n    MatListAvatarCssMatStyler,\r\n    MatLineModule,\r\n    MatCommonModule,\r\n    MatListIconCssMatStyler,\r\n    MatListSubheaderCssMatStyler,\r\n    MatPseudoCheckboxModule,\r\n    MatSelectionList,\r\n    MatListOption,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [\r\n    MatList,\r\n    MatNavList,\r\n    MatListItem,\r\n    MatListAvatarCssMatStyler,\r\n    MatListIconCssMatStyler,\r\n    MatListSubheaderCssMatStyler,\r\n    MatSelectionList,\r\n    MatListOption\r\n  ],\r\n})\r\nexport class MatListModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {\r\n  SPACE,\r\n  ENTER,\r\n  HOME,\r\n  END,\r\n  UP_ARROW,\r\n  DOWN_ARROW,\r\n  A,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisableRipple, CanDisableRippleCtor,\r\n  MatLine,\r\n  setLines,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\r\n\r\n\r\n/** @docs-private */\r\nexport class MatSelectionListBase {}\r\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\r\n    mixinDisableRipple(MatSelectionListBase);\r\n\r\n/** @docs-private */\r\nexport class MatListOptionBase {}\r\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\r\n    mixinDisableRipple(MatListOptionBase);\r\n\r\n/** @docs-private */\r\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSelectionList),\r\n  multi: true\r\n};\r\n\r\n/** Change event that is being fired whenever the selected state of an option changes. */\r\nexport class MatSelectionListChange {\r\n  constructor(\r\n    /** Reference to the selection list that emitted the event. */\r\n    public source: MatSelectionList,\r\n    /** Reference to the option that has been changed. */\r\n    public option: MatListOption) {}\r\n}\r\n\r\n/**\r\n * Component for list-options of selection-list. Each list-option can automatically\r\n * generate a checkbox and can put current item into the selectionModel of selection-list\r\n * if the current item is selected.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list-option',\r\n  exportAs: 'matListOption',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'role': 'option',\r\n    'class': 'mat-list-item mat-list-option',\r\n    '(focus)': '_handleFocus()',\r\n    '(blur)': '_handleBlur()',\r\n    '(click)': '_handleClick()',\r\n    'tabindex': '-1',\r\n    '[class.mat-list-item-disabled]': 'disabled',\r\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  templateUrl: 'list-option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatListOption extends _MatListOptionMixinBase\r\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\r\n\r\n  private _selected = false;\r\n  private _disabled = false;\r\n  private _hasFocus = false;\r\n\r\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\r\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n\r\n  /** DOM element containing the item's text. */\r\n  @ViewChild('text') _text: ElementRef;\r\n\r\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\r\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Value of the option */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (this.selected && newValue !== this.value) {\r\n      this.selected = false;\r\n    }\r\n\r\n    this._value = newValue;\r\n  }\r\n  private _value: any;\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\r\n  set disabled(value: any) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the option is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\r\n  set selected(value: boolean) {\r\n    const isSelected = coerceBooleanProperty(value);\r\n\r\n    if (isSelected !== this._selected) {\r\n      this._setSelected(isSelected);\r\n      this.selectionList._reportValueChange();\r\n    }\r\n  }\r\n\r\n  constructor(private _element: ElementRef<HTMLElement>,\r\n              private _changeDetector: ChangeDetectorRef,\r\n              /** @docs-private */\r\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // List options that are selected at initialization can't be reported properly to the form\r\n    // control. This is because it takes some time until the selection-list knows about all\r\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\r\n    // that should be used instead. Deferring the value change report to the next tick ensures\r\n    // that the form control value is not being overwritten.\r\n    const wasSelected = this._selected;\r\n\r\n    Promise.resolve().then(() => {\r\n      if (this._selected || wasSelected) {\r\n        this.selected = true;\r\n        this._changeDetector.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    setLines(this._lines, this._element);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.selected) {\r\n      // We have to delay this until the next tick in order\r\n      // to avoid changed after checked errors.\r\n      Promise.resolve().then(() => this.selected = false);\r\n    }\r\n\r\n    const hadFocus = this._hasFocus;\r\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\r\n\r\n    // Only move focus if this option was focused at the time it was destroyed.\r\n    if (hadFocus && newActiveItem) {\r\n      newActiveItem.focus();\r\n    }\r\n  }\r\n\r\n  /** Toggles the selection state of the option. */\r\n  toggle(): void {\r\n    this.selected = !this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the option. */\r\n  focus(): void {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\r\n   * @docs-private\r\n   */\r\n  getLabel() {\r\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\r\n  }\r\n\r\n  /** Whether this list item should show a ripple effect when clicked. */\r\n  _isRippleDisabled() {\r\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\r\n  }\r\n\r\n  _handleClick() {\r\n    if (!this.disabled) {\r\n      this.toggle();\r\n\r\n      // Emit a change event if the selected state of the option changed through user interaction.\r\n      this.selectionList._emitChangeEvent(this);\r\n    }\r\n  }\r\n\r\n  _handleFocus() {\r\n    this.selectionList._setFocusedOption(this);\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  _handleBlur() {\r\n    this.selectionList._onTouched();\r\n    this._hasFocus = false;\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n\r\n  /** Sets the selected state of the option. Returns whether the value has changed. */\r\n  _setSelected(selected: boolean): boolean {\r\n    if (selected === this._selected) {\r\n      return false;\r\n    }\r\n\r\n    this._selected = selected;\r\n\r\n    if (selected) {\r\n      this.selectionList.selectedOptions.select(this);\r\n    } else {\r\n      this.selectionList.selectedOptions.deselect(this);\r\n    }\r\n\r\n    this._changeDetector.markForCheck();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\r\n   * used to trigger an update of the list option if the disabled state of the selection list\r\n   * changed.\r\n   */\r\n  _markForCheck() {\r\n    this._changeDetector.markForCheck();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-selection-list',\r\n  exportAs: 'matSelectionList',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'role': 'listbox',\r\n    '[tabIndex]': 'tabIndex',\r\n    'class': 'mat-selection-list mat-list-base',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_keydown($event)',\r\n    'aria-multiselectable': 'true',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  styleUrls: ['list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\r\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatListOption>;\r\n\r\n  /** The option components contained within this selection-list. */\r\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\r\n\r\n  /** Emits a change event whenever the selected state of an option changes. */\r\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\r\n      new EventEmitter<MatSelectionListChange>();\r\n\r\n  /** Tabindex of the selection list. */\r\n  @Input() tabIndex: number = 0;\r\n\r\n  /**\r\n   * Function used for comparing an option against the selected value when determining which\r\n   * options should appear as selected. The first argument is the value of an options. The second\r\n   * one is a value from the selected value. A boolean must be returned.\r\n   */\r\n  @Input() compareWith: (o1: any, o2: any) => boolean;\r\n\r\n  /** Whether the selection list is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\r\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\r\n    // changed its state. Since we know that a change to `disabled` property of the list affects\r\n    // the state of the options, we manually mark each option for check.\r\n    this._markOptionsForCheck();\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  /** The currently selected options. */\r\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\r\n\r\n  /** View to model callback that should be called whenever the selected options change. */\r\n  private _onChange: (value: any) => void = (_: any) => {};\r\n\r\n  /** Used for storing the values that were assigned before the options were initialized. */\r\n  private _tempValues: string[]|null;\r\n\r\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\r\n  private _modelChanges = Subscription.EMPTY;\r\n\r\n  /** View to model callback that should be called if the list or its options lost focus. */\r\n  _onTouched: () => void = () => {};\r\n\r\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\r\n    super();\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\r\n      .withWrap()\r\n      .withTypeAhead()\r\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\r\n      // screenreader users, that allows reading the different options of the list.\r\n      .skipPredicate(() => false)\r\n      .withAllowedModifierKeys(['shiftKey']);\r\n\r\n    if (this._tempValues) {\r\n      this._setOptionsFromValues(this._tempValues);\r\n      this._tempValues = null;\r\n    }\r\n\r\n    // Sync external changes to the model back to the options.\r\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\r\n      if (event.added) {\r\n        for (let item of event.added) {\r\n          item.selected = true;\r\n        }\r\n      }\r\n\r\n      if (event.removed) {\r\n        for (let item of event.removed) {\r\n          item.selected = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const disableRippleChanges = changes.disableRipple;\r\n\r\n    if (disableRippleChanges && !disableRippleChanges.firstChange) {\r\n      this._markOptionsForCheck();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._modelChanges.unsubscribe();\r\n  }\r\n\r\n  /** Focuses the selection list. */\r\n  focus() {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /** Selects all of the options. */\r\n  selectAll() {\r\n    this._setAllOptionsSelected(true);\r\n  }\r\n\r\n  /** Deselects all of the options. */\r\n  deselectAll() {\r\n    this._setAllOptionsSelected(false);\r\n  }\r\n\r\n  /** Sets the focused option of the selection-list. */\r\n  _setFocusedOption(option: MatListOption) {\r\n    this._keyManager.updateActiveItem(option);\r\n  }\r\n\r\n  /**\r\n   * Removes an option from the selection list and updates the active item.\r\n   * @returns Currently-active item.\r\n   */\r\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\r\n    const optionIndex = this._getOptionIndex(option);\r\n\r\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\r\n      // Check whether the option is the last item\r\n      if (optionIndex > 0) {\r\n        this._keyManager.updateActiveItem(optionIndex - 1);\r\n      } else if (optionIndex === 0 && this.options.length > 1) {\r\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\r\n      }\r\n    }\r\n\r\n    return this._keyManager.activeItem;\r\n  }\r\n\r\n  /** Passes relevant key presses to our key manager. */\r\n  _keydown(event: KeyboardEvent) {\r\n    const keyCode = event.keyCode;\r\n    const manager = this._keyManager;\r\n    const previousFocusIndex = manager.activeItemIndex;\r\n    const hasModifier = hasModifierKey(event);\r\n\r\n    switch (keyCode) {\r\n      case SPACE:\r\n      case ENTER:\r\n        if (!hasModifier) {\r\n          this._toggleFocusedOption();\r\n          // Always prevent space from scrolling the page since the list has focus\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case HOME:\r\n      case END:\r\n        if (!hasModifier) {\r\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case A:\r\n        if (hasModifierKey(event, 'ctrlKey')) {\r\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      default:\r\n        manager.onKeydown(event);\r\n    }\r\n\r\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\r\n        manager.activeItemIndex !== previousFocusIndex) {\r\n      this._toggleFocusedOption();\r\n    }\r\n  }\r\n\r\n  /** Reports a value change to the ControlValueAccessor */\r\n  _reportValueChange() {\r\n    if (this.options) {\r\n      this._onChange(this._getSelectedOptionValues());\r\n    }\r\n  }\r\n\r\n  /** Emits a change event if the selected state of an option changed. */\r\n  _emitChangeEvent(option: MatListOption) {\r\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(values: string[]): void {\r\n    if (this.options) {\r\n      this._setOptionsFromValues(values || []);\r\n    } else {\r\n      this._tempValues = values;\r\n    }\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Sets the selected options based on the specified values. */\r\n  private _setOptionsFromValues(values: string[]) {\r\n    this.options.forEach(option => option._setSelected(false));\r\n\r\n    values.forEach(value => {\r\n      const correspondingOption = this.options.find(option => {\r\n        // Skip options that are already in the model. This allows us to handle cases\r\n        // where the same primitive value is selected multiple times.\r\n        if (option.selected) {\r\n          return false;\r\n        }\r\n\r\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\r\n      });\r\n\r\n      if (correspondingOption) {\r\n        correspondingOption._setSelected(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Returns the values of the selected options. */\r\n  private _getSelectedOptionValues(): string[] {\r\n    return this.options.filter(option => option.selected).map(option => option.value);\r\n  }\r\n\r\n  /** Toggles the state of the currently focused option if enabled. */\r\n  private _toggleFocusedOption(): void {\r\n    let focusedIndex = this._keyManager.activeItemIndex;\r\n\r\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\r\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\r\n\r\n      if (focusedOption && !focusedOption.disabled) {\r\n        focusedOption.toggle();\r\n\r\n        // Emit a change event because the focused option changed its state through user\r\n        // interaction.\r\n        this._emitChangeEvent(focusedOption);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selected state on all of the options\r\n   * and emits an event if anything changed.\r\n   */\r\n  private _setAllOptionsSelected(isSelected: boolean) {\r\n    // Keep track of whether anything changed, because we only want to\r\n    // emit the changed event when something actually changed.\r\n    let hasChanged = false;\r\n\r\n    this.options.forEach(option => {\r\n      if (option._setSelected(isSelected)) {\r\n        hasChanged = true;\r\n      }\r\n    });\r\n\r\n    if (hasChanged) {\r\n      this._reportValueChange();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of options.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.options.length;\r\n  }\r\n\r\n  /** Returns the index of the specified list option. */\r\n  private _getOptionIndex(option: MatListOption): number {\r\n    return this.options.toArray().indexOf(option);\r\n  }\r\n\r\n  /** Marks all the options to be checked in the next change detection run. */\r\n  private _markOptionsForCheck() {\r\n    if (this.options) {\r\n      this.options.forEach(option => option._markForCheck());\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Optional,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  OnChanges,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  MatLine,\r\n  setLines,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\n// Boilerplate for applying mixins to MatList.\r\n/** @docs-private */\r\nexport class MatListBase {}\r\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\r\n    mixinDisableRipple(MatListBase);\r\n\r\n// Boilerplate for applying mixins to MatListItem.\r\n/** @docs-private */\r\nexport class MatListItemBase {}\r\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\r\n    mixinDisableRipple(MatListItemBase);\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-nav-list',\r\n  exportAs: 'matNavList',\r\n  host: {\r\n    'role': 'navigation',\r\n    'class': 'mat-nav-list mat-list-base'\r\n  },\r\n  templateUrl: 'list.html',\r\n  styleUrls: ['list.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\r\n  OnDestroy {\r\n  /** Emits when the state of the list changes. */\r\n  _stateChanges = new Subject<void>();\r\n\r\n  ngOnChanges() {\r\n    this._stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list, mat-action-list',\r\n  exportAs: 'matList',\r\n  templateUrl: 'list.html',\r\n  host: {\r\n    'class': 'mat-list mat-list-base'\r\n  },\r\n  styleUrls: ['list.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\r\n  /** Emits when the state of the list changes. */\r\n  _stateChanges = new Subject<void>();\r\n\r\n  /**\r\n   * @deprecated _elementRef parameter to be made required.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\r\n    super();\r\n\r\n    if (this._getListType() === 'action-list' && _elementRef) {\r\n      _elementRef.nativeElement.classList.add('mat-action-list');\r\n    }\r\n  }\r\n\r\n  _getListType(): 'list' | 'action-list' | null {\r\n    const elementRef = this._elementRef;\r\n\r\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\r\n    if (elementRef) {\r\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\r\n\r\n      if (nodeName === 'mat-list') {\r\n        return 'list';\r\n      }\r\n\r\n      if (nodeName === 'mat-action-list') {\r\n        return 'action-list';\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this._stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-list-avatar], [matListAvatar]',\r\n  host: {'class': 'mat-list-avatar'}\r\n})\r\nexport class MatListAvatarCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-list-icon], [matListIcon]',\r\n  host: {'class': 'mat-list-icon'}\r\n})\r\nexport class MatListIconCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-subheader], [matSubheader]',\r\n  host: {'class': 'mat-subheader'}\r\n})\r\nexport class MatListSubheaderCssMatStyler {}\r\n\r\n/** An item within a Material Design list. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\r\n  exportAs: 'matListItem',\r\n  host: {\r\n    'class': 'mat-list-item',\r\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\r\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\r\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\r\n  },\r\n  inputs: ['disableRipple'],\r\n  templateUrl: 'list-item.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\r\n    CanDisableRipple, OnDestroy {\r\n  private _isInteractiveList: boolean = false;\r\n  private _list?: MatNavList | MatList;\r\n  private _destroyed = new Subject<void>();\r\n\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\r\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\r\n\r\n  constructor(private _element: ElementRef<HTMLElement>,\r\n              @Optional() navList?: MatNavList,\r\n              @Optional() list?: MatList,\r\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\r\n              _changeDetectorRef?: ChangeDetectorRef) {\r\n    super();\r\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\r\n    this._list = navList || list;\r\n\r\n    // If no type attributed is specified for <button>, set it to \"button\".\r\n    // If a type attribute is already specified, do nothing.\r\n    const element = this._getHostElement();\r\n\r\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\r\n      element.setAttribute('type', 'button');\r\n    }\r\n\r\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\r\n    if (this._list && _changeDetectorRef) {\r\n      // React to changes in the state of the parent list since\r\n      // some of the item's properties depend on it (e.g. `disableRipple`).\r\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n        _changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    setLines(this._lines, this._element);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Whether this list item should show a ripple effect when clicked. */\r\n  _isRippleDisabled() {\r\n    return !this._isInteractiveList || this.disableRipple ||\r\n           !!(this._list && this._list.disableRipple);\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AEmCA,AAAA,MAAa,WAAW,CAAxB;CAA2B;;AAC3B,AAAA,MAAa,iBAAiB,GAC1B,kBAAkB,CAAC,WAAW,CAAC,CADnC;;;;;AAKA,AAAA,MAAa,eAAe,CAA5B;CAA+B;;AAC/B,AAAA,MAAa,qBAAqB,GAC9B,kBAAkB,CAAC,eAAe,CAAC,CADvC;AAiBA,AAAA,MAAa,UAAW,SAAQ,iBAAiB,CAAjD;IAdA,WAAA,GAAA;;;;;QAiBE,IAAF,CAAA,aAAe,GAAG,IAAI,OAAO,EAAQ,CAAC;KASrC;;;;IAPC,WAAW,GAAb;QACI,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;KAC3B;;;;IAED,WAAW,GAAb;QACI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;KAC/B;;;IAzBH,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,cAAA;gBACE,QAAQ,EAAE,YAAZ;gBACE,IAAF,EAAA;oBACA,MAAY,EAAZ,YAAA;oBACM,OAAN,EAAA,4BAAA;iBACA;gBACA,QAAA,EAAA,2BAAA;gBACA,MAAA,EAAA,CAAA,svZAAA,CAAA;gBACE,MAAF,EAAA,CAAA,eAA0B,CAA1B;gBACE,aAAF,EAAA,iBAAA,CAAA,IAAA;gBACE,eAAF,EAAA,uBAAA,CAAA,MAAA;aACA,EAAA,EAAA;CACA,CAAA;AACA,AAIA,MAAA,OAAA,SAAA,iBAAA,CAAA;;;;;;;;QAgCA,IAAA,CAAA,WAAA,GAA2D,WAA3D,CAAA;;;;;;YANA,WAAA,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,CAAA,iBAAA,CAAA,CAAA;SASA;KACA;;;;;;QAIA,MAAA,UAAA,GAAA,IAAA,CAAA,WAAA,CAAA;;QACA,IAAA,UAAA,EAAoB;;YAGZ,MAAR,QAAA,GAAA,UAAA,CAAA,aAAA,CAAA,QAAA,CAAA,WAAA,EAAA,CAAA;;gBACA,OAAA,MAAuB,CAAvB;aAEA;YACA,IAAQ,QAAR,KAAqB,iBAArB,EAAA;gBACA,OAAA,aAAA,CAAA;aAEA;SACA;QACA,OAAA,IAAA,CAAA;KACA;;;;;;KAKA;;;;;;KAIA;CACA;AACA,OAAA,CAAA,UAAA,GAAA;;;gBAtDA,QAAA,EAAA,2BAAA;gBACE,IAAF,EAAA;oBACA,OAAA,EAAA,wBAAuC;iBACvC;gBACE,MAAF,EAAA,CAAA,svZAAA,CAAA;gBACE,MAAM,EAAR,CAAA,eAAA,CAAA;gBACA,aAAa,EAAb,iBAAA,CAAA,IAAqC;gBACrC,eAAA,EAAA,uBAAA,CAAA,MAAA;aACA,EAAA,EAAA;CACA,CAAA;;AAEA,OAAA,CAAA,cAAA,GAAA,MAAiB;IACjB,EAAA,IAAA,EAAA,UAAA,EAAA;;;;;;;;;;gBAqDA,QAAA,EAAA,oCAAA;;;CAJA,CAAA;;;;;;;;;gBAcA,QAAA,EAAA,gCAAA;;;CAJA,CAAA;;;;;;;;;gBAcA,QAAA,EAAA,iCAAA;;;CAJA,CAAA;;;;;;;;;;;;;;;QAgCA,IAAA,CAAA,QAAA,GAAuD,QAAvD,CAC8C;QAE9C,IAAA,CAAA,kBAAA,GAAA,KAAA,CAAA;QACA,IAAA,CAAA,UAAA,GAAA,IAAA,OAAA,EAAA,CAAA;QACI,IAAJ,CAAS,kBAAT,GAAA,CAAA,EAAA,OAAA,KAAA,IAAA,IAAA,IAAA,CAAA,YAAA,EAAA,KAAA,aAAA,CAAA,CAAA,CAAA;QALsB,IAAtB,CAAA,KAAA,GAA8B,OAA9B,IAA8B,IAA9B,CAAA;;;;QAOI,MAAJ,OAAiB,GAAjB,IAAwB,CAAxB,eAAA,EAAA,CAAA;;;;;QAMI,IAAI,IAAR,CAAA,KAAA,IAAA,kBAAA,EAAA;;;YAIA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,SAAA,CAAA,MAAA;gBACY,kBAAZ,CAAA,YAAA,EAAA,CAAA;aACA,CAAA,CAAA;SACA;KACA;;;;IAIE,kBAAF,GAAA;;;;;;IAIE,WAAF,GAAA;;;;;;;;;;;;;;;;;;;;AAcA,WAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAyB,CAAzB,CAAA,QAAA,EAAA,wDAAA;gBACA,QAAA,EAAA,aAAA;;;;oBArEA,8BAAA,EAAA,kBAAA;oBACA,mCAAA,EAAA,kBAAA;iBACA;gBACE,MAAM,EAAR,CAAA,eAAA,CAAA;gBACA,QAAA,EAAA,oZAAA;;gBAEA,eAAA,EAAA,uBAAA,CAAA,MAAA;aACA,EAAA,EAAA;CACA,CAAA;;AAEA,WAAA,CAAA,cAAA,GAAe,MAAf;IACA,EAAA,IAAA,EAAA,UAAA,EAAA;IACA,EAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,CAA0C,EAA1C;IACA,EAAA,IAAA,EAAA,OAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,CAAA,EAAA;;;;IAhKA,MAAA,EAAE,CAAF,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,CAAA;IA4KA,OAAA,EAAA,CAAA,EAAA,IAAA,EAA8C,YAA9C,EAAA,IAAA,EAAA,CAAA,yBAAA,EAAA,EAAA,CAAA;IACA,KAAA,EAAA,CAAiC,EAAjC,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,CAAA,uBAAA,EAAA,EAAA,CAAA;CAvKA,CAAA;;;;;;;;;ADkCA,AAAA,MAAa,oBAAoB,CAAjC;CAAoC;;AACpC,AAAA,MAAa,0BAA0B,GACnC,kBAAkB,CAAC,oBAAoB,CAAC,CAD5C;;;;AAIA,AAAA,MAAa,iBAAiB,CAA9B;CAAiC;;AACjC,AAAA,MAAa,uBAAuB,GAChC,kBAAkB,CAAC,iBAAiB,CAAC,CADzC;;;;;AAIA,AAAA,MAAa,iCAAiC,GAAQ;IACpD,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,MAAM,gBAAgB,CAAC;IAC/C,KAAK,EAAE,IAAI;CACZ,CAAD;;;;AAGA,AAAA,MAAa,sBAAsB,CAAnC;;;;;IACE,WAAF,CAEW,MAAwB,EAExB,MAAqB,EAJhC;QAEW,IAAX,CAAA,MAAiB,GAAN,MAAM,CAAkB;QAExB,IAAX,CAAA,MAAiB,GAAN,MAAM,CAAe;KAAI;CACnC;;;;;;AA4BD,AAAA,MAAa,aAAc,SAAQ,uBAAuB,CAA1D;;;;;;IAqDE,WAAF,CAAsB,QAAiC,EACjC,eAAkC,EAES,aAA+B,EAHhG;QAII,KAAK,EAAE,CAAC;QAJU,IAAtB,CAAA,QAA8B,GAAR,QAAQ,CAAyB;QACjC,IAAtB,CAAA,eAAqC,GAAf,eAAe,CAAmB;QAES,IAAjE,CAAA,aAA8E,GAAb,aAAa,CAAkB;QArDtF,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;QAClB,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;QAClB,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;;;;QAUjB,IAAX,CAAA,gBAA2B,GAAuB,OAAO,CAAC;KA2CvD;;;;;IAxCD,IACI,KAAK,GADX,EACqB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;;;;;IACxC,IAAI,KAAK,CAAC,QAAa,EAAzB;QACI,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,KAAK,EAAE;YAC5C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SACvB;QAED,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;KACxB;;;;;IAID,IACI,QAAQ,GADd,EACmB,OAAO,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE;;;;;IAChG,IAAI,QAAQ,CAAC,KAAU,EAAzB;;QACA,MAAU,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAjD;QAEI,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;SACrC;KACF;;;;;IAGD,IACI,QAAQ,GADd,EAC4B,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;;;;;IACvF,IAAI,QAAQ,CAAC,KAAc,EAA7B;;QACA,MAAU,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAnD;QAEI,IAAI,UAAU,KAAK,IAAI,CAAC,SAAS,EAAE;YACjC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YAC9B,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC;SACzC;KACF;;;;IASD,QAAQ,GAAV;;;;;;;QAMA,MAAU,WAAW,GAAG,IAAI,CAAC,SAAS,CAAtC;QAEI,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAA3B;YACM,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW,EAAE;gBACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;aACrC;SACF,CAAC,CAAC;KACJ;;;;IAED,kBAAkB,GAApB;QACI,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;KACtC;;;;IAED,WAAW,GAAb;QACI,IAAI,IAAI,CAAC,QAAQ,EAAE;;;YAGjB,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;SACrD;;QAEL,MAAU,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAnC;;QACA,MAAU,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAxE;;QAGI,IAAI,QAAQ,IAAI,aAAa,EAAE;YAC7B,aAAa,CAAC,KAAK,EAAE,CAAC;SACvB;KACF;;;;;IAGD,MAAM,GAAR;QACI,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;KAChC;;;;;IAGD,KAAK,GAAP;QACI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACrC;;;;;;IAMD,QAAQ,GAAV;QACI,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,WAAW,IAAI,EAAE,IAAI,EAAE,CAAC;KACvE;;;;;IAGD,iBAAiB,GAAnB;QACI,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC;KAChF;;;;IAED,YAAY,GAAd;QACI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,MAAM,EAAE,CAAC;;YAGd,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC3C;KACF;;;;IAED,YAAY,GAAd;QACI,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACvB;;;;IAED,WAAW,GAAb;QACI,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KACxB;;;;;IAGD,eAAe,GAAjB;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;KACpC;;;;;;IAGD,YAAY,CAAC,QAAiB,EAAhC;QACI,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;YAC/B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACjD;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACpC,OAAO,IAAI,CAAC;KACb;;;;;;;IAOD,aAAa,GAAf;QACI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;KACrC;;;IA7LH,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,iBAAA;gBACE,QAAQ,EAAE,eAAZ;gBACE,MAAF,EAAU,CAAV,eAAA,CAAA;gBACE,IAAF,EAAA;oBACA,MAAA,EAAA,QAAA;oBACM,OAAN,EAAA,+BAAA;oBACI,SAAJ,EAAA,gBAAA;oBACI,QAAJ,EAAA,eAAA;oBACI,SAAS,EAAE,gBAAgB;oBAC3B,UAAU,EAAd,IAAA;oBACI,gCAAJ,EAAA,UAAA;oBACI,mCAAJ,EAAA,kBAAA;oBACI,sBAAJ,EAAA,qBAAA;oBACI,sBAAJ,EAAA,qBAAA;iBACA;gBACA,QAAA,EAAA,whBAAA;gBACA,aAAA,EAAA,iBAAA,CAAA,IAAA;gBACE,eAAF,EAAA,uBAAA,CAAA,MAAA;aACA,EAAA,EAAA;CACA,CAAA;;;;;IA3EA,EAAA,IAAA,EAAE,gBAAF,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,gBAAA,CAAA,EAAA,EAAA,CAAA,EAAA;CAJA,CAAA;AAyIA,aAAA,CAAA,cAAgG,GAAhG;;;IAjDA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,CAAA;IACA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAG,SAAH,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA,EAAA,CAAA;IACA,gBAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAkB,EAAlB,CAAA;IAGA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAH,EAAA,CAAA;IAGA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAG;IAGH,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;CAYA,CAAA;AAYA,AAcA;;;;;;;;;;QA+LA,IAAA,CAAA,QAAA,GAAuD,QAAvD,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;KAFA;;;;;;;;;;;;;;;;QAnBI,IAAJ,CAAA,oBAAA,EAAA,CAAA;KACA;;;;;;aAyBA,QAAA,EAAA;aACS,aAAT,EAAA;;;aAGA,aAAA,CAAA,MAAA,KAAA,CAAA;aACA,uBAAA,CAAA,CAAA,UAAA,CAAA,CAAA,CAAA;QACA,IAAA,IAAA,CAAA,WAAA,EAAwB;YACxB,IAAA,CAAA,qBAAgC,CAAhC,IAAA,CAAA,WAAA,CAAA,CAAA;YAEQ,IAAI,CAAC,WAAW,GAAxB,IAAA,CAAA;SACA;;QAEA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA,eAAA,CAAA,QAAA,CAAA,SAAA,CAAA,KAAA,IAAA;YAEA,IAAA,KAAA,CAAA,KAAA,EAAA;gBACA,KAAA,IAAA,IAAyB,IAAI,KAA7B,CAAA,KAAA,EAAA;oBACA,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA;iBACA;aACA;YACA,IAAA,KAAA,CAAA,OAAA,EAAA;gBACA,KAAA,IAAA,IAAA,IAAA,KAAA,CAAA,OAAA,EAAA;oBAEA,IAAA,CAAA,QAAA,GAAA,KAAA,CAAA;iBACA;aACA;SACA,CAAA,CAAA;KACA;;;;;;;QAIA,MAAA,oBAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;YACA,IAAA,CAAA,oBAAiC,EAAjC,CAAA;SAEA;KACA;;;;;;KAIA;;;;;;;KAKA;;;;;;;KAKA;;;;;;;KAKA;;;;;;;;KAKA;;;;;;;;QAQA,MAAA,WAAuB,GAAvB,IAA6C,CAA7C,eAAA,CAAA,MAAA,CAAA,CAAA;;;YAGQ,IAAR,WAAuB,GAAvB,CAAA,EAAA;gBACA,IAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,WAAA,GAAA,CAAA,CAAA,CAAA;aACA;iBACA,IAAa,WAAW,KAAxB,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,MAAqD,GAAG,CAAC,EAAE;gBAC3D,IAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,WAAA,GAAA,CAAA,EAAA,IAAA,CAAA,OAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA;aAAA;SACA;QACA,OAAA,IAAA,CAAA,WAAA,CAAA,UAAA,CAAA;KACA;;;;;;;;QAMA,MAAA,OAAA,GAAA,KAAA,CAAA,OAAA,CAAA;;QACA,MAAU,OAAO,GAAG,IAApB,CAAyB,WAAzB,CAAA;;QACA,MAAU,kBAAV,GAAA,OAAA,CAAA,eAAA,CAAA;;QACA,MAAU,WAAV,GAAA,cAAsC,CAAC,KAAvC,CAAA,CAAA;;YACA,KAAA,KAAA,CAAA;YAEA,KAAA,KAAA;gBACA,IAAA,CAAA,WAAA,EAAA;oBACA,IAAA,CAAA,oBAAA,EAAA,CAAA;;oBAEU,KAAK,CAAf,cAAA,EAAA,CAAA;iBACA;gBACA,MAAA;YACA,KAAS,IAAT,CAAA;YACA,KAAA,GAAA;gBACA,IAAA,CAAe,WAAf,EAAA;oBACc,OAAd,KAAA,IAAA,GAAA,OAAA,CAAA,kBAAA,EAAA,GAAA,OAAA,CAAA,iBAAA,EAAA,CAAA;oBACY,KAAZ,CAAA,cAAA,EAAA,CAAA;iBACA;gBACA,MAAA;YACA,KAAS,CAAT;gBACQ,IAAR,cAAA,CAAA,KAAA,EAAA,SAAA,CAAA,EAAA;oBACA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,MAAA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,IAAA,CAAA,SAAA,EAAA,GAAA,IAAA,CAAA,WAAA,EAAA,CAAA;oBACY,KAAZ,CAAA,cAAgC,EAAE,CAAlC;iBACA;gBACA,MAAA;YACA;gBACQ,OAAR,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA;SACA;QACA,IAAA,CAAA,OAAA,KAAA,QAAyB,IAAzB,OAAA,KAAA,UAAA,KAAA,KAAA,CAAA,QAAA;YACA,OAAA,CAAA,eAAA,KAAA,kBAAA,EAAA;YAEQ,IAAR,CAAA,oBAAiC,EAAjC,CAAA;SACA;KACA;;;;;;;YAKA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,wBAAA,EAAA,CAAA,CAAA;SACA;KACA;;;;;;;;KAKA;;;;;;;;YAKA,IAAA,CAAA,qBAAA,CAAA,MAAA,IAAA,EAAA,CAAA,CAAA;SACA;aACA;YACA,IAAA,CAAA,WAAA,GAAA,MAAA,CAAA;SAAA;KACA;;;;;;;;KAKA;;;;;;;;KAKA;;;;;;;;KAKA;;;;;;;;;QAKA,MAAA,CAAA,OAAA,CAAA,KAAA,IAAgD;;YAGhD,MAAA,mBAAA,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,MAAA,IAAA;;;gBAEQ,IAAR,MAAA,CAAA,QAAA,EAAA;oBACA,OAAA,KAAA,CAAA;iBACA;gBACA,OAAA,IAAiB,CAAjB,WAAA,GAAA,IAAA,CAAA,WAAA,CAAA,MAAA,CAAA,KAAA,EAAA,KAAA,CAAA,GAAA,MAAA,CAAA,KAAA,KAAA,KAAA,CAAA;aACA,CAAA,CAAA;YAEA,IAAQ,mBAAR,EAAA;gBACA,mBAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAAA;aAEA;SACA,CAAA,CAAA;KACA;;;;;;;;KAKA;;;;;;;;QAKA,IAAA,YAA8B,GAA9B,IAAA,CAAA,WAAA,CAAA,eAAA,CAAA;;;YAGQ,IAAR,aAAA,GAA4B,IAAI,CAAhC,OAAA,CAAA,OAAA,EAAkD,CAAC,YAAY,CAAC,CAAhE;;gBACU,aAAa,CAAvB,MAA6C,EAA7C,CAAA;;;gBAKQ,IAAR,CAAA,gBAAA,CAAA,aAAA,CAAA,CAAA;aACA;SACA;KACA;;;;;;;;;;;;;;YAWQ,IAAR,MAAkB,CAAlB,YAAA,CAAA,UAAA,CAAA,EAAA;gBAEA,UAAA,GAAyB,IAAzB,CAAA;aACA;SACA,CAAA,CAAA;QACA,IAAA,UAAA,EAAA;YACA,IAAA,CAAA,kBAAA,EAAA,CAAA;SAEA;KACA;;;;;;;;;KASA;;;;;;;;;KAKA;;;;;;;;YAKA,IAAA,CAAA,OAA8B,CAA9B,OAAA,CAAA,MAAA,IAAA,MAAA,CAAA,aAAA,EAAA,CAAA,CAAA;SACA;KACA;CACA;AACA,gBAAA,CAAA,UAAA,GAAA;;;gBA3TA,MAAA,EAAA,CAAA,eAAA,CAAA;gBACE,IAAF,EAAA;oBACA,MAAY,EAAZ,SAAA;oBACA,YAAA,EAAA,UAA8B;oBAC9B,OAAA,EAAA,kCAAA;oBACM,QAAN,EAAA,cAAA;oBACI,WAAJ,EAAA,kBAAA;oBACI,sBAAJ,EAA4B,MAA5B;oBACI,sBAAJ,EAAA,qBAAA;iBACA;gBACA,QAAA,EAAA,2BAAA;gBACA,MAAA,EAAA,CAAA,svZAAA,CAAA;gBACA,aAAA,EAAA,iBAAA,CAAA,IAAA;gBACA,SAAA,EAAA,CAAA,iCAAA,CAAA;gBACE,eAAF,EAAA,uBAAA,CAAA,MAAA;aACA,EAAA,EAAA;CACA,CAAA;;AAEA,gBAAE,CAAF,cAAiB,GAAjB,MAAA;IACA,EAAA,IAAA,EAAA,UAAA,EAAA;;;;IA/QA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAY,eAAZ,EAAA,IAAA,EAAA,CAAA,aAAA,EAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;IAoUA,eAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA;;;IA7CA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;CAGA,CAAA;;;;;;ADhQA,MAAa,aAAa,CAA1B;;;IA3BA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,OAAO,EAAE,CAAC,aAAa,EAAE,eAAe,EAAE,eAAe,EAAE,uBAAuB,EAAE,YAAY,CAAC;gBACjG,OAAO,EAAE;oBACP,OAAO;oBACP,UAAU;oBACV,WAAW;oBACX,yBAAyB;oBACzB,aAAa;oBACb,eAAe;oBACf,uBAAuB;oBACvB,4BAA4B;oBAC5B,uBAAuB;oBACvB,gBAAgB;oBAChB,aAAa;oBACb,gBAAgB;iBACjB;gBACD,YAAY,EAAE;oBACZ,OAAO;oBACP,UAAU;oBACV,WAAW;oBACX,yBAAyB;oBACzB,uBAAuB;oBACvB,4BAA4B;oBAC5B,gBAAgB;oBAChB,aAAa;iBACd;aACF,EAAD,EAAA;;;;;;;;;;;;;;;"}