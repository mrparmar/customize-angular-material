{"version":3,"file":"input.js","sources":["../../../src/lib/input/input-module.ts","../../../src/lib/input/input.ts","../../../src/lib/input/input-value-accessor.ts","../../../src/lib/input/input-errors.ts","../../../src/lib/input/autosize.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {TextFieldModule} from '@angular/cdk/text-field';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatTextareaAutosize} from './autosize';\r\nimport {MatInput} from './input';\r\n\r\n\r\n@NgModule({\r\n  declarations: [MatInput, MatTextareaAutosize],\r\n  imports: [\r\n    CommonModule,\r\n    TextFieldModule,\r\n    MatFormFieldModule,\r\n  ],\r\n  exports: [\r\n    TextFieldModule,\r\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\r\n    // be used together with `MatFormField`.\r\n    MatFormFieldModule,\r\n    MatInput,\r\n    MatTextareaAutosize,\r\n  ],\r\n  providers: [ErrorStateMatcher],\r\n})\r\nexport class MatInputModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\r\nimport {AutofillMonitor} from '@angular/cdk/text-field';\r\nimport {\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Self,\r\n} from '@angular/core';\r\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {\r\n  CanUpdateErrorState,\r\n  CanUpdateErrorStateCtor,\r\n  ErrorStateMatcher,\r\n  mixinErrorState,\r\n} from '@angular/material/core';\r\nimport {MatFormFieldControl} from '@angular/material/form-field';\r\nimport {Subject} from 'rxjs';\r\nimport {getMatInputUnsupportedTypeError} from './input-errors';\r\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\r\n\r\n\r\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\r\nconst MAT_INPUT_INVALID_TYPES = [\r\n  'button',\r\n  'checkbox',\r\n  'file',\r\n  'hidden',\r\n  'image',\r\n  'radio',\r\n  'range',\r\n  'reset',\r\n  'submit'\r\n];\r\n\r\nlet nextUniqueId = 0;\r\n\r\n// Boilerplate for applying mixins to MatInput.\r\n/** @docs-private */\r\nexport class MatInputBase {\r\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              /** @docs-private */\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\r\n    mixinErrorState(MatInputBase);\r\n\r\n/** Directive that allows a native input to work inside a `MatFormField`. */\r\n@Directive({\r\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\r\n      input[matNativeControl], textarea[matNativeControl]`,\r\n  exportAs: 'matInput',\r\n  host: {\r\n    /**\r\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\r\n     */\r\n    'class': 'mat-input-element mat-form-field-autofill-control',\r\n    '[class.mat-input-server]': '_isServer',\r\n    // Native input properties that are overwritten by Angular inputs need to be synced with\r\n    // the native input element. Otherwise property bindings for those don't work.\r\n    '[attr.id]': 'id',\r\n    '[attr.placeholder]': 'placeholder',\r\n    '[disabled]': 'disabled',\r\n    '[required]': 'required',\r\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '(blur)': '_focusChanged(false)',\r\n    '(focus)': '_focusChanged(true)',\r\n    '(input)': '_onInput()',\r\n  },\r\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\r\n})\r\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\r\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\r\n  protected _uid = `mat-input-${nextUniqueId++}`;\r\n  protected _previousNativeValue: any;\r\n  private _inputValueAccessor: {value: any};\r\n  /** The aria-describedby attribute on the input for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** Whether the component is being rendered on the server. */\r\n  _isServer = false;\r\n\r\n  /** Whether the component is a native html select. */\r\n  _isNativeSelect = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  focused: boolean = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  readonly stateChanges: Subject<void> = new Subject<void>();\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  controlType: string = 'mat-input';\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  autofilled = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    if (this.ngControl && this.ngControl.disabled !== null) {\r\n      return this.ngControl.disabled;\r\n    }\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // Browsers may not fire the blur event if the input is disabled too quickly.\r\n    // Reset from here to ensure that the element doesn't become stuck.\r\n    if (this.focused) {\r\n      this.focused = false;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n  protected _disabled = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get id(): string { return this._id; }\r\n  set id(value: string) { this._id = value || this._uid; }\r\n  protected _id: string;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\r\n  protected _required = false;\r\n\r\n  /** Input type of the element. */\r\n  @Input()\r\n  get type(): string { return this._type; }\r\n  set type(value: string) {\r\n    this._type = value || 'text';\r\n    this._validateType();\r\n\r\n    // When using Angular inputs, developers are no longer able to set the properties on the native\r\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\r\n    // with the native property. Textarea elements don't support the type property or attribute.\r\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\r\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\r\n    }\r\n  }\r\n  protected _type = 'text';\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get value(): string { return this._inputValueAccessor.value; }\r\n  set value(value: string) {\r\n    if (value !== this.value) {\r\n      this._inputValueAccessor.value = value;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Whether the element is readonly. */\r\n  @Input()\r\n  get readonly(): boolean { return this._readonly; }\r\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\r\n  private _readonly = false;\r\n\r\n  protected _neverEmptyInputTypes = [\r\n    'date',\r\n    'datetime',\r\n    'datetime-local',\r\n    'month',\r\n    'time',\r\n    'week'\r\n  ].filter(t => getSupportedInputTypes().has(t));\r\n\r\n  constructor(\r\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\r\n    protected _platform: Platform,\r\n    /** @docs-private */\r\n    @Optional() @Self() public ngControl: NgControl,\r\n    @Optional() _parentForm: NgForm,\r\n    @Optional() _parentFormGroup: FormGroupDirective,\r\n    _defaultErrorStateMatcher: ErrorStateMatcher,\r\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\r\n    private _autofillMonitor: AutofillMonitor,\r\n    ngZone: NgZone) {\r\n\r\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n\r\n    const element = this._elementRef.nativeElement;\r\n\r\n    // If no input value accessor was explicitly specified, use the element as the input value\r\n    // accessor.\r\n    this._inputValueAccessor = inputValueAccessor || element;\r\n\r\n    this._previousNativeValue = this.value;\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n\r\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\r\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\r\n    // exists on iOS, we only bother to install the listener on iOS.\r\n    if (_platform.IOS) {\r\n      ngZone.runOutsideAngular(() => {\r\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\r\n          let el = event.target as HTMLInputElement;\r\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\r\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\r\n            // `1, 1` fixes it for the first time that you type text and\r\n            // then hold delete. Toggling to `1, 1` and then back to\r\n            // `0, 0` seems to completely fix it.\r\n            el.setSelectionRange(1, 1);\r\n            el.setSelectionRange(0, 0);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    this._isServer = !this._platform.isBrowser;\r\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\r\n\r\n    if (this._isNativeSelect) {\r\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\r\n                                                                   'mat-native-select';\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this._platform.isBrowser) {\r\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\r\n        this.autofilled = event.isAutofilled;\r\n        this.stateChanges.next();\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.stateChanges.complete();\r\n\r\n    if (this._platform.isBrowser) {\r\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this.updateErrorState();\r\n    }\r\n\r\n    // We need to dirty-check the native element's value, because there are some cases where\r\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\r\n    // updating the value using `emitEvent: false`).\r\n    this._dirtyCheckNativeValue();\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  /** Callback for the cases where the focused state of the input changes. */\r\n  _focusChanged(isFocused: boolean) {\r\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\r\n      this.focused = isFocused;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  _onInput() {\r\n    // This is a noop function and is used to let Angular know whenever the value changes.\r\n    // Angular will run a new change detection each time the `input` event has been dispatched.\r\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\r\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\r\n    // value changes and will not disappear.\r\n    // Listening to the input event wouldn't be necessary when the input is using the\r\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\r\n  }\r\n\r\n  /** Does some manual dirty checking on the native input `value` property. */\r\n  protected _dirtyCheckNativeValue() {\r\n    const newValue = this._elementRef.nativeElement.value;\r\n\r\n    if (this._previousNativeValue !== newValue) {\r\n      this._previousNativeValue = newValue;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Make sure the input is a supported type. */\r\n  protected _validateType() {\r\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\r\n      throw getMatInputUnsupportedTypeError(this._type);\r\n    }\r\n  }\r\n\r\n  /** Checks whether the input type is one of the types that are never empty. */\r\n  protected _isNeverEmpty() {\r\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\r\n  }\r\n\r\n  /** Checks whether the input is invalid based on the native validation. */\r\n  protected _isBadInput() {\r\n    // The `validity` property won't be present on platform-server.\r\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\r\n    return validity && validity.badInput;\r\n  }\r\n\r\n  /** Determines if the component host is a textarea. */\r\n  protected _isTextarea() {\r\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get empty(): boolean {\r\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\r\n        !this.autofilled;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean {\r\n    if (this._isNativeSelect) {\r\n      // For a single-selection `<select>`, the label should float when the selected option has\r\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\r\n      // overlapping the label with the options.\r\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\r\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\r\n\r\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\r\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\r\n      return this.focused || selectElement.multiple || !this.empty ||\r\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\r\n    } else {\r\n      return this.focused || !this.empty;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) {\r\n    this._ariaDescribedby = ids.join(' ');\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick() {\r\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\r\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\r\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\r\n    if (!this.focused) {\r\n      this.focus();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\n/**\r\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\r\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\r\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\r\n * value to them.\r\n */\r\nexport const MAT_INPUT_VALUE_ACCESSOR =\r\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getMatInputUnsupportedTypeError(type: string): Error {\r\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n/**\r\n * Directive to automatically resize a textarea to fit its content.\r\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\r\n * @breaking-change 8.0.0\r\n */\r\n@Directive({\r\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\r\n  exportAs: 'matTextareaAutosize',\r\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\r\n  host: {\r\n    'class': 'cdk-textarea-autosize mat-autosize',\r\n    // Textarea elements that have the directive applied should have a single row by default.\r\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n    'rows': '1',\r\n    '(input)': '_noopInputHandler()',\r\n  },\r\n})\r\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\r\n  @Input()\r\n  get matAutosizeMinRows(): number { return this.minRows; }\r\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\r\n\r\n  @Input()\r\n  get matAutosizeMaxRows(): number { return this.maxRows; }\r\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\r\n\r\n  @Input('mat-autosize')\r\n  get matAutosize(): boolean { return this.enabled; }\r\n  set matAutosize(value: boolean) { this.enabled = value; }\r\n\r\n  @Input()\r\n  get matTextareaAutosize(): boolean { return this.enabled; }\r\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\r\n}\r\n"],"names":[],"mappings":"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"}