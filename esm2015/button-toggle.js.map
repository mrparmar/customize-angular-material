{"version":3,"file":"button-toggle.js","sources":["../../../src/lib/button-toggle/button-toggle-module.ts","../../../src/lib/button-toggle/button-toggle.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, MatRippleModule],\r\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\r\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\r\n})\r\nexport class MatButtonToggleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  InjectionToken,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanDisableRipple,\r\n  mixinDisableRipple,\r\n  CanDisableRippleCtor,\r\n} from '@angular/material/core';\r\n\r\n\r\n/** Acceptable types for a button toggle. */\r\nexport type ToggleType = 'checkbox' | 'radio';\r\n\r\n/** Possible appearance styles for the button toggle. */\r\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\r\n\r\n/**\r\n * Represents the default options for the button toggle that can be configured\r\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\r\n */\r\nexport interface MatButtonToggleDefaultOptions {\r\n  appearance?: MatButtonToggleAppearance;\r\n}\r\n\r\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all button toggles within an app.\r\n */\r\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\r\n\r\n\r\n\r\n/**\r\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatButtonToggleGroup),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * @deprecated Use `MatButtonToggleGroup` instead.\r\n * @breaking-change 8.0.0\r\n */\r\nexport class MatButtonToggleGroupMultiple {}\r\n\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Change event object emitted by MatButtonToggle. */\r\nexport class MatButtonToggleChange {\r\n  constructor(\r\n    /** The MatButtonToggle that emits the event. */\r\n    public source: MatButtonToggle,\r\n\r\n    /** The value assigned to the MatButtonToggle. */\r\n    public value: any) {}\r\n}\r\n\r\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\r\n@Directive({\r\n  selector: 'mat-button-toggle-group',\r\n  providers: [\r\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\r\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\r\n  ],\r\n  host: {\r\n    'role': 'group',\r\n    'class': 'mat-button-toggle-group',\r\n    '[attr.aria-disabled]': 'disabled',\r\n    '[class.mat-button-toggle-vertical]': 'vertical',\r\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\r\n  },\r\n  exportAs: 'matButtonToggleGroup',\r\n})\r\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\r\n  private _vertical = false;\r\n  private _multiple = false;\r\n  private _disabled = false;\r\n  private _selectionModel: SelectionModel<MatButtonToggle>;\r\n\r\n  /**\r\n   * Reference to the raw value that the consumer tried to assign. The real\r\n   * value will exclude any values from this one that don't correspond to a\r\n   * toggle. Useful for the cases where the value is assigned before the toggles\r\n   * have been initialized or at the same that they're being swapped out.\r\n   */\r\n  private _rawValue: any;\r\n\r\n  /**\r\n   * The method to be called in order to update ngModel.\r\n   * Now `ngModel` binding is not supported in multiple selection mode.\r\n   */\r\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  _onTouched: () => any = () => {};\r\n\r\n  /** Child button toggle buttons. */\r\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\r\n\r\n  /** The appearance for all the buttons in the group. */\r\n  @Input() appearance: MatButtonToggleAppearance;\r\n\r\n  /** `name` attribute for the underlying `input` element. */\r\n  @Input()\r\n  get name(): string { return this._name; }\r\n  set name(value: string) {\r\n    this._name = value;\r\n\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach(toggle => {\r\n        toggle.name = this._name;\r\n        toggle._markForCheck();\r\n      });\r\n    }\r\n  }\r\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether the toggle group is vertical. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Value of the toggle group. */\r\n  @Input()\r\n  get value(): any {\r\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\r\n\r\n    if (this.multiple) {\r\n      return selected.map(toggle => toggle.value);\r\n    }\r\n\r\n    return selected[0] ? selected[0].value : undefined;\r\n  }\r\n  set value(newValue: any) {\r\n    this._setSelectionByValue(newValue);\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  /**\r\n   * Event that emits whenever the value of the group changes.\r\n   * Used to facilitate two-way data binding.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange = new EventEmitter<any>();\r\n\r\n  /** Selected button toggles in the group. */\r\n  get selected() {\r\n    const selected = this._selectionModel.selected;\r\n    return this.multiple ? selected : (selected[0] || null);\r\n  }\r\n\r\n  /** Whether multiple button toggles can be selected. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether multiple button toggle group is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\r\n    }\r\n  }\r\n\r\n  /** Event emitted when the group's value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(\r\n    private _changeDetector: ChangeDetectorRef,\r\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\r\n        defaultOptions?: MatButtonToggleDefaultOptions) {\r\n\r\n      this.appearance =\r\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n    }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value Value to be set to the model.\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  _emitChangeEvent(): void {\r\n    const selected = this.selected;\r\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\r\n    const event = new MatButtonToggleChange(source!, this.value);\r\n    this._controlValueAccessorChangeFn(event.value);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Syncs a button toggle's selected state with the model value.\r\n   * @param toggle Toggle to be synced.\r\n   * @param select Whether the toggle should be selected.\r\n   * @param isUserInput Whether the change was a result of a user interaction.\r\n   */\r\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\r\n    // Deselect the currently-selected toggle, if we're in single-selection\r\n    // mode and the button being toggled isn't selected at the moment.\r\n    if (!this.multiple && this.selected && !toggle.checked) {\r\n      (this.selected as MatButtonToggle).checked = false;\r\n    }\r\n\r\n    if (select) {\r\n      this._selectionModel.select(toggle);\r\n    } else {\r\n      this._selectionModel.deselect(toggle);\r\n    }\r\n\r\n    // Only emit the change event for user input.\r\n    if (isUserInput) {\r\n      this._emitChangeEvent();\r\n    }\r\n\r\n    // Note: we emit this one no matter whether it was a user interaction, because\r\n    // it is used by Angular to sync up the two-way data binding.\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  /** Checks whether a button toggle is selected. */\r\n  _isSelected(toggle: MatButtonToggle) {\r\n    return this._selectionModel.isSelected(toggle);\r\n  }\r\n\r\n  /** Determines whether a button toggle should be checked on init. */\r\n  _isPrechecked(toggle: MatButtonToggle) {\r\n    if (typeof this._rawValue === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    if (this.multiple && Array.isArray(this._rawValue)) {\r\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\r\n    }\r\n\r\n    return toggle.value === this._rawValue;\r\n  }\r\n\r\n  /** Updates the selection state of the toggles in the group based on a value. */\r\n  private _setSelectionByValue(value: any|any[]) {\r\n    this._rawValue = value;\r\n\r\n    if (!this._buttonToggles) {\r\n      return;\r\n    }\r\n\r\n    if (this.multiple && value) {\r\n      if (!Array.isArray(value)) {\r\n        throw Error('Value must be an array in multiple-selection mode.');\r\n      }\r\n\r\n      this._clearSelection();\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\r\n    } else {\r\n      this._clearSelection();\r\n      this._selectValue(value);\r\n    }\r\n  }\r\n\r\n  /** Clears the selected toggles. */\r\n  private _clearSelection() {\r\n    this._selectionModel.clear();\r\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\r\n  }\r\n\r\n  /** Selects a value if there's a toggle that corresponds to it. */\r\n  private _selectValue(value: any) {\r\n    const correspondingOption = this._buttonToggles.find(toggle => {\r\n      return toggle.value != null && toggle.value === value;\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      correspondingOption.checked = true;\r\n      this._selectionModel.select(correspondingOption);\r\n    }\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to the MatButtonToggle class.\r\n/** @docs-private */\r\nexport class MatButtonToggleBase {}\r\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\r\n    mixinDisableRipple(MatButtonToggleBase);\r\n\r\n/** Single button inside of a toggle group. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-button-toggle',\r\n  templateUrl: 'button-toggle.html',\r\n  styleUrls: ['button-toggle.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matButtonToggle',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\r\n    '[class.mat-button-toggle-checked]': 'checked',\r\n    '[class.mat-button-toggle-disabled]': 'disabled',\r\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\r\n    'class': 'mat-button-toggle',\r\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\r\n    // but can still receive focus from things like cdkFocusInitial.\r\n    '[attr.tabindex]': '-1',\r\n    '[attr.id]': 'id',\r\n    '(focus)': 'focus()',\r\n  }\r\n})\r\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\r\n  CanDisableRipple, OnDestroy {\r\n\r\n  private _isSingleSelector = false;\r\n  private _checked = false;\r\n\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\r\n  _type: ToggleType;\r\n\r\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\r\n\r\n  /** The parent button toggle group (exclusive selection). Optional. */\r\n  buttonToggleGroup: MatButtonToggleGroup;\r\n\r\n  /** Unique ID for the underlying `button` element. */\r\n  get buttonId(): string { return `${this.id}-button`; }\r\n\r\n  /** The unique ID for this button toggle. */\r\n  @Input() id: string;\r\n\r\n  /** HTML's 'name' attribute used to group radios for unique selection. */\r\n  @Input() name: string;\r\n\r\n  /** MatButtonToggleGroup reads this to assign its own value. */\r\n  @Input() value: any;\r\n\r\n  /** Tabindex for the toggle. */\r\n  @Input() tabIndex: number | null;\r\n\r\n  /** The appearance style of the button. */\r\n  @Input()\r\n  get appearance(): MatButtonToggleAppearance {\r\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\r\n  }\r\n  set appearance(value: MatButtonToggleAppearance) {\r\n    this._appearance = value;\r\n  }\r\n  private _appearance: MatButtonToggleAppearance;\r\n\r\n  /** Whether the button is checked. */\r\n  @Input()\r\n  get checked(): boolean {\r\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\r\n  }\r\n  set checked(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._checked) {\r\n      this._checked = newValue;\r\n\r\n      if (this.buttonToggleGroup) {\r\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\r\n      }\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\r\n  }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Event emitted when the group value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _elementRef: ElementRef<HTMLElement>,\r\n              private _focusMonitor: FocusMonitor,\r\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\r\n              @Attribute('tabindex') defaultTabIndex: string,\r\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\r\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\r\n    super();\r\n\r\n    const parsedTabIndex = Number(defaultTabIndex);\r\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\r\n    this.buttonToggleGroup = toggleGroup;\r\n    this.appearance =\r\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\r\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\r\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\r\n\r\n    if (this._isSingleSelector) {\r\n      this.name = this.buttonToggleGroup.name;\r\n    }\r\n\r\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\r\n      this.checked = true;\r\n    }\r\n\r\n    this._focusMonitor.monitor(this._elementRef, true);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const group = this.buttonToggleGroup;\r\n\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n\r\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\r\n    // on the next tick in order to avoid \"changed after checked\" errors.\r\n    if (group && group._isSelected(this)) {\r\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\r\n    }\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._buttonElement.nativeElement.focus();\r\n  }\r\n\r\n  /** Checks the button toggle due to an interaction with the underlying native button. */\r\n  _onButtonClick() {\r\n    const newChecked = this._isSingleSelector ? true : !this._checked;\r\n\r\n    if (newChecked !== this._checked) {\r\n      this._checked = newChecked;\r\n      if (this.buttonToggleGroup) {\r\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\r\n        this.buttonToggleGroup._onTouched();\r\n      }\r\n    }\r\n    // Emit a change event when it's the single selector\r\n    this.change.emit(new MatButtonToggleChange(this, this.value));\r\n  }\r\n\r\n  /**\r\n   * Marks the button toggle as needing checking for change detection.\r\n   * This method is exposed because the parent button toggle group will directly\r\n   * update bound properties of the radio button.\r\n   */\r\n  _markForCheck() {\r\n    // When the group value changes, the button will not be notified.\r\n    // Use `markForCheck` to explicit update button toggle's status.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AC2DA,AAAA,MAAa,iCAAiC,GAC1C,IAAI,cAAc,CAAgC,mCAAmC,CAAC,CAD1F;;;;;;;AAUA,AAAA,MAAa,sCAAsC,GAAQ;IACzD,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,MAAM,oBAAoB,CAAC;IACnD,KAAK,EAAE,IAAI;CACZ,CAAD;;;;;AAMA,AAAA,MAAa,4BAA4B,CAAzC;CAA4C;;AAE5C,IAAI,gBAAgB,GAAG,CAAC,CAAxB;;;;AAGA,AAAA,MAAa,qBAAqB,CAAlC;;;;;IACE,WAAF,CAEW,MAAuB,EAGvB,KAAU,EALrB;QAEW,IAAX,CAAA,MAAiB,GAAN,MAAM,CAAiB;QAGvB,IAAX,CAAA,KAAgB,GAAL,KAAK,CAAK;KAAI;CACxB;;;;AAkBD,AAAA,MAAa,oBAAoB,CAAjC;;;;;IAsGE,WAAF,CACY,eAAkC,EAEtC,cAA8C,EAHtD;QACY,IAAZ,CAAA,eAA2B,GAAf,eAAe,CAAmB;QAtGpC,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;QAClB,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;QAClB,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;;;;;QAe1B,IAAF,CAAA,6BAA+B,GAAyB,MAAxD,GAAgE,CAAC;;;;QAG/D,IAAF,CAAA,UAAY,GAAc,MAA1B,GAAkC,CAAC;QAqBzB,IAAV,CAAA,KAAe,GAAG,CAAlB,wBAAA,EAA6C,gBAAgB,EAAE,CAA/D,CAAiE,CAAC;;;;;;QA8B7C,IAArB,CAAA,WAAgC,GAAG,IAAI,YAAY,EAAO,CAAC;;;;QA2BtC,IAArB,CAAA,MAA2B,GACrB,IAAI,YAAY,EAAyB,CAAC;QAO1C,IAAI,CAAC,UAAU;YACX,cAAc,IAAI,cAAc,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU,GAAG,UAAU,CAAC;KAC1F;;;;;IA/EH,IACI,IAAI,GADV,EACuB,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;;;;;IACzC,IAAI,IAAI,CAAC,KAAa,EAAxB;QACI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,IAAxC;gBACQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;gBACzB,MAAM,CAAC,aAAa,EAAE,CAAC;aACxB,CAAC,CAAC;SACJ;KACF;;;;;IAID,IACI,QAAQ,GADd,EAC4B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;IAClD,IAAI,QAAQ,CAAC,KAAc,EAA7B;QACI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;KAC/C;;;;;IAGD,IACI,KAAK,GADX;;QAEA,MAAU,QAAQ,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,GAAG,EAAE,CAA9E;QAEI,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,QAAQ,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;SAC7C;QAED,OAAO,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;KACpD;;;;;IACD,IAAI,KAAK,CAAC,QAAa,EAAzB;QACI,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACnC;;;;;IAUD,IAAI,QAAQ,GAAd;;QACA,MAAU,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAlD;QACI,OAAO,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;KACzD;;;;;IAGD,IACI,QAAQ,GADd,EAC4B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;IAClD,IAAI,QAAQ,CAAC,KAAc,EAA7B;QACI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;KAC/C;;;;;IAGD,IACI,QAAQ,GADd,EAC4B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;IAClD,IAAI,QAAQ,CAAC,KAAc,EAA7B;QACI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAE9C,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;SAC/D;KACF;;;;IAeD,QAAQ,GAAV;QACI,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAkB,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;KAC7F;;;;IAED,kBAAkB,GAApB;QACI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;KACtF;;;;;;IAMD,UAAU,CAAC,KAAU,EAAvB;QACI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;KACrC;;;;;;IAGD,gBAAgB,CAAC,EAAwB,EAA3C;QACI,IAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC;KACzC;;;;;;IAGD,iBAAiB,CAAC,EAAO,EAA3B;QACI,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACtB;;;;;;IAGD,gBAAgB,CAAC,UAAmB,EAAtC;QACI,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;KAC5B;;;;;IAGD,gBAAgB,GAAlB;;QACA,MAAU,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAlC;;QACA,MAAU,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,CAArF;;QACA,MAAU,KAAK,GAAG,IAAI,qBAAqB,oBAAC,MAAM,IAAG,IAAI,CAAC,KAAK,CAAC,CAAhE;QACI,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACzB;;;;;;;;IAQD,iBAAiB,CAAC,MAAuB,EAAE,MAAe,EAAE,WAAW,GAAG,KAAK,EAAjF;;;QAGI,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACtD,oBAAC,IAAI,CAAC,QAAQ,IAAqB,OAAO,GAAG,KAAK,CAAC;SACpD;QAED,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACrC;aAAM;YACL,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SACvC;;QAGD,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;;;QAID,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACnC;;;;;;IAGD,WAAW,CAAC,MAAuB,EAArC;QACI,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KAChD;;;;;;IAGD,aAAa,CAAC,MAAuB,EAAvC;QACI,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,WAAW,EAAE;YACzC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAClD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC;SACrF;QAED,OAAO,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,SAAS,CAAC;KACxC;;;;;;;IAGO,oBAAoB,CAAC,KAAgB,EAA/C;QACI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,OAAO;SACR;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,EAAE;YAC1B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACzB,MAAM,KAAK,CAAC,oDAAoD,CAAC,CAAC;aACnE;YAED,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,KAAK,CAAC,OAAO,CAAC,CAAC,YAAiB,KAAK,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;SACvE;aAAM;YACL,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SAC1B;KACF;;;;;;IAGO,eAAe,GAAzB;QACI,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;KAC/D;;;;;;;IAGO,YAAY,CAAC,KAAU,EAAjC;;QACA,MAAU,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,IAA/D;YACM,OAAO,MAAM,CAAC,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,KAAK,KAAK,CAAC;SACvD,CAAC,CAAN;QAEI,IAAI,mBAAmB,EAAE;YACvB,mBAAmB,CAAC,OAAO,GAAG,IAAI,CAAC;YACnC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;SAClD;KACF;;;IA3PH,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;gBACT,QAAQ,EAAE,yBAAyB;gBACnC,SAAS,EAAE;oBACT,sCAAsC;oBACtC,EAAC,OAAO,EAAE,4BAA4B,EAAE,WAAW,EAAE,oBAAoB,EAAC;iBAC3E;gBACD,IAAI,EAAE;oBACJ,MAAM,EAAE,OAAO;oBACf,OAAO,EAAE,yBAAyB;oBAClC,sBAAsB,EAAE,UAAU;oBAClC,oCAAoC,EAAE,UAAU;oBAChD,qDAAqD,EAAE,2BAA2B;iBACnF;gBACD,QAAQ,EAAE,sBAAsB;aACjC,EAAD,EAAA;;;;IA7FA,EAAA,IAAA,EAAE,iBAAiB,EAAnB;IAsMA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAK,QAAQ,EAAb,EAAA,EAAA,IAAA,EAAiB,MAAM,EAAvB,IAAA,EAAA,CAAwB,iCAAiC,EAAzD,EAAA,CAAA,EAAA;;;IAhFA,cAAA,EAAA,CAAA,EAAA,IAAA,EAAG,eAAe,EAAlB,IAAA,EAAA,CAAmB,UAAU,CAAC,MAAM,eAAe,CAAC,EAApD,EAAA,CAAA;IAGA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;IAGA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;IAeA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;IAOA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;IAoBA,WAAA,EAAA,CAAA,EAAA,IAAA,EAAG,MAAM,EAAT,CAAA;IASA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;IAOA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;IAWA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAG,MAAM,EAAT,CAAA;;;;;;AA8IA,AAAA,MAAa,mBAAmB,CAAhC;CAAmC;;AACnC,AAAA,MAAa,yBAAyB,GAClC,kBAAkB,CAAC,mBAAmB,CAAC,CAD3C;;;;AA0BA,AAAA,MAAa,eAAgB,SAAQ,yBAAyB,CAA9D;;;;;;;;;IAiFE,WAAF,CAA0B,WAAiC,EACrC,kBAAqC,EACrC,WAAoC,EACpC,aAA2B;;IAEZ,eAAuB,EAE1C,cAA8C,EAFhE;QAGI,KAAK,EAAE,CAAC;QAPU,IAAtB,CAAA,kBAAwC,GAAlB,kBAAkB,CAAmB;QACrC,IAAtB,CAAA,WAAiC,GAAX,WAAW,CAAyB;QACpC,IAAtB,CAAA,aAAmC,GAAb,aAAa,CAAc;QAjFvC,IAAV,CAAA,iBAA2B,GAAG,KAAK,CAAC;QAC1B,IAAV,CAAA,QAAkB,GAAG,KAAK,CAAC;;;;QAWC,IAA5B,CAAA,cAA0C,GAAkB,IAAI,CAAC;QA4DvD,IAAV,CAAA,SAAmB,GAAY,KAAK,CAAC;;;;QAGhB,IAArB,CAAA,MAA2B,GACrB,IAAI,YAAY,EAAyB,CAAC;;QAYhD,MAAU,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAlD;QACI,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,IAAI,cAAc,KAAK,CAAC,IAAI,cAAc,GAAG,IAAI,CAAC;QACjF,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC;QACrC,IAAI,CAAC,UAAU;YACX,cAAc,IAAI,cAAc,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU,GAAG,UAAU,CAAC;KAC1F;;;;;IAtED,IAAI,QAAQ,GAAd,EAA2B,OAAO,CAAlC,EAAqC,IAAI,CAAC,EAAE,CAA5C,OAAA,CAAqD,CAAC,EAAE;;;;;IAetD,IACI,UAAU,GADhB;QAEI,OAAO,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;KACtF;;;;;IACD,IAAI,UAAU,CAAC,KAAgC,EAAjD;QACI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;KAC1B;;;;;IAID,IACI,OAAO,GADb;QAEI,OAAO,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;KAC1F;;;;;IACD,IAAI,OAAO,CAAC,KAAc,EAA5B;;QACA,MAAU,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAjD;QAEI,IAAI,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE;YAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAEzB,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1B,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC/D;YAED,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;SACxC;KACF;;;;;IAGD,IACI,QAAQ,GADd;QAEI,OAAO,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KACtF;;;;;IACD,IAAI,QAAQ,CAAC,KAAc,EAA7B,EAAiC,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;IAwB/E,QAAQ,GAAV;QACI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;QACpF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,GAAG,OAAO,GAAG,UAAU,CAAC;QAC3D,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,CAAzB,kBAAA,EAA8C,gBAAgB,EAAE,CAAhE,CAAkE,CAAC;QAE/D,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;SACzC;QAED,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;YACxE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;QAED,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;KACpD;;;;IAED,WAAW,GAAb;;QACA,MAAU,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAxC;QAEI,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;;QAIpD,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;YACpC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;SACpE;KACF;;;;;IAGD,KAAK,GAAP;QACI,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KAC3C;;;;;IAGD,cAAc,GAAhB;;QACA,MAAU,UAAU,GAAG,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAArE;QAEI,IAAI,UAAU,KAAK,IAAI,CAAC,QAAQ,EAAE;YAChC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;YAC3B,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1B,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBACpE,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;aACrC;SACF;;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;KAC/D;;;;;;;IAOD,aAAa,GAAf;;;QAGI,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;IAjLH,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,mBAAA;gBACE,QAAQ,EAAE,smBAAZ;gBACE,MAAF,EAAU,CAAV,ywFAAA,CAAA;gBACE,aAAa,EAAf,iBAAA,CAAmC,IAAnC;gBACE,QAAF,EAAA,iBAAA;gBACE,eAAe,EAAjB,uBAAA,CAAA,MAAA;gBACE,MAAF,EAAU,CAAV,eAAA,CAAA;gBACE,IAAF,EAAA;oBACA,sCAAA,EAAA,oBAAA;oBACM,mCAAN,EAAA,SAAA;oBACI,oCAAJ,EAA0C,UAA1C;oBACI,+CAAJ,EAAA,2BAAA;oBACI,OAAJ,EAAA,mBAAA;;;;;oBAKI,SAAJ,EAAA,SAAA;iBACA;aACA,EAAA,EAAA;CACA,CAAA;;;;;IAmFA,EAAA,IAAA,EAAuC,UAAvC,EAAA;IA3bA,EAAA,IAAA,EAAE,YAAF,EAAA;IAIA,EAAA,IAAA,EAAE,MAAF,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,EAAA,CAAA,EAAA;IAXA,EAAA,IAAA,EAAQ,SAAR,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,iCAAA,EAAA,EAAA,CAAA,EAAA;CAucA,CAAA;AACA,eAAA,CAAA,cAAA,GAAA;;;IA7EA,cAAA,EAAA,CAAA,EAAA,IAAA,EAAQ,SAAC,EAAT,IAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA;IAKA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;IAKA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;IASA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;IAGA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;IAGA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAQ,KAAR,EAAA,CAAA;IAGA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;IAGA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAQ,CAAR;IAUA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAQ,EAAR,CAAA;CAmBA,CAAA;;;;;;AD7aA,MAAa,qBAAqB,CAAlC;;;IALA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC;gBAC3C,OAAO,EAAE,CAAC,eAAe,EAAE,oBAAoB,EAAE,eAAe,CAAC;gBACjE,YAAY,EAAE,CAAC,oBAAoB,EAAE,eAAe,CAAC;aACtD,EAAD,EAAA;;;;;;;;;;;;;;;"}