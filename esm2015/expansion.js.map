{"version":3,"file":"expansion.js","sources":["../../../src/lib/expansion/expansion-module.ts","../../../src/lib/expansion/accordion.ts","../../../src/lib/expansion/expansion-panel-header.ts","../../../src/lib/expansion/expansion-panel.ts","../../../src/lib/expansion/expansion-panel-content.ts","../../../src/lib/expansion/expansion-animations.ts","../../../src/lib/expansion/accordion-base.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatAccordion} from './accordion';\r\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\r\nimport {MatExpansionPanelContent} from './expansion-panel-content';\r\nimport {\r\n  MatExpansionPanelDescription,\r\n  MatExpansionPanelHeader,\r\n  MatExpansionPanelTitle,\r\n} from './expansion-panel-header';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\r\n  exports: [\r\n    MatAccordion,\r\n    MatExpansionPanel,\r\n    MatExpansionPanelActionRow,\r\n    MatExpansionPanelHeader,\r\n    MatExpansionPanelTitle,\r\n    MatExpansionPanelDescription,\r\n    MatExpansionPanelContent,\r\n  ],\r\n  declarations: [\r\n    MatAccordion,\r\n    MatExpansionPanel,\r\n    MatExpansionPanelActionRow,\r\n    MatExpansionPanelHeader,\r\n    MatExpansionPanelTitle,\r\n    MatExpansionPanelDescription,\r\n    MatExpansionPanelContent,\r\n  ],\r\n})\r\nexport class MatExpansionModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CdkAccordion} from '@angular/cdk/accordion';\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {HOME, END} from '@angular/cdk/keycodes';\r\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\r\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\r\n\r\n/**\r\n * Directive for a Material Design Accordion.\r\n */\r\n@Directive({\r\n  selector: 'mat-accordion',\r\n  exportAs: 'matAccordion',\r\n  inputs: ['multi'],\r\n  providers: [{\r\n    provide: MAT_ACCORDION,\r\n    useExisting: MatAccordion\r\n  }],\r\n  host: {\r\n    class: 'mat-accordion'\r\n  }\r\n})\r\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\r\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\r\n\r\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\r\n  _headers: QueryList<MatExpansionPanelHeader>;\r\n\r\n  /** Whether the expansion indicator should be hidden. */\r\n  @Input()\r\n  get hideToggle(): boolean { return this._hideToggle; }\r\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\r\n  private _hideToggle: boolean = false;\r\n\r\n  /**\r\n   * Display mode used for all expansion panels in the accordion. Currently two display\r\n   * modes exist:\r\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\r\n   *     panel at a different elevation from the rest of the accordion.\r\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\r\n   *     elevation.\r\n   */\r\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\r\n  }\r\n\r\n  /** Handles keyboard events coming in from the panel headers. */\r\n  _handleHeaderKeydown(event: KeyboardEvent) {\r\n    const {keyCode} = event;\r\n    const manager = this._keyManager;\r\n\r\n    if (keyCode === HOME) {\r\n      manager.setFirstItemActive();\r\n      event.preventDefault();\r\n    } else if (keyCode === END) {\r\n      manager.setLastItemActive();\r\n      event.preventDefault();\r\n    } else {\r\n      this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\r\n    this._keyManager.updateActiveItem(header);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  Host,\r\n  Input,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {merge, Subscription, EMPTY} from 'rxjs';\r\nimport {filter} from 'rxjs/operators';\r\nimport {matExpansionAnimations} from './expansion-animations';\r\nimport {\r\n  MatExpansionPanel,\r\n  MatExpansionPanelDefaultOptions,\r\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\r\n} from './expansion-panel';\r\n\r\n\r\n/**\r\n * `<mat-expansion-panel-header>`\r\n *\r\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-expansion-panel-header',\r\n  styleUrls: ['./expansion-panel-header.css'],\r\n  templateUrl: './expansion-panel-header.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    matExpansionAnimations.indicatorRotate,\r\n    matExpansionAnimations.expansionHeaderHeight\r\n  ],\r\n  host: {\r\n    'class': 'mat-expansion-panel-header',\r\n    'role': 'button',\r\n    '[attr.id]': 'panel._headerId',\r\n    '[attr.tabindex]': 'disabled ? -1 : 0',\r\n    '[attr.aria-controls]': '_getPanelId()',\r\n    '[attr.aria-expanded]': '_isExpanded()',\r\n    '[attr.aria-disabled]': 'panel.disabled',\r\n    '[class.mat-expanded]': '_isExpanded()',\r\n    '(click)': '_toggle()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[@expansionHeight]': `{\r\n        value: _getExpandedState(),\r\n        params: {\r\n          collapsedHeight: collapsedHeight,\r\n          expandedHeight: expandedHeight\r\n        }\r\n    }`,\r\n  },\r\n})\r\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\r\n  private _parentChangeSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n      @Host() public panel: MatExpansionPanel,\r\n      private _element: ElementRef,\r\n      private _focusMonitor: FocusMonitor,\r\n      private _changeDetectorRef: ChangeDetectorRef,\r\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\r\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\r\n    const accordionHideToggleChange = panel.accordion ?\r\n        panel.accordion._stateChanges.pipe(\r\n            filter(changes => !!changes['hideToggle'])) :\r\n        EMPTY;\r\n\r\n    // Since the toggle state depends on an @Input on the panel, we\r\n    // need to subscribe and trigger change detection manually.\r\n    this._parentChangeSubscription =\r\n        merge(\r\n            panel.opened, panel.closed, accordionHideToggleChange,\r\n            panel._inputChanges.pipe(filter(\r\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\r\n    .subscribe(() => this._changeDetectorRef.markForCheck());\r\n\r\n    // Avoids focus being lost if the panel contained the focused element and was closed.\r\n    panel.closed\r\n      .pipe(filter(() => panel._containsFocus()))\r\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\r\n\r\n    _focusMonitor.monitor(_element).subscribe(origin => {\r\n      if (origin && panel.accordion) {\r\n        panel.accordion._handleHeaderFocus(this);\r\n      }\r\n    });\r\n\r\n    if (defaultOptions) {\r\n      this.expandedHeight = defaultOptions.expandedHeight;\r\n      this.collapsedHeight = defaultOptions.collapsedHeight;\r\n    }\r\n  }\r\n\r\n  /** Height of the header while the panel is expanded. */\r\n  @Input() expandedHeight: string;\r\n\r\n  /** Height of the header while the panel is collapsed. */\r\n  @Input() collapsedHeight: string;\r\n\r\n  /**\r\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\r\n   * @docs-private\r\n   */\r\n  get disabled() {\r\n    return this.panel.disabled;\r\n  }\r\n\r\n  /** Toggles the expanded state of the panel. */\r\n  _toggle(): void {\r\n    this.panel.toggle();\r\n  }\r\n\r\n  /** Gets whether the panel is expanded. */\r\n  _isExpanded(): boolean {\r\n    return this.panel.expanded;\r\n  }\r\n\r\n  /** Gets the expanded state string of the panel. */\r\n  _getExpandedState(): string {\r\n    return this.panel._getExpandedState();\r\n  }\r\n\r\n  /** Gets the panel id. */\r\n  _getPanelId(): string {\r\n    return this.panel.id;\r\n  }\r\n\r\n  /** Gets whether the expand indicator should be shown. */\r\n  _showToggle(): boolean {\r\n    return !this.panel.hideToggle && !this.panel.disabled;\r\n  }\r\n\r\n  /** Handle keydown event calling to toggle() if appropriate. */\r\n  _keydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      // Toggle for space and enter keys.\r\n      case SPACE:\r\n      case ENTER:\r\n        if (!hasModifierKey(event)) {\r\n          event.preventDefault();\r\n          this._toggle();\r\n        }\r\n\r\n        break;\r\n      default:\r\n        if (this.panel.accordion) {\r\n          this.panel.accordion._handleHeaderKeydown(event);\r\n        }\r\n\r\n        return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\r\n   * @param origin Origin of the action that triggered the focus.\r\n   * @docs-private\r\n   */\r\n  focus(origin: FocusOrigin = 'program') {\r\n    this._focusMonitor.focusVia(this._element, origin);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._parentChangeSubscription.unsubscribe();\r\n    this._focusMonitor.stopMonitoring(this._element);\r\n  }\r\n}\r\n\r\n/**\r\n * `<mat-panel-description>`\r\n *\r\n * This directive is to be used inside of the MatExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  selector: 'mat-panel-description',\r\n  host: {\r\n    class: 'mat-expansion-panel-header-description'\r\n  }\r\n})\r\nexport class MatExpansionPanelDescription {}\r\n\r\n/**\r\n * `<mat-panel-title>`\r\n *\r\n * This directive is to be used inside of the MatExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  selector: 'mat-panel-title',\r\n  host: {\r\n    class: 'mat-expansion-panel-header-title'\r\n  }\r\n})\r\nexport class MatExpansionPanelTitle {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  EventEmitter,\r\n  ElementRef,\r\n  Input,\r\n  Inject,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n  ViewChild,\r\n  InjectionToken,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {Subject} from 'rxjs';\r\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\r\nimport {matExpansionAnimations} from './expansion-animations';\r\nimport {MatExpansionPanelContent} from './expansion-panel-content';\r\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\r\n\r\n/** MatExpansionPanel's states. */\r\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\r\n\r\n/** Counter for generating unique element ids. */\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Object that can be used to override the default options\r\n * for all of the expansion panels in a module.\r\n */\r\nexport interface MatExpansionPanelDefaultOptions {\r\n  /** Height of the header while the panel is expanded. */\r\n  expandedHeight: string;\r\n\r\n  /** Height of the header while the panel is collapsed. */\r\n  collapsedHeight: string;\r\n\r\n  /** Whether the toggle indicator should be hidden. */\r\n  hideToggle: boolean;\r\n}\r\n\r\n/**\r\n * Injection token that can be used to configure the defalt\r\n * options for the expansion panel component.\r\n */\r\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\r\n\r\n/**\r\n * `<mat-expansion-panel>`\r\n *\r\n * This component can be used as a single element to show expandable content, or as one of\r\n * multiple children of an element with the MatAccordion directive attached.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  styleUrls: ['./expansion-panel.css'],\r\n  selector: 'mat-expansion-panel',\r\n  exportAs: 'matExpansionPanel',\r\n  templateUrl: './expansion-panel.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled', 'expanded'],\r\n  outputs: ['opened', 'closed', 'expandedChange'],\r\n  animations: [matExpansionAnimations.bodyExpansion],\r\n  providers: [\r\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\r\n    // to the same accordion.\r\n    {provide: MAT_ACCORDION, useValue: undefined},\r\n  ],\r\n  host: {\r\n    'class': 'mat-expansion-panel',\r\n    '[class.mat-expanded]': 'expanded',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\r\n  }\r\n})\r\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\r\n  OnDestroy {\r\n\r\n  // @breaking-change 8.0.0 Remove `| undefined` from here\r\n  // when the `_document` constructor param is required.\r\n  private _document: Document | undefined;\r\n\r\n  /** Whether the toggle indicator should be hidden. */\r\n  @Input()\r\n  get hideToggle(): boolean {\r\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\r\n  }\r\n  set hideToggle(value: boolean) {\r\n    this._hideToggle = coerceBooleanProperty(value);\r\n  }\r\n  private _hideToggle = false;\r\n\r\n  /** An event emitted after the body's expansion animation happens. */\r\n  @Output() afterExpand = new EventEmitter<void>();\r\n\r\n  /** An event emitted after the body's collapse animation happens. */\r\n  @Output() afterCollapse = new EventEmitter<void>();\r\n\r\n  /** Stream that emits for changes in `@Input` properties. */\r\n  readonly _inputChanges = new Subject<SimpleChanges>();\r\n\r\n  /** Optionally defined accordion the expansion panel belongs to. */\r\n  accordion: MatAccordionBase;\r\n\r\n  /** Content that will be rendered lazily. */\r\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\r\n\r\n  /** Element containing the panel's user-provided content. */\r\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\r\n\r\n  /** Portal holding the user's content. */\r\n  _portal: TemplatePortal;\r\n\r\n  /** ID for the associated header element. Used for a11y labelling. */\r\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\r\n\r\n  /** Stream of body animation done events. */\r\n  _bodyAnimationDone = new Subject<AnimationEvent>();\r\n\r\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\r\n              @Inject(DOCUMENT) _document?: any,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\r\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\r\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\r\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\r\n    this.accordion = accordion;\r\n    this._document = _document;\r\n\r\n    // We need a Subject with distinctUntilChanged, because the `done` event\r\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\r\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\r\n      return x.fromState === y.fromState && x.toState === y.toState;\r\n    })).subscribe(event => {\r\n      if (event.fromState !== 'void') {\r\n        if (event.toState === 'expanded') {\r\n          this.afterExpand.emit();\r\n        } else if (event.toState === 'collapsed') {\r\n          this.afterCollapse.emit();\r\n        }\r\n      }\r\n    });\r\n\r\n    if (defaultOptions) {\r\n      this.hideToggle = defaultOptions.hideToggle;\r\n    }\r\n  }\r\n\r\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\r\n  _hasSpacing(): boolean {\r\n    if (this.accordion) {\r\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\r\n      // the [displayMode] input changes, the change detection will also cover the host bindings\r\n      // of this expansion panel.\r\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Gets the expanded state string. */\r\n  _getExpandedState(): MatExpansionPanelState {\r\n    return this.expanded ? 'expanded' : 'collapsed';\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this._lazyContent) {\r\n      // Render the content as soon as the panel becomes open.\r\n      this.opened.pipe(\r\n        startWith<void>(null!),\r\n        filter(() => this.expanded && !this._portal),\r\n        take(1)\r\n      ).subscribe(() => {\r\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this._inputChanges.next(changes);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n    this._bodyAnimationDone.complete();\r\n    this._inputChanges.complete();\r\n  }\r\n\r\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\r\n  _containsFocus(): boolean {\r\n    if (this._body && this._document) {\r\n      const focusedElement = this._document.activeElement;\r\n      const bodyElement = this._body.nativeElement;\r\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: 'mat-action-row',\r\n  host: {\r\n    class: 'mat-action-row'\r\n  }\r\n})\r\nexport class MatExpansionPanelActionRow {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * Expansion panel content that will be rendered lazily\r\n * after the panel is opened for the first time.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[matExpansionPanelContent]'\r\n})\r\nexport class MatExpansionPanelContent {\r\n  constructor(public _template: TemplateRef<any>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  animateChild,\r\n  group,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  query,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Time and timing curve for expansion panel animations. */\r\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\r\n\r\n/**\r\n * Animations used by the Material expansion panel.\r\n *\r\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\r\n * causes the animation state of moved components to become `void` upon exit, and not update again\r\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\r\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\r\n *\r\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\r\n * are defined to have the same styles. Since angular animates from the current styles to the\r\n * destination state's style definition, in situations where we are moving from `void`'s styles to\r\n * `collapsed` this acts a noop since no style values change.\r\n *\r\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\r\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\r\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\r\n * occur as expected.\r\n *\r\n * Angular Bug: https://github.com/angular/angular/issues/18847\r\n *\r\n * @docs-private\r\n */\r\nexport const matExpansionAnimations: {\r\n  readonly indicatorRotate: AnimationTriggerMetadata;\r\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\r\n  readonly bodyExpansion: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that rotates the indicator arrow. */\r\n  indicatorRotate: trigger('indicatorRotate', [\r\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\r\n    state('expanded', style({transform: 'rotate(180deg)'})),\r\n    transition('expanded <=> collapsed, void => collapsed',\r\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n  ]),\r\n\r\n  /** Animation that expands and collapses the panel header height. */\r\n  expansionHeaderHeight: trigger('expansionHeight', [\r\n    state('collapsed, void', style({\r\n      height: '{{collapsedHeight}}',\r\n    }), {\r\n      params: {collapsedHeight: '48px'},\r\n    }),\r\n    state('expanded', style({\r\n      height: '{{expandedHeight}}'\r\n    }), {\r\n      params: {expandedHeight: '64px'}\r\n    }),\r\n    transition('expanded <=> collapsed, void => collapsed', group([\r\n      query('@indicatorRotate', animateChild(), {optional: true}),\r\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\r\n    ])),\r\n  ]),\r\n\r\n  /** Animation that expands and collapses the panel content. */\r\n  bodyExpansion: trigger('bodyExpansion', [\r\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\r\n    state('expanded', style({height: '*', visibility: 'visible'})),\r\n    transition('expanded <=> collapsed, void => collapsed',\r\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\nimport {CdkAccordion} from '@angular/cdk/accordion';\r\n\r\n/** MatAccordion's display modes. */\r\nexport type MatAccordionDisplayMode = 'default' | 'flat';\r\n\r\n/**\r\n * Base interface for a `MatAccordion`.\r\n * @docs-private\r\n */\r\nexport interface MatAccordionBase extends CdkAccordion {\r\n  /** Whether the expansion indicator should be hidden. */\r\n  hideToggle: boolean;\r\n\r\n  /** Display mode used for all expansion panels in the accordion. */\r\n  displayMode: MatAccordionDisplayMode;\r\n\r\n  /** Handles keyboard events coming in from the panel headers. */\r\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\r\n\r\n  /** Handles focus events on the panel headers. */\r\n  _handleHeaderFocus: (header: any) => void;\r\n}\r\n\r\n\r\n/**\r\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\r\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\r\n */\r\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\r\n"],"names":[],"mappings":"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"}