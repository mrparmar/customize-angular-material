{"version":3,"file":"tree.js","sources":["../../../src/lib/tree/data-source/nested-data-source.ts","../../../src/lib/tree/data-source/flat-data-source.ts","../../../src/lib/tree/tree-module.ts","../../../src/lib/tree/toggle.ts","../../../src/lib/tree/tree.ts","../../../src/lib/tree/padding.ts","../../../src/lib/tree/node.ts","../../../src/lib/tree/outlet.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n */\r\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\r\n  _data = new BehaviorSubject<T[]>([]);\r\n\r\n  /**\r\n   * Data for the nested tree\r\n   */\r\n  get data() { return this._data.value; }\r\n  set data(value: T[]) { this._data.next(value); }\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\r\n    return merge(...[collectionViewer.viewChange, this._data])\r\n      .pipe(map(() => {\r\n        return this.data;\r\n      }));\r\n  }\r\n\r\n  disconnect() {\r\n    // no op\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\r\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\r\nimport {map, take} from 'rxjs/operators';\r\n\r\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n */\r\nexport class MatTreeFlattener<T, F> {\r\n\r\n  constructor(public transformFunction: (node: T, level: number) => F,\r\n              public getLevel: (node: F) => number,\r\n              public isExpandable: (node: F) => boolean,\r\n              public getChildren: (node: T) =>\r\n                  Observable<T[]> | T[] | undefined | null) {}\r\n\r\n  _flattenNode(node: T, level: number,\r\n               resultNodes: F[], parentMap: boolean[]): F[] {\r\n    const flatNode = this.transformFunction(node, level);\r\n    resultNodes.push(flatNode);\r\n\r\n    if (this.isExpandable(flatNode)) {\r\n      const childrenNodes = this.getChildren(node);\r\n      if (childrenNodes) {\r\n        if (Array.isArray(childrenNodes)) {\r\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\r\n        } else {\r\n          childrenNodes.pipe(take(1)).subscribe(children => {\r\n            this._flattenChildren(children, level, resultNodes, parentMap);\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return resultNodes;\r\n  }\r\n\r\n  _flattenChildren(children: T[], level: number,\r\n                   resultNodes: F[], parentMap: boolean[]): void {\r\n    children.forEach((child, index) => {\r\n      let childParentMap: boolean[] = parentMap.slice();\r\n      childParentMap.push(index != children.length - 1);\r\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Flatten a list of node type T to flattened version of node F.\r\n   * Please note that type T may be nested, and the length of `structuredData` may be different\r\n   * from that of returned list `F[]`.\r\n   */\r\n  flattenNodes(structuredData: T[]): F[] {\r\n    let resultNodes: F[] = [];\r\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\r\n    return resultNodes;\r\n  }\r\n\r\n  /**\r\n   * Expand flattened node with current expansion status.\r\n   * The returned list may have different length.\r\n   */\r\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\r\n    let results: F[] = [];\r\n    let currentExpand: boolean[] = [];\r\n    currentExpand[0] = true;\r\n\r\n    nodes.forEach(node => {\r\n      let expand = true;\r\n      for (let i = 0; i <= this.getLevel(node); i++) {\r\n        expand = expand && currentExpand[i];\r\n      }\r\n      if (expand) {\r\n        results.push(node);\r\n      }\r\n      if (this.isExpandable(node)) {\r\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\r\n      }\r\n    });\r\n    return results;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n */\r\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\r\n  _flattenedData = new BehaviorSubject<F[]>([]);\r\n\r\n  _expandedData = new BehaviorSubject<F[]>([]);\r\n\r\n  _data: BehaviorSubject<T[]>;\r\n  get data() { return this._data.value; }\r\n  set data(value: T[]) {\r\n    this._data.next(value);\r\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\r\n    this.treeControl.dataNodes = this._flattenedData.value;\r\n  }\r\n\r\n  constructor(private treeControl: FlatTreeControl<F>,\r\n              private treeFlattener: MatTreeFlattener<T, F>,\r\n              initialData: T[] = []) {\r\n    super();\r\n    this._data = new BehaviorSubject<T[]>(initialData);\r\n  }\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\r\n    const changes = [\r\n      collectionViewer.viewChange,\r\n      this.treeControl.expansionModel.onChange,\r\n      this._flattenedData\r\n    ];\r\n    return merge(...changes).pipe(map(() => {\r\n      this._expandedData.next(\r\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\r\n      return this._expandedData.value;\r\n    }));\r\n  }\r\n\r\n  disconnect() {\r\n    // no op\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\r\nimport {MatTree} from './tree';\r\nimport {MatTreeNodeToggle} from './toggle';\r\nimport {MatTreeNodeOutlet} from './outlet';\r\nimport {MatTreeNodePadding} from './padding';\r\n\r\nconst MAT_TREE_DIRECTIVES = [\r\n  MatNestedTreeNode,\r\n  MatTreeNodeDef,\r\n  MatTreeNodePadding,\r\n  MatTreeNodeToggle,\r\n  MatTree,\r\n  MatTreeNode,\r\n  MatTreeNodeOutlet\r\n];\r\n\r\n@NgModule({\r\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\r\n  exports: MAT_TREE_DIRECTIVES,\r\n  declarations: MAT_TREE_DIRECTIVES,\r\n})\r\nexport class MatTreeModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodeToggle]',\r\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\r\n})\r\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\r\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkTree} from '@angular/cdk/tree';\r\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\r\nimport {MatTreeNodeOutlet} from './outlet';\r\n\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tree',\r\n  exportAs: 'matTree',\r\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\r\n  host: {\r\n    'class': 'mat-tree',\r\n    'role': 'tree',\r\n  },\r\n  styleUrls: ['tree.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  providers: [{provide: CdkTree, useExisting: MatTree}]\r\n})\r\nexport class MatTree<T> extends CdkTree<T> {\r\n  // Outlets within the tree's template where the dataNodes will be inserted.\r\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodePadding]',\r\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\r\n})\r\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\r\n\r\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\r\n  @Input('matTreeNodePadding') level: number;\r\n\r\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\r\n  @Input('matTreeNodePaddingIndent') indent: number;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  CDK_TREE_NODE_OUTLET_NODE,\r\n  CdkNestedTreeNode,\r\n  CdkTree,\r\n  CdkTreeNode,\r\n  CdkTreeNodeDef,\r\n} from '@angular/cdk/tree';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  HasTabIndex,\r\n  HasTabIndexCtor,\r\n  mixinDisabled,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\n\r\nimport {MatTreeNodeOutlet} from './outlet';\r\n\r\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\r\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\r\n\r\nexport const _MatNestedTreeNodeMixinBase:\r\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\r\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\r\n\r\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n */\r\n@Directive({\r\n  selector: 'mat-tree-node',\r\n  exportAs: 'matTreeNode',\r\n  inputs: ['disabled', 'tabIndex'],\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n    '[attr.role]': 'role',\r\n    'class': 'mat-tree-node'\r\n  },\r\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\r\n})\r\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\r\n    implements CanDisable, HasTabIndex {\r\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\r\n              protected _tree: CdkTree<T>,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n    super(_elementRef, _tree);\r\n\r\n    this.tabIndex = Number(tabIndex) || 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodeDef]',\r\n  inputs: [\r\n    'when: matTreeNodeDefWhen'\r\n  ],\r\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\r\n})\r\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\r\n  @Input('matTreeNode') data: T;\r\n}\r\n\r\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n */\r\n@Directive({\r\n  selector: 'mat-nested-tree-node',\r\n  exportAs: 'matNestedTreeNode',\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.role]': 'role',\r\n    'class': 'mat-nested-tree-node',\r\n  },\r\n  inputs: ['disabled', 'tabIndex'],\r\n  providers: [\r\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\r\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\r\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\r\n  ]\r\n})\r\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\r\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\r\n  @Input('matNestedTreeNode') node: T;\r\n\r\n  /** The children node placeholder. */\r\n  @ContentChildren(MatTreeNodeOutlet, {\r\n    // We need to use `descendants: true`, because Ivy will no longer match\r\n    // indirect descendants if it's left as false.\r\n    descendants: true\r\n  })\r\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\r\n              protected _tree: CdkTree<T>,\r\n              protected _differs: IterableDiffers,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n    super(_elementRef, _tree, _differs);\r\n\r\n    this.tabIndex = Number(tabIndex) || 0;\r\n  }\r\n\r\n  // This is a workaround for https://github.com/angular/angular/issues/23091\r\n  // In aot mode, the lifecycle hooks from parent class are not called.\r\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\r\n  ngAfterContentInit() {\r\n    super.ngAfterContentInit();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\r\nimport {\r\n  Directive,\r\n  Inject,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\n\r\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodeOutlet]'\r\n})\r\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\r\n  constructor(\r\n      public viewContainer: ViewContainerRef,\r\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\r\n}\r\n"],"names":[],"mappings":"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"}