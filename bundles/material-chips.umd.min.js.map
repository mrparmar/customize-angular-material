{"version":3,"file":"material-chips.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ContentChild,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanColorCtor,\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  MAT_RIPPLE_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  RippleConfig,\r\n  RippleGlobalOptions,\r\n  RippleRenderer,\r\n  RippleTarget,\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {take} from 'rxjs/operators';\r\n\r\n\r\n/** Represents an event fired on an individual `mat-chip`. */\r\nexport interface MatChipEvent {\r\n  /** The chip the event was fired on. */\r\n  chip: MatChip;\r\n}\r\n\r\n/** Event object emitted by MatChip when selected or deselected. */\r\nexport class MatChipSelectionChange {\r\n  constructor(\r\n    /** Reference to the chip that emitted the event. */\r\n    public source: MatChip,\r\n    /** Whether the chip that emitted the event is selected. */\r\n    public selected: boolean,\r\n    /** Whether the selection change was a result of a user interaction. */\r\n    public isUserInput = false) { }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatChip.\r\n/** @docs-private */\r\nexport class MatChipBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n\r\nexport const _MatChipMixinBase:\r\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\r\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\r\n\r\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\r\n\r\n/**\r\n * Dummy directive to add CSS class to chip avatar.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-chip-avatar, [matChipAvatar]',\r\n  host: {'class': 'mat-chip-avatar'}\r\n})\r\nexport class MatChipAvatar {}\r\n\r\n/**\r\n * Dummy directive to add CSS class to chip trailing icon.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\r\n  host: {'class': 'mat-chip-trailing-icon'}\r\n})\r\nexport class MatChipTrailingIcon {}\r\n\r\n/**\r\n * Material design styled Chip component. Used inside the MatChipList component.\r\n */\r\n@Directive({\r\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\r\n  inputs: ['color', 'disabled', 'disableRipple'],\r\n  exportAs: 'matChip',\r\n  host: {\r\n    'class': 'mat-chip',\r\n    '[attr.tabindex]': 'disabled ? null : -1',\r\n    'role': 'option',\r\n    '[class.mat-chip-selected]': 'selected',\r\n    '[class.mat-chip-with-avatar]': 'avatar',\r\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\r\n    '[class.mat-chip-disabled]': 'disabled',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-selected]': 'ariaSelected',\r\n    '(click)': '_handleClick($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n  },\r\n})\r\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\r\n    CanDisable, CanDisableRipple, RippleTarget {\r\n\r\n  /** Reference to the RippleRenderer for the chip. */\r\n  private _chipRipple: RippleRenderer;\r\n\r\n  /**\r\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\r\n   * is set to the global ripple options since we don't have any configurable options for\r\n   * the chip ripples.\r\n   * @docs-private\r\n   */\r\n  rippleConfig: RippleConfig & RippleGlobalOptions;\r\n\r\n  /**\r\n   * Whether ripples are disabled on interaction\r\n   * @docs-private\r\n   */\r\n  get rippleDisabled(): boolean {\r\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\r\n  }\r\n\r\n  /** Whether the chip has focus. */\r\n  _hasFocus: boolean = false;\r\n\r\n  /** Whether the chip list is selectable */\r\n  chipListSelectable: boolean = true;\r\n\r\n  /** Whether the chip list is in multi-selection mode. */\r\n  _chipListMultiple: boolean = false;\r\n\r\n  /** The chip avatar */\r\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\r\n\r\n  /** The chip's trailing icon. */\r\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\r\n\r\n  /** The chip's remove toggler. */\r\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\r\n\r\n  /** Whether the chip is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    const coercedValue = coerceBooleanProperty(value);\r\n\r\n    if (coercedValue !== this._selected) {\r\n      this._selected = coercedValue;\r\n      this._dispatchSelectionChange();\r\n    }\r\n  }\r\n  protected _selected: boolean = false;\r\n\r\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value != undefined\r\n      ? this._value\r\n      : this._elementRef.nativeElement.textContent;\r\n  }\r\n  set value(value: any) { this._value = value; }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Whether or not the chip is selectable. When a chip is not selectable,\r\n   * changes to its selected state are always ignored. By default a chip is\r\n   * selectable, and it becomes non-selectable if its parent chip list is\r\n   * not selectable.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\r\n  protected _selectable: boolean = true;\r\n\r\n  /**\r\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\r\n   */\r\n  @Input()\r\n  get removable(): boolean { return this._removable; }\r\n  set removable(value: boolean) {\r\n    this._removable = coerceBooleanProperty(value);\r\n  }\r\n  protected _removable: boolean = true;\r\n\r\n  /** Emits when the chip is focused. */\r\n  readonly _onFocus = new Subject<MatChipEvent>();\r\n\r\n  /** Emits when the chip is blured. */\r\n  readonly _onBlur = new Subject<MatChipEvent>();\r\n\r\n  /** Emitted when the chip is selected or deselected. */\r\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\r\n      new EventEmitter<MatChipSelectionChange>();\r\n\r\n  /** Emitted when the chip is destroyed. */\r\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /** Emitted when a chip is to be removed. */\r\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /** The ARIA selected applied to the chip. */\r\n  get ariaSelected(): string | null {\r\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\r\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\r\n    return this.selectable && (this._chipListMultiple || this.selected) ?\r\n        this.selected.toString() : null;\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef,\r\n              private _ngZone: NgZone,\r\n              platform: Platform,\r\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\r\n              globalRippleOptions: RippleGlobalOptions | null) {\r\n    super(_elementRef);\r\n\r\n    this._addHostClassName();\r\n\r\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\r\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\r\n    this.rippleConfig = globalRippleOptions || {};\r\n  }\r\n\r\n  _addHostClassName() {\r\n    // Add class for the different chips\r\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\r\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\r\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\r\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\r\n        return;\r\n      }\r\n    }\r\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.emit({chip: this});\r\n    this._chipRipple._removeTriggerEvents();\r\n  }\r\n\r\n  /** Selects the chip. */\r\n  select(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._dispatchSelectionChange();\r\n    }\r\n  }\r\n\r\n  /** Deselects the chip. */\r\n  deselect(): void {\r\n    if (this._selected) {\r\n      this._selected = false;\r\n      this._dispatchSelectionChange();\r\n    }\r\n  }\r\n\r\n  /** Select this chip and emit selected event */\r\n  selectViaInteraction(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._dispatchSelectionChange(true);\r\n    }\r\n  }\r\n\r\n  /** Toggles the current selected state of this chip. */\r\n  toggleSelected(isUserInput: boolean = false): boolean {\r\n    this._selected = !this.selected;\r\n    this._dispatchSelectionChange(isUserInput);\r\n    return this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the chip. */\r\n  focus(): void {\r\n    if (!this._hasFocus) {\r\n      this._elementRef.nativeElement.focus();\r\n      this._onFocus.next({chip: this});\r\n    }\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  /**\r\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n   * BACKSPACE keys are pressed.\r\n   *\r\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n   */\r\n  remove(): void {\r\n    if (this.removable) {\r\n      this.removed.emit({chip: this});\r\n    }\r\n  }\r\n\r\n  /** Handles click events on the chip. */\r\n  _handleClick(event: Event) {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n    } else {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /** Handle custom key presses. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        // If we are removable, remove the focused chip\r\n        this.remove();\r\n        // Always prevent so page navigation does not occur\r\n        event.preventDefault();\r\n        break;\r\n      case SPACE:\r\n        // If we are selectable, toggle the focused chip\r\n        if (this.selectable) {\r\n          this.toggleSelected(true);\r\n        }\r\n\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\r\n\r\n  _blur(): void {\r\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\r\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\r\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\r\n    // as not focused until the next time the zone stabilizes.\r\n    this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        this._ngZone.run(() => {\r\n          this._hasFocus = false;\r\n          this._onBlur.next({chip: this});\r\n        });\r\n      });\r\n  }\r\n\r\n  private _dispatchSelectionChange(isUserInput = false) {\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput,\r\n      selected: this._selected\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\r\n * available at https://material.io/icons/#ic_cancel.\r\n *\r\n * Example:\r\n *\r\n *     `<mat-chip>\r\n *       <mat-icon matChipRemove>cancel</mat-icon>\r\n *     </mat-chip>`\r\n *\r\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\r\n * styles to properly center the icon within the chip.\r\n */\r\n@Directive({\r\n  selector: '[matChipRemove]',\r\n  host: {\r\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\r\n    '(click)': '_handleClick($event)',\r\n  }\r\n})\r\nexport class MatChipRemove {\r\n  constructor(protected _parentChip: MatChip) {}\r\n\r\n  /** Calls the parent chip's public `remove()` method if applicable. */\r\n  _handleClick(event: Event): void {\r\n    if (this._parentChip.removable) {\r\n      this._parentChip.remove();\r\n    }\r\n\r\n    // We need to stop event propagation because otherwise the event will bubble up to the\r\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\r\n    // reset the focused chip that has been focused after chip removal. Usually the parent\r\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\r\n    // that the chip is being removed before the event bubbles up.\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/** Default options, for the chips module, that can be overridden. */\r\nexport interface MatChipsDefaultOptions {\r\n  /** The list of key codes that will trigger a chipEnd event. */\r\n  separatorKeyCodes: number[] | Set<number>;\r\n}\r\n\r\n/** Injection token to be used to override the default options for the chips module. */\r\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {\r\n  CanUpdateErrorState,\r\n  CanUpdateErrorStateCtor,\r\n  ErrorStateMatcher,\r\n  mixinErrorState,\r\n} from '@angular/material/core';\r\nimport {MatFormFieldControl} from '@angular/material/form-field';\r\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\r\nimport {startWith, takeUntil} from 'rxjs/operators';\r\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\r\nimport {MatChipTextControl} from './chip-text-control';\r\n\r\n\r\n// Boilerplate for applying mixins to MatChipList.\r\n/** @docs-private */\r\nexport class MatChipListBase {\r\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              /** @docs-private */\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\r\n    mixinErrorState(MatChipListBase);\r\n\r\n\r\n// Increasing integer for generating unique ids for chip-list components.\r\nlet nextUniqueId = 0;\r\n\r\n/** Change event object that is emitted when the chip list value has changed. */\r\nexport class MatChipListChange {\r\n  constructor(\r\n    /** Chip list that emitted the event. */\r\n    public source: MatChipList,\r\n    /** Value of the chip list when the event was emitted. */\r\n    public value: any) { }\r\n}\r\n\r\n\r\n/**\r\n * A material design chips component (named ChipList for its similarity to the List component).\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-chip-list',\r\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\r\n  exportAs: 'matChipList',\r\n  host: {\r\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.role]': 'role',\r\n    '[class.mat-chip-list-disabled]': 'disabled',\r\n    '[class.mat-chip-list-invalid]': 'errorState',\r\n    '[class.mat-chip-list-required]': 'required',\r\n    '[attr.aria-orientation]': 'ariaOrientation',\r\n    'class': 'mat-chip-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[id]': '_uid',\r\n  },\r\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\r\n  styleUrls: ['chips.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\r\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  readonly controlType: string = 'mat-chip-list';\r\n\r\n  /**\r\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\r\n   * query list notifies about the update. This is necessary because we cannot determine an\r\n   * appropriate chip that should receive focus until the array of chips updated completely.\r\n   */\r\n  private _lastDestroyedChipIndex: number | null = null;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Subscription to focus changes in the chips. */\r\n  private _chipFocusSubscription: Subscription | null;\r\n\r\n  /** Subscription to blur changes in the chips. */\r\n  private _chipBlurSubscription: Subscription | null;\r\n\r\n  /** Subscription to selection changes in chips. */\r\n  private _chipSelectionSubscription: Subscription | null;\r\n\r\n  /** Subscription to remove changes in chips. */\r\n  private _chipRemoveSubscription: Subscription | null;\r\n\r\n  /** The chip input to add more chips */\r\n  protected _chipInput: MatChipTextControl;\r\n\r\n  /** Uid of the chip list */\r\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\r\n\r\n  /** The aria-describedby attribute on the chip list for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** Tab index for the chip list. */\r\n  _tabIndex = 0;\r\n\r\n  /**\r\n   * User defined tab index.\r\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\r\n   */\r\n  _userTabIndex: number | null = null;\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatChip>;\r\n\r\n  /** Function when touched */\r\n  _onTouched = () => {};\r\n\r\n  /** Function when changed */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  _selectionModel: SelectionModel<MatChip>;\r\n\r\n  /** The array of selected chips inside chip list. */\r\n  get selected(): MatChip[] | MatChip {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\r\n\r\n  /** The ARIA role applied to the chip list. */\r\n  get role(): string | null { return this.empty ? null : 'listbox'; }\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /** Whether the user should be allowed to select multiple chips. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n    this._syncChipsState();\r\n  }\r\n  private _multiple: boolean = false;\r\n\r\n  /**\r\n   * A function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  @Input()\r\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\r\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    this.writeValue(value);\r\n    this._value = value;\r\n  }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get id(): string {\r\n    return this._chipInput ? this._chipInput.id : this._uid;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n  protected _required: boolean = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get placeholder(): string {\r\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\r\n  }\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\r\n  protected _placeholder: string;\r\n\r\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\r\n  get focused(): boolean {\r\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get empty(): boolean {\r\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._syncChipsState();\r\n  }\r\n  protected _disabled: boolean = false;\r\n\r\n  /** Orientation of the chip list. */\r\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  /**\r\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\r\n   * the selected states for all the chips inside the chip list are always ignored.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable; }\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n\r\n    if (this.chips) {\r\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\r\n    }\r\n  }\r\n  protected _selectable: boolean = true;\r\n\r\n  @Input()\r\n  set tabIndex(value: number) {\r\n    this._userTabIndex = value;\r\n    this._tabIndex = value;\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' selection change events. */\r\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\r\n    return merge(...this.chips.map(chip => chip.selectionChange));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' focus change events. */\r\n  get chipFocusChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onFocus));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' blur change events. */\r\n  get chipBlurChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onBlur));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' remove change events. */\r\n  get chipRemoveChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip.destroyed));\r\n  }\r\n\r\n  /** Event emitted when the selected chip list value has been changed by the user. */\r\n  @Output() readonly change: EventEmitter<MatChipListChange> =\r\n      new EventEmitter<MatChipListChange>();\r\n\r\n  /**\r\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /** The chip components contained within this chip list. */\r\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() _parentForm: NgForm,\r\n              @Optional() _parentFormGroup: FormGroupDirective,\r\n              _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              /** @docs-private */\r\n              @Optional() @Self() public ngControl: NgControl) {\r\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\r\n      .withWrap()\r\n      .withVerticalOrientation()\r\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\r\n\r\n    if (this._dir) {\r\n      this._dir.change\r\n        .pipe(takeUntil(this._destroyed))\r\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\r\n    }\r\n\r\n    // Prevents the chip list from capturing focus and redirecting\r\n    // it back to the first chip when the user tabs out.\r\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n      this._tabIndex = -1;\r\n      setTimeout(() => {\r\n        this._tabIndex = this._userTabIndex || 0;\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    });\r\n\r\n    // When the list changes, re-subscribe\r\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\r\n      if (this.disabled) {\r\n        // Since this happens after the content has been\r\n        // checked, we need to defer it to the next tick.\r\n        Promise.resolve().then(() => {\r\n          this._syncChipsState();\r\n        });\r\n      }\r\n\r\n      this._resetChips();\r\n\r\n      // Reset chips selected/deselected status\r\n      this._initializeSelection();\r\n\r\n      // Check to see if we need to update our tab index\r\n      this._updateTabIndex();\r\n\r\n      // Check to see if we have a destroyed chip and need to refocus\r\n      this._updateFocusForDestroyedChips();\r\n\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n    this.stateChanges.complete();\r\n\r\n    this._dropSubscriptions();\r\n  }\r\n\r\n\r\n  /** Associates an HTML input element with this chip list. */\r\n  registerInput(inputElement: MatChipTextControl): void {\r\n    this._chipInput = inputElement;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    if (this.chips) {\r\n      this._setSelectionByValue(value, false);\r\n    }\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick(event: MouseEvent) {\r\n    if (!this._originatesFromChip(event)) {\r\n      this.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\r\n   * are no eligible chips.\r\n   */\r\n  focus(): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\r\n    // Focus on first element if there's no chipInput inside chip-list\r\n    if (this._chipInput && this._chipInput.focused) {\r\n      // do nothing\r\n    } else if (this.chips.length > 0) {\r\n      this._keyManager.setFirstItemActive();\r\n      this.stateChanges.next();\r\n    } else {\r\n      this._focusInput();\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Attempt to focus an input if we have one. */\r\n  _focusInput() {\r\n    if (this._chipInput) {\r\n      this._chipInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pass events to the keyboard manager. Available here for tests.\r\n   */\r\n  _keydown(event: KeyboardEvent) {\r\n    const target = event.target as HTMLElement;\r\n\r\n    // If they are on an empty input and hit backspace, focus the last chip\r\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\r\n      this._keyManager.setLastItemActive();\r\n      event.preventDefault();\r\n    } else if (target && target.classList.contains('mat-chip')) {\r\n      if (event.keyCode === HOME) {\r\n        this._keyManager.setFirstItemActive();\r\n        event.preventDefault();\r\n      } else if (event.keyCode === END) {\r\n        this._keyManager.setLastItemActive();\r\n        event.preventDefault();\r\n      } else {\r\n        this._keyManager.onKeydown(event);\r\n      }\r\n\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Check the tab index as you should not be allowed to focus an empty list.\r\n   */\r\n  protected _updateTabIndex(): void {\r\n    // If we have 0 chips, we should not allow keyboard focus\r\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\r\n  }\r\n\r\n  /**\r\n   * If the amount of chips changed, we need to update the\r\n   * key manager state and focus the next closest chip.\r\n   */\r\n  protected _updateFocusForDestroyedChips() {\r\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\r\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\r\n      this._keyManager.setActiveItem(newChipIndex);\r\n    }\r\n\r\n    this._lastDestroyedChipIndex = null;\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   *\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of chips.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.chips.length;\r\n  }\r\n\r\n  private _isInputEmpty(element: HTMLElement): boolean {\r\n    if (element && element.nodeName.toLowerCase() === 'input') {\r\n      let input = element as HTMLInputElement;\r\n      return !input.value;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\r\n    this._clearSelection();\r\n    this.chips.forEach(chip => chip.deselect());\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const correspondingChip = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what chip the user interacted with last.\r\n      if (correspondingChip) {\r\n        if (isUserInput) {\r\n          this._keyManager.setActiveItem(correspondingChip);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and selects the chip based on its value.\r\n   * @returns Chip that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\r\n\r\n    const correspondingChip = this.chips.find(chip => {\r\n      return chip.value != null && this._compareWith(chip.value,  value);\r\n    });\r\n\r\n    if (correspondingChip) {\r\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n      this._selectionModel.select(correspondingChip);\r\n    }\r\n\r\n    return correspondingChip;\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      if (this.ngControl || this._value) {\r\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\r\n        this.stateChanges.next();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deselects every chip in the list.\r\n   * @param skip Chip that should not be deselected.\r\n   */\r\n  private _clearSelection(skip?: MatChip): void {\r\n    this._selectionModel.clear();\r\n    this.chips.forEach(chip => {\r\n      if (chip !== skip) {\r\n        chip.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Sorts the model values, ensuring that they keep the same\r\n   * order that they have in the panel.\r\n   */\r\n  private _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.chips.forEach(chip => {\r\n        if (chip.selected) {\r\n          this._selectionModel.select(chip);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Emits change event to set the model value. */\r\n  private _propagateChanges(fallbackValue?: any): void {\r\n    let valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(chip => chip.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n    this._value = valueToEmit;\r\n    this.change.emit(new MatChipListChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\r\n  _blur() {\r\n    if (!this._hasFocusedChip()) {\r\n      this._keyManager.setActiveItem(-1);\r\n    }\r\n\r\n    if (!this.disabled) {\r\n      if (this._chipInput) {\r\n        // If there's a chip input, we should check whether the focus moved to chip input.\r\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\r\n        // to chip input, do nothing.\r\n        // Timeout is needed to wait for the focus() event trigger on chip input.\r\n        setTimeout(() => {\r\n          if (!this.focused) {\r\n            this._markAsTouched();\r\n          }\r\n        });\r\n      } else {\r\n        // If there's no chip input, then mark the field as touched.\r\n        this._markAsTouched();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Mark the field as touched */\r\n  _markAsTouched() {\r\n    this._onTouched();\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _resetChips() {\r\n    this._dropSubscriptions();\r\n    this._listenToChipsFocus();\r\n    this._listenToChipsSelection();\r\n    this._listenToChipsRemoved();\r\n  }\r\n\r\n  private _dropSubscriptions() {\r\n    if (this._chipFocusSubscription) {\r\n      this._chipFocusSubscription.unsubscribe();\r\n      this._chipFocusSubscription = null;\r\n    }\r\n\r\n    if (this._chipBlurSubscription) {\r\n      this._chipBlurSubscription.unsubscribe();\r\n      this._chipBlurSubscription = null;\r\n    }\r\n\r\n    if (this._chipSelectionSubscription) {\r\n      this._chipSelectionSubscription.unsubscribe();\r\n      this._chipSelectionSubscription = null;\r\n    }\r\n\r\n    if (this._chipRemoveSubscription) {\r\n      this._chipRemoveSubscription.unsubscribe();\r\n      this._chipRemoveSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsSelection(): void {\r\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\r\n      event.source.selected\r\n        ? this._selectionModel.select(event.source)\r\n        : this._selectionModel.deselect(event.source);\r\n\r\n      // For single selection chip list, make sure the deselected value is unselected.\r\n      if (!this.multiple) {\r\n        this.chips.forEach(chip => {\r\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\r\n            chip.deselect();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (event.isUserInput) {\r\n        this._propagateChanges();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsFocus(): void {\r\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\r\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        this._keyManager.updateActiveItemIndex(chipIndex);\r\n      }\r\n      this.stateChanges.next();\r\n    });\r\n\r\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\r\n      this._blur();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  private _listenToChipsRemoved(): void {\r\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\r\n      const chip = event.chip;\r\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\r\n\r\n      // In case the chip that will be removed is currently focused, we temporarily store\r\n      // the index in order to be able to determine an appropriate sibling chip that will\r\n      // receive focus.\r\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\r\n        this._lastDestroyedChipIndex = chipIndex;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Checks whether an event comes from inside a chip element. */\r\n  private _originatesFromChip(event: Event): boolean {\r\n    let currentElement = event.target as HTMLElement | null;\r\n\r\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\r\n      if (currentElement.classList.contains('mat-chip')) {\r\n        return true;\r\n      }\r\n\r\n      currentElement = currentElement.parentElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Checks whether any of the chips is focused. */\r\n  private _hasFocusedChip() {\r\n    return this.chips.some(chip => chip._hasFocus);\r\n  }\r\n\r\n  /** Syncs the list's state with the individual chips. */\r\n  private _syncChipsState() {\r\n    if (this.chips) {\r\n      this.chips.forEach(chip => {\r\n        chip.disabled = this._disabled;\r\n        chip._chipListMultiple = this.multiple;\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\r\nimport {hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\r\nimport {MatChipList} from './chip-list';\r\nimport {MatChipTextControl} from './chip-text-control';\r\n\r\n\r\n/** Represents an input event on a `matChipInput`. */\r\nexport interface MatChipInputEvent {\r\n  /** The native `<input>` element that the event is being fired for. */\r\n  input: HTMLInputElement;\r\n\r\n  /** The value of the input. */\r\n  value: string;\r\n}\r\n\r\n// Increasing integer for generating unique ids.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\r\n * May be placed inside or outside of an `<mat-chip-list>`.\r\n */\r\n@Directive({\r\n  selector: 'input[matChipInputFor]',\r\n  exportAs: 'matChipInput, matChipInputFor',\r\n  host: {\r\n    'class': 'mat-chip-input mat-input-element',\r\n    '(keydown)': '_keydown($event)',\r\n    '(blur)': '_blur()',\r\n    '(focus)': '_focus()',\r\n    '(input)': '_onInput()',\r\n    '[id]': 'id',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.placeholder]': 'placeholder || null',\r\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\r\n  }\r\n})\r\nexport class MatChipInput implements MatChipTextControl, OnChanges {\r\n  /** Whether the control is focused. */\r\n  focused: boolean = false;\r\n  _chipList: MatChipList;\r\n\r\n  /** Register input for chip list */\r\n  @Input('matChipInputFor')\r\n  set chipList(value: MatChipList) {\r\n    if (value) {\r\n      this._chipList = value;\r\n      this._chipList.registerInput(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\r\n   */\r\n  @Input('matChipInputAddOnBlur')\r\n  get addOnBlur(): boolean { return this._addOnBlur; }\r\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\r\n  _addOnBlur: boolean = false;\r\n\r\n  /**\r\n   * The list of key codes that will trigger a chipEnd event.\r\n   *\r\n   * Defaults to `[ENTER]`.\r\n   */\r\n  @Input('matChipInputSeparatorKeyCodes')\r\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\r\n\r\n  /** Emitted when a chip is to be added. */\r\n  @Output('matChipInputTokenEnd')\r\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\r\n\r\n  /** The input's placeholder text. */\r\n  @Input() placeholder: string = '';\r\n\r\n  /** Unique id for the input. */\r\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\r\n\r\n  /** Whether the input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Whether the input is empty. */\r\n  get empty(): boolean { return !this._inputElement.value; }\r\n\r\n  /** The native input element to which this directive is attached. */\r\n  protected _inputElement: HTMLInputElement;\r\n\r\n  constructor(\r\n    protected _elementRef: ElementRef<HTMLInputElement>,\r\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\r\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Utility method to make host definition/tests more clear. */\r\n  _keydown(event?: KeyboardEvent) {\r\n    this._emitChipEnd(event);\r\n  }\r\n\r\n  /** Checks to see if the blur should emit the (chipEnd) event. */\r\n  _blur() {\r\n    if (this.addOnBlur) {\r\n      this._emitChipEnd();\r\n    }\r\n    this.focused = false;\r\n    // Blur the chip list if it is not focused\r\n    if (!this._chipList.focused) {\r\n      this._chipList._blur();\r\n    }\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  _focus() {\r\n    this.focused = true;\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\r\n  _emitChipEnd(event?: KeyboardEvent) {\r\n    if (!this._inputElement.value && !!event) {\r\n      this._chipList._keydown(event);\r\n    }\r\n    if (!event || this._isSeparatorKey(event)) {\r\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\r\n\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  _onInput() {\r\n    // Let chip list know whenever the value changes.\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(): void {\r\n    this._inputElement.focus();\r\n  }\r\n\r\n  /** Checks whether a keycode is one of the configured separators. */\r\n  private _isSeparatorKey(event: KeyboardEvent) {\r\n    if (hasModifierKey(event)) {\r\n      return false;\r\n    }\r\n\r\n    const separators = this.separatorKeyCodes;\r\n    const keyCode = event.keyCode;\r\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ENTER} from '@angular/cdk/keycodes';\r\nimport {NgModule} from '@angular/core';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\r\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\r\nimport {MatChipInput} from './chip-input';\r\nimport {MatChipList} from './chip-list';\r\n\r\nconst CHIP_DECLARATIONS = [\r\n  MatChipList,\r\n  MatChip,\r\n  MatChipInput,\r\n  MatChipRemove,\r\n  MatChipAvatar,\r\n  MatChipTrailingIcon,\r\n];\r\n\r\n@NgModule({\r\n  exports: CHIP_DECLARATIONS,\r\n  declarations: CHIP_DECLARATIONS,\r\n  providers: [\r\n    ErrorStateMatcher,\r\n    {\r\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\r\n      useValue: {\r\n        separatorKeyCodes: [ENTER]\r\n      } as MatChipsDefaultOptions\r\n    }\r\n  ]\r\n})\r\nexport class MatChipsModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatChipSelectionChange","source","selected","isUserInput","MatChipBase","_elementRef","_MatChipMixinBase","mixinColor","mixinDisableRipple","mixinDisabled","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","type","Directive","args","selector","host","class","MatChipTrailingIcon","MatChip","_super","_ngZone","platform","globalRippleOptions","_this","call","_hasFocus","chipListSelectable","_chipListMultiple","_selected","_selectable","_removable","_onFocus","Subject","_onBlur","selectionChange","EventEmitter","destroyed","removed","_addHostClassName","_chipRipple","RippleRenderer","setupTriggerEvents","nativeElement","rippleConfig","tslib_1.__extends","defineProperty","disabled","disableRipple","value","coercedValue","coerceBooleanProperty","_dispatchSelectionChange","undefined","_value","textContent","selectable","toString","_i","CHIP_ATTRIBUTE_NAMES_1","length","attr","hasAttribute","tagName","toLowerCase","classList","add","ngOnDestroy","emit","chip","_removeTriggerEvents","select","deselect","selectViaInteraction","toggleSelected","focus","next","remove","removable","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","DELETE","BACKSPACE","SPACE","_blur","onStable","asObservable","pipe","take","subscribe","run","inputs","exportAs","[attr.tabindex]","role","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","[attr.disabled]","[attr.aria-disabled]","[attr.aria-selected]","(click)","(keydown)","(focus)","(blur)","ElementRef","NgZone","Platform","decorators","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","avatar","ContentChild","trailingIcon","removeIcon","forwardRef","MatChipRemove","Input","Output","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","InjectionToken","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","mixinErrorState","nextUniqueId","MatChipListChange","MatChipList","_changeDetectorRef","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","_disabled","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","empty","_syncChipsState","fn","_initializeSelection","writeValue","_chipInput","id","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","forEach","merge","apply","map","ngAfterContentInit","_keyManager","FocusKeyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","takeUntil","dir","tabOut","setTimeout","markForCheck","changes","startWith","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","SelectionModel","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","setFirstItemActive","_focusInput","_keydown","target","_isInputEmpty","setLastItemActive","contains","HOME","END","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","element","nodeName","_clearSelection","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","chipFocusChanges","chipIndex","toArray","indexOf","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","Component","template","[attr.aria-describedby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-multiselectable]","[attr.role]","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","[attr.aria-orientation]","[id]","providers","provide","MatFormFieldControl","useExisting","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","Directionality","NgForm","FormGroupDirective","ErrorStateMatcher","NgControl","Self","propDecorators","compareWith","required","tabIndex","ContentChildren","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipList","ngOnChanges","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","input","_onInput","hasModifierKey","separators","has","(input)","[attr.placeholder]","chipList","CHIP_DECLARATIONS","ɵ0","ENTER","MatChipsModule","NgModule","exports","declarations","useValue"],"mappings":"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"}