{"version":3,"file":"material-dialog.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {matDialogAnimations} from './dialog-animations';\r\nimport {\r\n  BasePortalOutlet,\r\n  ComponentPortal,\r\n  CdkPortalOutlet,\r\n  TemplatePortal\r\n} from '@angular/cdk/portal';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {MatDialogConfig} from './dialog-config';\r\n\r\n\r\n/**\r\n * Throws an exception for the case when a ComponentPortal is\r\n * attached to a DomPortalOutlet without an origin.\r\n * @docs-private\r\n */\r\nexport function throwMatDialogContentAlreadyAttachedError() {\r\n  throw Error('Attempting to attach dialog content after content is already attached');\r\n}\r\n\r\n/**\r\n * Internal component that wraps user-provided dialog content.\r\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-dialog-container',\r\n  templateUrl: 'dialog-container.html',\r\n  styleUrls: ['dialog.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  animations: [matDialogAnimations.dialogContainer],\r\n  host: {\r\n    'class': 'mat-dialog-container',\r\n    'tabindex': '-1',\r\n    'aria-modal': 'true',\r\n    '[attr.id]': '_id',\r\n    '[attr.role]': '_config.role',\r\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\r\n    '[attr.aria-label]': '_config.ariaLabel',\r\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\r\n    '[@dialogContainer]': '_state',\r\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\r\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\r\n  },\r\n})\r\nexport class MatDialogContainer extends BasePortalOutlet {\r\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\r\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\r\n\r\n  /** The class that traps and manages focus within the dialog. */\r\n  private _focusTrap: FocusTrap;\r\n\r\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\r\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\r\n\r\n  /** State of the dialog animation. */\r\n  _state: 'void' | 'enter' | 'exit' = 'enter';\r\n\r\n  /** Emits when an animation state changes. */\r\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\r\n\r\n  /** ID of the element that should be considered as the dialog's label. */\r\n  _ariaLabelledBy: string | null = null;\r\n\r\n  /** ID for the container DOM element. */\r\n  _id: string;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _focusTrapFactory: FocusTrapFactory,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(DOCUMENT) private _document: any,\r\n    /** The dialog configuration. */\r\n    public _config: MatDialogConfig) {\r\n\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Attach a ComponentPortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throwMatDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalOutlet.attachComponentPortal(portal);\r\n  }\r\n\r\n  /**\r\n   * Attach a TemplatePortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throwMatDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalOutlet.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Moves the focus inside the focus trap. */\r\n  private _trapFocus() {\r\n    if (!this._focusTrap) {\r\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    }\r\n\r\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    if (this._config.autoFocus) {\r\n      this._focusTrap.focusInitialElementWhenReady();\r\n    }\r\n  }\r\n\r\n  /** Restores focus to the element that was focused before the dialog opened. */\r\n  private _restoreFocus() {\r\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\r\n\r\n  /** Saves a reference to the element that was focused before the dialog was opened. */\r\n  private _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\r\n\r\n      // Note that there is no focus method when rendering on the server.\r\n      if (this._elementRef.nativeElement.focus) {\r\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\r\n        // opening multiple dialogs at the same time. Needs to be async, because the element\r\n        // may not be focusable immediately.\r\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Callback, invoked whenever an animation on the host completes. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._trapFocus();\r\n    } else if (event.toState === 'exit') {\r\n      this._restoreFocus();\r\n    }\r\n\r\n    this._animationStateChanged.emit(event);\r\n  }\r\n\r\n  /** Callback, invoked when an animation on the host starts. */\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    this._animationStateChanged.emit(event);\r\n  }\r\n\r\n  /** Starts the dialog exit animation. */\r\n  _startExitAnimation(): void {\r\n    this._state = 'exit';\r\n\r\n    // Mark the container for check so it can react if the\r\n    // view container is using OnPush change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayContainer,\r\n  OverlayRef,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {Location} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\r\nimport {startWith} from 'rxjs/operators';\r\nimport {MatDialogConfig} from './dialog-config';\r\nimport {MatDialogContainer} from './dialog-container';\r\nimport {MatDialogRef} from './dialog-ref';\r\n\r\n\r\n/** Injection token that can be used to access the data that was passed in to a dialog. */\r\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\r\n\r\n/** Injection token that can be used to specify default dialog options. */\r\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\r\n\r\n/** Injection token that determines the scroll handling while the dialog is open. */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n  () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n\r\n/**\r\n * Service to open Material Design modal dialogs.\r\n */\r\n@Injectable()\r\nexport class MatDialog implements OnDestroy {\r\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\r\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\r\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\r\n  private _ariaHiddenElements = new Map<Element, string|null>();\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** Keeps track of the currently-open dialogs. */\r\n  get openDialogs(): MatDialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n  }\r\n\r\n  /** Stream that emits when a dialog has been opened. */\r\n  get afterOpened(): Subject<MatDialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\r\n  }\r\n\r\n  /**\r\n   * Stream that emits when a dialog has been opened.\r\n   * @deprecated Use `afterOpened` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  get afterOpen(): Subject<MatDialogRef<any>> {\r\n    return this.afterOpened;\r\n  }\r\n\r\n  get _afterAllClosed(): Subject<void> {\r\n    const parent = this._parentDialog;\r\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\r\n  }\r\n\r\n  /**\r\n   * Stream that emits when all open dialog have finished closing.\r\n   * Will emit on subscribe if there are no open dialogs to begin with.\r\n   */\r\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\r\n      this._afterAllClosed :\r\n      this._afterAllClosed.pipe(startWith(undefined)));\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _injector: Injector,\r\n      @Optional() private _location: Location,\r\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\r\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\r\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\r\n      private _overlayContainer: OverlayContainer) {\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  /**\r\n   * Opens a modal dialog containing the given component.\r\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\r\n   *     or a TemplateRef to instantiate as the dialog content.\r\n   * @param config Extra configuration options.\r\n   * @returns Reference to the newly-opened dialog.\r\n   */\r\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\r\n\r\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\r\n\r\n    if (config.id && this.getDialogById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\r\n                                                      dialogContainer,\r\n                                                      overlayRef,\r\n                                                      config);\r\n\r\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\r\n    if (!this.openDialogs.length) {\r\n      this._hideNonDialogContentFromAssistiveTechnology();\r\n    }\r\n\r\n    this.openDialogs.push(dialogRef);\r\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\r\n    this.afterOpened.next(dialogRef);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Closes all of the currently-open dialogs.\r\n   */\r\n  closeAll(): void {\r\n    this._closeDialogs(this.openDialogs);\r\n  }\r\n\r\n  /**\r\n   * Finds an open dialog by its id.\r\n   * @param id ID to use when looking up the dialog.\r\n   */\r\n  getDialogById(id: string): MatDialogRef<any> | undefined {\r\n    return this.openDialogs.find(dialog => dialog.id === id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Only close the dialogs at this level on destroy\r\n    // since the parent service may still be active.\r\n    this._closeDialogs(this._openDialogsAtThisLevel);\r\n    this._afterAllClosedAtThisLevel.complete();\r\n    this._afterOpenedAtThisLevel.complete();\r\n  }\r\n\r\n  /**\r\n   * Creates the overlay into which the dialog will be loaded.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the OverlayRef for the created overlay.\r\n   */\r\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\r\n    const overlayConfig = this._getOverlayConfig(config);\r\n    return this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Creates an overlay config from a dialog config.\r\n   * @param dialogConfig The dialog configuration.\r\n   * @returns The overlay configuration.\r\n   */\r\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\r\n    const state = new OverlayConfig({\r\n      positionStrategy: this._overlay.position().global(),\r\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\r\n      panelClass: dialogConfig.panelClass,\r\n      hasBackdrop: dialogConfig.hasBackdrop,\r\n      direction: dialogConfig.direction,\r\n      minWidth: dialogConfig.minWidth,\r\n      minHeight: dialogConfig.minHeight,\r\n      maxWidth: dialogConfig.maxWidth,\r\n      maxHeight: dialogConfig.maxHeight,\r\n      disposeOnNavigation: dialogConfig.closeOnNavigation\r\n    });\r\n\r\n    if (dialogConfig.backdropClass) {\r\n      state.backdropClass = dialogConfig.backdropClass;\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n   * @param overlay Reference to the dialog's underlying overlay.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to a ComponentRef for the attached container.\r\n   */\r\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\r\n      [MatDialogConfig, config]\r\n    ]));\r\n    const containerPortal =\r\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\r\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\r\n\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  private _attachDialogContent<T, R>(\r\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n      dialogContainer: MatDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: MatDialogConfig): MatDialogRef<T, R> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef =\r\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\r\n\r\n    // When the dialog backdrop is clicked, we want to close it.\r\n    if (config.hasBackdrop) {\r\n      overlayRef.backdropClick().subscribe(() => {\r\n        if (!dialogRef.disableClose) {\r\n          dialogRef.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (componentOrTemplateRef instanceof TemplateRef) {\r\n      dialogContainer.attachTemplatePortal(\r\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\r\n          <any>{ $implicit: config.data, dialogRef }));\r\n    } else {\r\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n      const contentRef = dialogContainer.attachComponentPortal<T>(\r\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n      dialogRef.componentInstance = contentRef.instance;\r\n    }\r\n\r\n    dialogRef\r\n      .updateSize(config.width, config.height)\r\n      .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n   * of a dialog to close itself and, optionally, to return a value.\r\n   * @param config Config object that is used to construct the dialog.\r\n   * @param dialogRef Reference to the dialog.\r\n   * @param container Dialog container element that wraps all of the contents.\r\n   * @returns The custom injector that can be used inside the dialog.\r\n   */\r\n  private _createInjector<T>(\r\n      config: MatDialogConfig,\r\n      dialogRef: MatDialogRef<T>,\r\n      dialogContainer: MatDialogContainer): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n\r\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\r\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\r\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\r\n    // added to the injection tokens.\r\n    const injectionTokens = new WeakMap<any, any>([\r\n      [MatDialogContainer, dialogContainer],\r\n      [MAT_DIALOG_DATA, config.data],\r\n      [MatDialogRef, dialogRef]\r\n    ]);\r\n\r\n    if (config.direction &&\r\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\r\n      injectionTokens.set(Directionality, {\r\n        value: config.direction,\r\n        change: observableOf()\r\n      });\r\n    }\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\r\n\r\n  /**\r\n   * Removes a dialog from the array of open dialogs.\r\n   * @param dialogRef Dialog to be removed.\r\n   */\r\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\r\n    const index = this.openDialogs.indexOf(dialogRef);\r\n\r\n    if (index > -1) {\r\n      this.openDialogs.splice(index, 1);\r\n\r\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\r\n      // to a the siblings and emit to the `afterAllClosed` stream.\r\n      if (!this.openDialogs.length) {\r\n        this._ariaHiddenElements.forEach((previousValue, element) => {\r\n          if (previousValue) {\r\n            element.setAttribute('aria-hidden', previousValue);\r\n          } else {\r\n            element.removeAttribute('aria-hidden');\r\n          }\r\n        });\r\n\r\n        this._ariaHiddenElements.clear();\r\n        this._afterAllClosed.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hides all of the content that isn't an overlay from assistive technology.\r\n   */\r\n  private _hideNonDialogContentFromAssistiveTechnology() {\r\n    const overlayContainer = this._overlayContainer.getContainerElement();\r\n\r\n    // Ensure that the overlay container is attached to the DOM.\r\n    if (overlayContainer.parentElement) {\r\n      const siblings = overlayContainer.parentElement.children;\r\n\r\n      for (let i = siblings.length - 1; i > -1; i--) {\r\n        let sibling = siblings[i];\r\n\r\n        if (sibling !== overlayContainer &&\r\n          sibling.nodeName !== 'SCRIPT' &&\r\n          sibling.nodeName !== 'STYLE' &&\r\n          !sibling.hasAttribute('aria-live')) {\r\n\r\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\r\n          sibling.setAttribute('aria-hidden', 'true');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Closes all of the dialogs in an array. */\r\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\r\n    let i = dialogs.length;\r\n\r\n    while (i--) {\r\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\r\n      // runs on the next microtask, in addition to modifying the array as we're going\r\n      // through it. We loop through all of them and call close without assuming that\r\n      // they'll be removed from the list instantaneously.\r\n      dialogs[i].close();\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Applies default options to the dialog config.\r\n * @param config Config to be modified.\r\n * @param defaultOptions Default options provided.\r\n * @returns The new configuration object.\r\n */\r\nfunction _applyConfigDefaults(\r\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\r\n  return {...defaultOptions, ...config};\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Optional,\r\n  SimpleChanges,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport {MatDialog} from './dialog';\r\nimport {MatDialogRef} from './dialog-ref';\r\n\r\n/** Counter used to generate unique IDs for dialog elements. */\r\nlet dialogElementUid = 0;\r\n\r\n/**\r\n * Button that will close the current dialog.\r\n */\r\n@Directive({\r\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\r\n  exportAs: 'matDialogClose',\r\n  host: {\r\n    '(click)': 'dialogRef.close(dialogResult)',\r\n    '[attr.aria-label]': 'ariaLabel || null',\r\n    'type': 'button', // Prevents accidental form submits.\r\n  }\r\n})\r\nexport class MatDialogClose implements OnInit, OnChanges {\r\n  /** Screenreader label for the button. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /** Dialog close input. */\r\n  @Input('mat-dialog-close') dialogResult: any;\r\n\r\n  @Input('matDialogClose') _matDialogClose: any;\r\n\r\n  constructor(\r\n    @Optional() public dialogRef: MatDialogRef<any>,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    if (!this.dialogRef) {\r\n      // When this directive is included in a dialog via TemplateRef (rather than being\r\n      // in a Component), the DialogRef isn't available via injection because embedded\r\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\r\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\r\n      // be resolved at constructor time.\r\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\r\n\r\n    if (proxiedChange) {\r\n      this.dialogResult = proxiedChange.currentValue;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\r\n */\r\n@Directive({\r\n  selector: '[mat-dialog-title], [matDialogTitle]',\r\n  exportAs: 'matDialogTitle',\r\n  host: {\r\n    'class': 'mat-dialog-title',\r\n    '[id]': 'id',\r\n  },\r\n})\r\nexport class MatDialogTitle implements OnInit {\r\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\r\n\r\n  constructor(\r\n    @Optional() private _dialogRef: MatDialogRef<any>,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    if (!this._dialogRef) {\r\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\r\n    }\r\n\r\n    if (this._dialogRef) {\r\n      Promise.resolve().then(() => {\r\n        const container = this._dialogRef._containerInstance;\r\n\r\n        if (container && !container._ariaLabelledBy) {\r\n          container._ariaLabelledBy = this.id;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Scrollable content container of a dialog.\r\n */\r\n@Directive({\r\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\r\n  host: {'class': 'mat-dialog-content'}\r\n})\r\nexport class MatDialogContent {}\r\n\r\n\r\n/**\r\n * Container for the bottom action buttons in a dialog.\r\n * Stays fixed to the bottom when scrolling.\r\n */\r\n@Directive({\r\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\r\n  host: {'class': 'mat-dialog-actions'}\r\n})\r\nexport class MatDialogActions {}\r\n\r\n\r\n/**\r\n * Finds the closest MatDialogRef to an element by looking at the DOM.\r\n * @param element Element relative to which to look for a dialog.\r\n * @param openDialogs References to the currently-open dialogs.\r\n */\r\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\r\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\r\n\r\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\r\n    parent = parent.parentElement;\r\n  }\r\n\r\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ViewContainerRef} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {ScrollStrategy} from '@angular/cdk/overlay';\r\n\r\n/** Valid ARIA roles for a dialog element. */\r\nexport type DialogRole = 'dialog' | 'alertdialog';\r\n\r\n/** Possible overrides for a dialog's position. */\r\nexport interface DialogPosition {\r\n  /** Override for the dialog's top position. */\r\n  top?: string;\r\n\r\n  /** Override for the dialog's bottom position. */\r\n  bottom?: string;\r\n\r\n  /** Override for the dialog's left position. */\r\n  left?: string;\r\n\r\n  /** Override for the dialog's right position. */\r\n  right?: string;\r\n}\r\n\r\n/**\r\n * Configuration for opening a modal dialog with the MatDialog service.\r\n */\r\nexport class MatDialogConfig<D = any> {\r\n\r\n  /**\r\n   * Where the attached component should live in Angular's *logical* component tree.\r\n   * This affects what is available for injection and the change detection order for the\r\n   * component instantiated inside of the dialog. This does not affect where the dialog\r\n   * content will be rendered.\r\n   */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** ID for the dialog. If omitted, a unique one will be generated. */\r\n  id?: string;\r\n\r\n  /** The ARIA role of the dialog element. */\r\n  role?: DialogRole = 'dialog';\r\n\r\n  /** Custom class for the overlay pane. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the dialog has a backdrop. */\r\n  hasBackdrop?: boolean = true;\r\n\r\n  /** Custom class for the backdrop, */\r\n  backdropClass?: string = '';\r\n\r\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\r\n  disableClose?: boolean = false;\r\n\r\n  /** Width of the dialog. */\r\n  width?: string = '';\r\n\r\n  /** Height of the dialog. */\r\n  height?: string = '';\r\n\r\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\r\n  minWidth?: number | string;\r\n\r\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\r\n  minHeight?: number | string;\r\n\r\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\r\n  maxWidth?: number | string = '80vw';\r\n\r\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\r\n  maxHeight?: number | string;\r\n\r\n  /** Position overrides. */\r\n  position?: DialogPosition;\r\n\r\n  /** Data being injected into the child component. */\r\n  data?: D | null = null;\r\n\r\n  /** Layout direction for the dialog's content. */\r\n  direction?: Direction;\r\n\r\n  /** ID of the element that describes the dialog. */\r\n  ariaDescribedBy?: string | null = null;\r\n\r\n  /** Aria label to assign to the dialog element */\r\n  ariaLabel?: string | null = null;\r\n\r\n  /** Whether the dialog should focus the first focusable element on open. */\r\n  autoFocus?: boolean = true;\r\n\r\n  /**\r\n   * Whether the dialog should restore focus to the\r\n   * previously-focused element, after it's closed.\r\n   */\r\n  restoreFocus?: boolean = true;\r\n\r\n  /** Scroll strategy to be used for the dialog. */\r\n  scrollStrategy?: ScrollStrategy;\r\n\r\n  /**\r\n   * Whether the dialog should close when the user goes backwards/forwards in history.\r\n   * Note that this usually doesn't include clicking on links (unless the user is using\r\n   * the `HashLocationStrategy`).\r\n   */\r\n  closeOnNavigation?: boolean = true;\r\n\r\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\nconst animationBody = [\r\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\r\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\r\n  // decimate the animation performance. Leaving it as `none` solves both issues.\r\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\r\n  state('enter', style({transform: 'none'})),\r\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\r\n      style({transform: 'none', opacity: 1}))),\r\n  transition('* => void, * => exit',\r\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\r\n];\r\n\r\n/**\r\n * Animations used by MatDialog.\r\n * @docs-private\r\n */\r\nexport const matDialogAnimations: {\r\n  readonly dialogContainer: AnimationTriggerMetadata;\r\n  readonly slideDialog: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that is applied on the dialog container by defalt. */\r\n  dialogContainer: trigger('dialogContainer', animationBody),\r\n\r\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\r\n  slideDialog: trigger('slideDialog', animationBody)\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\r\nimport {Location} from '@angular/common';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {filter, take} from 'rxjs/operators';\r\nimport {DialogPosition} from './dialog-config';\r\nimport {MatDialogContainer} from './dialog-container';\r\n\r\n\r\n// TODO(jelbourn): resizing\r\n\r\n// Counter for unique dialog ids.\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Reference to a dialog opened via the MatDialog service.\r\n */\r\nexport class MatDialogRef<T, R = any> {\r\n  /** The instance of component opened into the dialog. */\r\n  componentInstance: T;\r\n\r\n  /** Whether the user is allowed to close the dialog. */\r\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\r\n\r\n  /** Subject for notifying the user that the dialog has finished opening. */\r\n  private readonly _afterOpened = new Subject<void>();\r\n\r\n  /** Subject for notifying the user that the dialog has finished closing. */\r\n  private readonly _afterClosed = new Subject<R | undefined>();\r\n\r\n  /** Subject for notifying the user that the dialog has started closing. */\r\n  private readonly _beforeClosed = new Subject<R | undefined>();\r\n\r\n  /** Result to be passed to afterClosed. */\r\n  private _result: R | undefined;\r\n\r\n  constructor(\r\n    private _overlayRef: OverlayRef,\r\n    public _containerInstance: MatDialogContainer,\r\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\r\n    _location?: Location,\r\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\r\n\r\n    // Pass the id along to the container.\r\n    _containerInstance._id = id;\r\n\r\n    // Emit when opening animation completes\r\n    _containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\r\n      take(1)\r\n    )\r\n    .subscribe(() => {\r\n      this._afterOpened.next();\r\n      this._afterOpened.complete();\r\n    });\r\n\r\n    // Dispose overlay when closing animation is complete\r\n    _containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\r\n      take(1)\r\n    ).subscribe(() => this._overlayRef.dispose());\r\n\r\n    _overlayRef.detachments().subscribe(() => {\r\n      this._beforeClosed.next(this._result);\r\n      this._beforeClosed.complete();\r\n      this._afterClosed.next(this._result);\r\n      this._afterClosed.complete();\r\n      this.componentInstance = null!;\r\n      this._overlayRef.dispose();\r\n    });\r\n\r\n    _overlayRef.keydownEvents()\r\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\r\n      .subscribe(() => this.close());\r\n  }\r\n\r\n  /**\r\n   * Close the dialog.\r\n   * @param dialogResult Optional result to return to the dialog opener.\r\n   */\r\n  close(dialogResult?: R): void {\r\n    this._result = dialogResult;\r\n\r\n    // Transition the backdrop in parallel to the dialog.\r\n    this._containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'start'),\r\n      take(1)\r\n    )\r\n    .subscribe(() => {\r\n      this._beforeClosed.next(dialogResult);\r\n      this._beforeClosed.complete();\r\n      this._overlayRef.detachBackdrop();\r\n    });\r\n\r\n    this._containerInstance._startExitAnimation();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog is finished opening.\r\n   */\r\n  afterOpened(): Observable<void> {\r\n    return this._afterOpened.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog is finished closing.\r\n   */\r\n  afterClosed(): Observable<R | undefined> {\r\n    return this._afterClosed.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog has started closing.\r\n   */\r\n  beforeClosed(): Observable<R | undefined> {\r\n    return this._beforeClosed.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n   */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._overlayRef.backdropClick();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when keydown events are targeted on the overlay.\r\n   */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._overlayRef.keydownEvents();\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's position.\r\n   * @param position New dialog position.\r\n   */\r\n  updatePosition(position?: DialogPosition): this {\r\n    let strategy = this._getPositionStrategy();\r\n\r\n    if (position && (position.left || position.right)) {\r\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n    } else {\r\n      strategy.centerHorizontally();\r\n    }\r\n\r\n    if (position && (position.top || position.bottom)) {\r\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n    } else {\r\n      strategy.centerVertically();\r\n    }\r\n\r\n    this._overlayRef.updatePosition();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's width and height.\r\n   * @param width New width of the dialog.\r\n   * @param height New height of the dialog.\r\n   */\r\n  updateSize(width: string = '', height: string = ''): this {\r\n    this._getPositionStrategy().width(width).height(height);\r\n    this._overlayRef.updatePosition();\r\n    return this;\r\n  }\r\n\r\n  /** Add a CSS class or an array of classes to the overlay pane. */\r\n  addPanelClass(classes: string | string[]): this {\r\n    this._overlayRef.addPanelClass(classes);\r\n    return this;\r\n  }\r\n\r\n  /** Remove a CSS class or an array of classes from the overlay pane. */\r\n  removePanelClass(classes: string | string[]): this {\r\n    this._overlayRef.removePanelClass(classes);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog is finished opening.\r\n   * @deprecated Use `afterOpened` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  afterOpen(): Observable<void> {\r\n    return this.afterOpened();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog has started closing.\r\n   * @deprecated Use `beforeClosed` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  beforeClose(): Observable<R | undefined> {\r\n    return this.beforeClosed();\r\n  }\r\n\r\n  /** Fetches the position strategy object from the overlay ref. */\r\n  private _getPositionStrategy(): GlobalPositionStrategy {\r\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\r\nimport {MatDialogContainer} from './dialog-container';\r\nimport {\r\n  MatDialogActions,\r\n  MatDialogClose,\r\n  MatDialogContent,\r\n  MatDialogTitle,\r\n} from './dialog-content-directives';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [\r\n    MatDialogContainer,\r\n    MatDialogClose,\r\n    MatDialogTitle,\r\n    MatDialogContent,\r\n    MatDialogActions,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatDialogContainer,\r\n    MatDialogClose,\r\n    MatDialogTitle,\r\n    MatDialogActions,\r\n    MatDialogContent,\r\n  ],\r\n  providers: [\r\n    MatDialog,\r\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [MatDialogContainer],\r\n})\r\nexport class MatDialogModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","throwMatDialogContentAlreadyAttachedError","Error","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_applyConfigDefaults","config","defaultOptions","tslib_1.__assign","getClosestDialog","element","openDialogs","parent","nativeElement","parentElement","classList","contains","find","dialog","id","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","apply","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","animationBody","state","style","opacity","transform","transition","animate","matDialogAnimations","dialogContainer","trigger","slideDialog","MatDialogContainer","_super","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_this","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","EventEmitter","_ariaLabelledBy","tslib_1.__extends","attachComponentPortal","portal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","attachTemplatePortal","_trapFocus","_focusTrap","focusInitialElementWhenReady","_restoreFocus","toFocus","focus","destroy","Promise","resolve","then","_onAnimationDone","event","toState","emit","_onAnimationStart","_startExitAnimation","markForCheck","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","host","class","tabindex","aria-modal","[attr.id]","[attr.role]","[attr.aria-labelledby]","[attr.aria-label]","[attr.aria-describedby]","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","ChangeDetectorRef","undefined","decorators","Optional","Inject","DOCUMENT","propDecorators","uniqueId","MatDialogRef","_overlayRef","_containerInstance","_location","_afterOpened","Subject","_afterClosed","_beforeClosed","_id","pipe","filter","phaseName","take","subscribe","next","complete","dispose","detachments","_result","componentInstance","keydownEvents","keyCode","ESCAPE","close","dialogResult","detachBackdrop","afterOpened","asObservable","afterClosed","beforeClosed","backdropClick","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","afterOpen","beforeClose","getConfig","MAT_DIALOG_DATA","InjectionToken","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatDialog","_overlay","_injector","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","defer","_afterAllClosed","startWith","_scrollStrategy","defineProperty","open","componentOrTemplateRef","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","OverlayConfig","positionStrategy","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","attach","instance","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","injectionTokens","get","Directionality","set","value","change","observableOf","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","siblings","children","sibling","nodeName","hasAttribute","getAttribute","dialogs","Injectable","Injector","Location","SkipSelf","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","ngOnInit","ngOnChanges","changes","proxiedChange","currentValue","Directive","exportAs","(click)","ElementRef","Input","_matDialogClose","MatDialogTitle","_dialogRef","container","[id]","MatDialogContent","MatDialogActions","MatDialogModule","NgModule","imports","CommonModule","OverlayModule","PortalModule","MatCommonModule","exports","declarations","providers","entryComponents"],"mappings":";;;;;;;o9BAuBA,SAAgBA,GAAUC,EAAGC,GAEzB,QAASC,KAAOC,KAAKC,YAAcJ,EADnCK,EAAcL,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,ICanF,QAAgBO,KACd,KAAMC,OAAM,yECOd,QAAgBC,GAAmCC,GACjD,MAAO,YAAM,MAAAA,GAAQC,iBAAiBC,SAIxC,QAAgBC,GAA4CH,GAE1D,MAAO,YAAM,MAAAA,GAAQC,iBAAiBC,SA6UxC,QAASE,GACLC,EAA0BC,GAC5B,MAAFC,MAAaD,EAAmBD,GCjQhC,QAASG,GAAiBC,EAAkCC,GAG1D,IAFF,GAAMC,GAA6BF,EAAQG,cAAcC,cAEhDF,IAAWA,EAAOG,UAAUC,SAAS,yBAC1CJ,EAASA,EAAOE,aAGlB,OAAOF,GAASD,EAAYM,KAAK,SAAAC,GAAU,MAAAA,GAAOC,KAAO,EAAQA,KAAM,KH3HzE,GAAIzB,GAAgB,SAASL,EAAGC,GAI5B,OAHAI,EAAgBE,OAAOwB,iBAChBC,uBAA2BC,QAAS,SAAUjC,EAAGC,GAAKD,EAAEgC,UAAY/B,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIiC,KAAKjC,GAAOA,EAAEkC,eAAeD,KAAIlC,EAAEkC,GAAKjC,EAAEiC,MACpDlC,EAAGC,IASjBmC,EAAW,WAQlB,MAPAA,GAAW7B,OAAO8B,QAAU,SAAkBC,GAC1C,IAAK,GAAIC,GAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAAK,CACjDD,EAAIG,UAAUF,EACd,KAAK,GAAIN,KAAKK,GAAOhC,OAAOD,UAAU6B,eAAeS,KAAKL,EAAGL,KAAII,EAAEJ,GAAKK,EAAEL,IAE9E,MAAOI,IAEJF,EAASS,MAAM1C,KAAMuC,yBIJhC,QAAAI,KAcE3C,KAAF4C,KAAsB,SAGpB5C,KAAF6C,WAAmC,GAGjC7C,KAAF8C,aAA0B,EAGxB9C,KAAF+C,cAA2B,GAGzB/C,KAAFgD,cAA2B,EAGzBhD,KAAFiD,MAAmB,GAGjBjD,KAAFkD,OAAoB,GASlBlD,KAAFmD,SAA+B,OAS7BnD,KAAFoD,KAAoB,KAMlBpD,KAAFqD,gBAAoC,KAGlCrD,KAAFsD,UAA8B,KAG5BtD,KAAFuD,WAAwB,EAMtBvD,KAAFwD,cAA2B,EAUzBxD,KAAFyD,mBAAgC,EAGhC,MAAAd,MClGMe,GAIJC,EAAAA,MAAM,aAAcC,EAAAA,OAAOC,QAAS,EAAGC,UAAW,gBAClDH,EAAAA,MAAM,QAASC,EAAAA,OAAOE,UAAW,UACjCC,EAAAA,WAAW,aAAcC,EAAAA,QAAQ,mCAC7BJ,EAAAA,OAAOE,UAAW,OAAQD,QAAS,MACvCE,EAAAA,WAAW,uBACPC,EAAAA,QAAQ,sCAAuCJ,EAAAA,OAAOC,QAAS,OAOxDI,GAKXC,gBAAiBC,EAAAA,QAAQ,kBAAmBT,GAG5CU,YAAaD,EAAAA,QAAQ,cAAeT,IJQtCW,EAAA,SAAAC,GA8CE,QAAFD,GACYE,EACAC,EACAC,EAC8BC,EAE/BC,GANT,GAAFC,GAQIN,EARJ7B,KAAAzC,OAAAA,WACY4E,GAAZL,YAAYA,EACAK,EAAZJ,kBAAYA,EACAI,EAAZH,mBAAYA,EAC8BG,EAA1CF,UAA0CA,EAE/BE,EAAXD,QAAWA,EApBDC,EAAVC,qCAAqE,KAGnED,EAAFE,OAAsC,QAGpCF,EAAFG,uBAA2B,GAAIC,GAAAA,aAG7BJ,EAAFK,gBAAmC,OAfnC,MAFwCC,GAAxCb,EAAAC,GAqCED,EAAFlE,UAAAgF,sBAAE,SAAyBC,GAMvB,MALIpF,MAAKqF,cAAcC,eACrBhF,IAGFN,KAAKuF,gCACEvF,KAAKqF,cAAcF,sBAAsBC,IAOlDf,EAAFlE,UAAAqF,qBAAE,SAAwBJ,GAMtB,MALIpF,MAAKqF,cAAcC,eACrBhF,IAGFN,KAAKuF,gCACEvF,KAAKqF,cAAcG,qBAAqBJ,IAIzCf,EAAVlE,UAAAsF,WAAE,WACOzF,KAAK0F,aACR1F,KAAK0F,WAAa1F,KAAKwE,kBAAkBnE,OAAOL,KAAKuE,YAAYlD,gBAM/DrB,KAAK2E,QAAQpB,WACfvD,KAAK0F,WAAWC,gCAKZtB,EAAVlE,UAAAyF,cAAE,WACF,GAAUC,GAAU7F,KAAK6E,oCAGjB7E,MAAK2E,QAAQnB,cAAgBqC,GAAoC,kBAAlBA,GAAQC,OACzDD,EAAQC,QAGN9F,KAAK0F,YACP1F,KAAK0F,WAAWK,WAKZ1B,EAAVlE,UAAAoF,8BAAE,WAAA,GAAFX,GAAA5E,IACQA,MAAK0E,YACP1E,KAAK6E,qCAAuC7E,KAAK0E,UAAuB,cAGpE1E,KAAKuE,YAAYlD,cAAcyE,OAIjCE,QAAQC,UAAUC,KAAK,WAAM,MAAAtB,GAAKL,YAAYlD,cAAcyE,YAMlEzB,EAAFlE,UAAAgG,iBAAE,SAAiBC,GACO,UAAlBA,EAAMC,QACRrG,KAAKyF,aACsB,SAAlBW,EAAMC,SACfrG,KAAK4F,gBAGP5F,KAAK+E,uBAAuBuB,KAAKF,IAInC/B,EAAFlE,UAAAoG,kBAAE,SAAkBH,GAChBpG,KAAK+E,uBAAuBuB,KAAKF,IAInC/B,EAAFlE,UAAAqG,oBAAE,WACExG,KAAK8E,OAAS,OAId9E,KAAKyE,mBAAmBgC,+BApJ5BC,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEC,SAAU,8CACVC,QAAF,ioCACEC,cAAFC,EAAAA,kBAAAC,sFAKEC,MACFC,MAAe,uBACTC,SAAN,KACIC,aAAJ,OACIC,YAAJ,MACIC,cAAJ,eACIC,yBAAJ,6CACIC,oBAAJ,oBACIC,0BAAJ,kCACIC,qBAAJ,SACIC,2BAAJ,4BACIC,0BAAJ,kHAxDApB,KAAEqB,EAAAA,oBAmBFrB,SAAmBsB,GAAnBC,aAAAvB,KAAAwB,EAAAA,WAAAxB,KAAAyB,EAAAA,OAAAvB,MAAAwB,EAAAA,cAdA1B,KAAE/D,KAeF0B,EAAAgE,6EA2CAhE,uBKtDIiE,EAAW,eAwBb,QAAFC,GACYC,EACDC,EAEPC,EACS/G,OAAb,KAAAA,IAAaA,EAAb,cAAwC2G,IALtC,IAAF1D,GAAA5E,IACYA,MAAZwI,YAAYA,EACDxI,KAAXyI,mBAAWA,EAGEzI,KAAb2B,GAAaA,EAnBX3B,KAAFgD,aAAsChD,KAAKyI,mBAAmB9D,QAAQ3B,aAGnDhD,KAAnB2I,aAAkC,GAAIC,GAAAA,QAGnB5I,KAAnB6I,aAAkC,GAAID,GAAAA,QAGnB5I,KAAnB8I,cAAmC,GAAIF,GAAAA,QAanCH,EAAmBM,IAAMpH,EAGzB8G,EAAmB1D,uBAAuBiE,KACxCC,EAAAA,OAAO,SAAA7C,GAAS,MAAoB,SAApBA,EAAM8C,WAA0C,UAAlB9C,EAAMC,UACpD8C,EAAAA,KAAK,IAENC,UAAU,WACTxE,EAAK+D,aAAaU,OAClBzE,EAAK+D,aAAaW,aAIpBb,EAAmB1D,uBAAuBiE,KACxCC,EAAAA,OAAO,SAAA7C,GAAS,MAAoB,SAApBA,EAAM8C,WAA0C,SAAlB9C,EAAMC,UACpD8C,EAAAA,KAAK,IACLC,UAAU,WAAM,MAAAxE,GAAK4D,YAAYe,YAEnCf,EAAYgB,cAAcJ,UAAU,WAClCxE,EAAKkE,cAAcO,KAAKzE,EAAK6E,SAC7B7E,EAAKkE,cAAcQ,WACnB1E,EAAKiE,aAAaQ,KAAKzE,EAAK6E,SAC5B7E,EAAKiE,aAAaS,WAClB1E,EAAK8E,kBAAiB,KACtB9E,EAAK4D,YAAYe,YAGnBf,EAAYmB,gBACTX,KAAKC,EAAAA,OAAO,SAAA7C,GAAS,MAAAA,GAAMwD,UAAYC,EAAAA,SAAWjF,EAAK5B,gBACvDoG,UAAU,WAAM,MAAAxE,GAAKkF,UAgI5B,MAzHEvB,GAAFpI,UAAA2J,MAAE,SAAMC,GAAN,GAAFnF,GAAA5E,IACIA,MAAKyJ,QAAUM,EAGf/J,KAAKyI,mBAAmB1D,uBAAuBiE,KAC7CC,EAAAA,OAAO,SAAA7C,GAAS,MAAoB,UAApBA,EAAM8C,YACtBC,EAAAA,KAAK,IAENC,UAAU,WACTxE,EAAKkE,cAAcO,KAAKU,GACxBnF,EAAKkE,cAAcQ,WACnB1E,EAAK4D,YAAYwB,mBAGnBhK,KAAKyI,mBAAmBjC,uBAM1B+B,EAAFpI,UAAA8J,YAAE,WACE,MAAOjK,MAAK2I,aAAauB,gBAM3B3B,EAAFpI,UAAAgK,YAAE,WACE,MAAOnK,MAAK6I,aAAaqB,gBAM3B3B,EAAFpI,UAAAiK,aAAE,WACE,MAAOpK,MAAK8I,cAAcoB,gBAM5B3B,EAAFpI,UAAAkK,cAAE,WACE,MAAOrK,MAAKwI,YAAY6B,iBAM1B9B,EAAFpI,UAAAwJ,cAAE,WACE,MAAO3J,MAAKwI,YAAYmB,iBAO1BpB,EAAFpI,UAAAmK,eAAE,SAAeC,GACjB,GAAQC,GAAW,KAAKC,sBAgBpB,OAdIF,KAAaA,EAASG,MAAQH,EAASI,OACzCJ,EAASG,KAAOF,EAASE,KAAKH,EAASG,MAAQF,EAASG,MAAMJ,EAASI,OAEvEH,EAASI,qBAGPL,IAAaA,EAASM,KAAON,EAASO,QACxCP,EAASM,IAAML,EAASK,IAAIN,EAASM,KAAOL,EAASM,OAAOP,EAASO,QAErEN,EAASO,mBAGX,KAAKvC,YAAY8B,iBAEjB,MAQF/B,EAAFpI,UAAA6K,WAAE,SAAW/H,EAAoBC,GAG7B,WAHJ,KAAAD,IAAaA,EAAb,QAAA,KAAAC,IAAiCA,EAAjC,IACI,KAAKuH,uBAAuBxH,MAAMA,GAAOC,OAAOA,GAChD,KAAKsF,YAAY8B,iBACjB,MAIF/B,EAAFpI,UAAA8K,cAAE,SAAcC,GAEZ,MADA,MAAK1C,YAAYyC,cAAcC,GAC/B,MAIF3C,EAAFpI,UAAAgL,iBAAE,SAAiBD,GAEf,MADA,MAAK1C,YAAY2C,iBAAiBD,GAClC,MAQF3C,EAAFpI,UAAAiL,UAAE,WACE,MAAOpL,MAAKiK,eAQd1B,EAAFpI,UAAAkL,YAAE,WACE,MAAOrL,MAAKoK,gBAIN7B,EAAVpI,UAAAsK,qBAAE,WACE,MAAOzK,MAAKwI,YAAY8C,YAA4B,kBAExD/C,KJ7KagD,EAAkB,GAAIC,GAAAA,eAAoB,iBAG1CC,EACT,GAAID,GAAAA,eAAgC,8BAG3BE,EACT,GAAIF,GAAAA,eAAqC,8BAchCG,GACXC,QAASF,EACTG,MAAOC,EAAAA,SACPC,WAAYnL,GAOdoL,EAAA,WAwCE,QAAFA,GACcC,EACAC,EACYxD,EACoCyD,EACpBC,EACJC,EACxBC,GAPZ,GAAF1H,GAAA5E,IACcA,MAAdiM,SAAcA,EACAjM,KAAdkM,UAAcA,EACYlM,KAA1B0I,UAA0BA,EACoC1I,KAA9DmM,gBAA8DA,EAExBnM,KAAtCqM,cAAsCA,EACxBrM,KAAdsM,kBAAcA,EA7CJtM,KAAVuM,2BACmBvM,KAAnBwM,2BAAgD,GAAI5D,GAAAA,QACjC5I,KAAnByM,wBAA6C,GAAI7D,GAAAA,QACvC5I,KAAV0M,oBAAgC,GAAIC,KA+BzB3M,KAAX4M,eAA8CC,EAAAA,MAAY,WAAM,MAAAjI,GAAKzD,YAAYqB,OAC3EoC,EAAKkI,gBACLlI,EAAKkI,gBAAgB9D,KAAK+D,EAAAA,cAAU/E,OAUtChI,KAAKgN,gBAAkBZ,EAuQ3B,MA9SEhM,QAAF6M,eAAMjB,EAAN7L,UAAA,mBAAE,WACE,MAAOH,MAAKqM,cAAgBrM,KAAKqM,cAAclL,YAAcnB,KAAKuM,yDAIpEnM,OAAF6M,eAAMjB,EAAN7L,UAAA,mBAAE,WACE,MAAOH,MAAKqM,cAAgBrM,KAAKqM,cAAcpC,YAAcjK,KAAKyM,yDAQpErM,OAAF6M,eAAMjB,EAAN7L,UAAA,iBAAE,WACE,MAAOH,MAAKiK,6CAGd7J,OAAF6M,eAAMjB,EAAN7L,UAAA,uBAAE,WACF,GAAUiB,GAASpB,KAAKqM,aACpB,OAAOjL,GAASA,EAAO0L,gBAAkB9M,KAAKwM,4DA6BhDR,EAAF7L,UAAA+M,KAAE,SAA0BC,EAClBrM,GADR,GAAF8D,GAAA5E,IAKI,IAFAc,EAASD,EAAqBC,EAAQd,KAAKmM,iBAAmB,GAAIxJ,IAE9D7B,EAAOa,IAAM3B,KAAKoN,cAActM,EAAOa,IACzC,KAAMpB,OAAM,mBAAmBO,EAAOa,GAA5C,kDAGA,IAAU0L,GAAarN,KAAKsN,eAAexM,GACjCoD,EAAkBlE,KAAKuN,uBAAuBF,EAAYvM,GAC1D0M,EAAYxN,KAAKyN,qBAA2BN,EACAjJ,EACAmJ,EACAvM,EAWlD,OARKd,MAAKmB,YAAYqB,QACpBxC,KAAK0N,+CAGP1N,KAAKmB,YAAYwM,KAAKH,GACtBA,EAAUrD,cAAcf,UAAU,WAAM,MAAAxE,GAAKgJ,kBAAkBJ,KAC/DxN,KAAKiK,YAAYZ,KAAKmE,GAEfA,GAMTxB,EAAF7L,UAAA0N,SAAE,WACE7N,KAAK8N,cAAc9N,KAAKmB,cAO1B6K,EAAF7L,UAAAiN,cAAE,SAAczL,GACZ,MAAO3B,MAAKmB,YAAYM,KAAK,SAAAC,GAAU,MAAAA,GAAOC,KAAOA,KAGvDqK,EAAF7L,UAAA4N,YAAE,WAGE/N,KAAK8N,cAAc9N,KAAKuM,yBACxBvM,KAAKwM,2BAA2BlD,WAChCtJ,KAAKyM,wBAAwBnD,YAQvB0C,EAAV7L,UAAAmN,eAAE,SAAuBxM,GACzB,GAAUkN,GAAgBhO,KAAKiO,kBAAkBnN,EAC7C,OAAOd,MAAKiM,SAAS5L,OAAO2N,IAQtBhC,EAAV7L,UAAA8N,kBAAE,SAA0BC,GAC5B,GAAUvK,GAAQ,GAAIwK,GAAAA,eAChBC,iBAAkBpO,KAAKiM,SAAS1B,WAAW8D,SAC3CjC,eAAgB8B,EAAa9B,gBAAkBpM,KAAKgN,kBACpDnK,WAAYqL,EAAarL,WACzBC,YAAaoL,EAAapL,YAC1BwL,UAAWJ,EAAaI,UACxBC,SAAUL,EAAaK,SACvBC,UAAWN,EAAaM,UACxBrL,SAAU+K,EAAa/K,SACvBsL,UAAWP,EAAaO,UACxBC,oBAAqBR,EAAazK,mBAOpC,OAJIyK,GAAanL,gBACfY,EAAMZ,cAAgBmL,EAAanL,eAG9BY,GASDqI,EAAV7L,UAAAoN,uBAAE,SAA+B9M,EAAqBK,GACtD,GAAU6N,GAAe7N,GAAUA,EAAO8N,kBAAoB9N,EAAO8N,iBAAiBC,SAC5EA,EAAW,GAAIC,GAAAA,eAAeH,GAAgB3O,KAAKkM,UAAW,GAAI6C,WACrEpM,EAAiB7B,MAEdkO,EACF,GAAIC,GAAAA,gBAAgB5K,EAAoBvD,EAAO8N,iBAAkBC,EAGrE,OAFqBpO,GAAQyO,OAA2BF,GAEpCG,UAYdnD,EAAV7L,UAAAsN,qBAAE,SACIN,EACAjJ,EACAmJ,EACAvM,GAIN,GAAU0M,GACF,GAAIjF,GAAmB8E,EAAYnJ,EAAiBlE,KAAK0I,UAAW5H,EAAOa,GAW/E,IARIb,EAAOgC,aACTuK,EAAWhD,gBAAgBjB,UAAU,WAC9BoE,EAAUxK,cACbwK,EAAU1D,UAKZqD,YAAkCiC,GAAAA,YACpClL,EAAgBsB,qBACd,GAAI6J,GAAAA,eAAkBlC,EAAsB,MACnCmC,UAAWxO,EAAOsC,KAAMoK,UAFzCA,SAGW,CACX,GAAYqB,GAAW7O,KAAKuP,gBAAmBzO,EAAQ0M,EAAWtJ,GACtDsL,EAAatL,EAAgBiB,sBAC/B,GAAI8J,GAAAA,gBAAgB9B,MAAwBnF,GAAW6G,GAC3DrB,GAAU9D,kBAAoB8F,EAAWL,SAO3C,MAJA3B,GACGxC,WAAWlK,EAAOmC,MAAOnC,EAAOoC,QAChCoH,eAAexJ,EAAOyJ,UAElBiD,GAWDxB,EAAV7L,UAAAoP,gBAAE,SACIzO,EACA0M,EACAtJ,GAEN,GAAUyK,GAAe7N,GAAUA,EAAO8N,kBAAoB9N,EAAO8N,iBAAiBC,SAM5EY,EAAkB,GAAIV,WACzB1K,EAAoBH,IACpBqH,EAAiBzK,EAAOsC,OACxBmF,EAAciF,IAWjB,QARI1M,EAAOwN,WACLK,GAAiBA,EAAae,IAA2BC,EAAAA,eAAgB,OAC7EF,EAAgBG,IAAID,EAAAA,gBAClBE,MAAO/O,EAAOwN,UACdwB,OAAQC,EAAAA,OAIL,GAAIjB,GAAAA,eAAeH,GAAgB3O,KAAKkM,UAAWuD,IAOpDzD,EAAV7L,UAAAyN,kBAAE,SAA0BJ,GAC5B,GAAUwC,GAAQhQ,KAAKmB,YAAY8O,QAAQzC,EAEnCwC,IAAS,IACXhQ,KAAKmB,YAAY+O,OAAOF,EAAO,GAI1BhQ,KAAKmB,YAAYqB,SACpBxC,KAAK0M,oBAAoByD,QAAQ,SAACC,EAAelP,GAC3CkP,EACFlP,EAAQmP,aAAa,cAAeD,GAEpClP,EAAQoP,gBAAgB,iBAI5BtQ,KAAK0M,oBAAoB6D,QACzBvQ,KAAK8M,gBAAgBzD,UAQnB2C,EAAV7L,UAAAuN,6CAAE,WACF,GAAU8C,GAAmBxQ,KAAKsM,kBAAkBmE,qBAGhD,IAAID,EAAiBlP,cAGnB,IAAK,GAFCoP,GAAWF,EAAiBlP,cAAcqP,SAEvCtO,EAAIqO,EAASlO,OAAS,EAAGH,GAAK,EAAGA,IAAK,CACrD,GAAYuO,GAAUF,EAASrO,EAEnBuO,KAAYJ,GACO,WAArBI,EAAQC,UACa,UAArBD,EAAQC,UACPD,EAAQE,aAAa,eAEtB9Q,KAAK0M,oBAAoBkD,IAAIgB,EAASA,EAAQG,aAAa,gBAC3DH,EAAQP,aAAa,cAAe,WAOpCrE,EAAV7L,UAAA2N,cAAE,SAAsBkD,GAGpB,IAFJ,GAAQ3O,GAAI2O,EAAQxO,OAETH,KAKL2O,EAAQ3O,GAAGyH,wBAnTjBpD,KAACuK,EAAAA,iDA1DDvK,KAAEoF,EAAAA,UAYFpF,KAAEwK,EAAAA,WALFxK,KAAQyK,EAAAA,SAARlJ,aAAAvB,KA8FOwB,EAAAA,aAjFPxB,KAAQ/D,EAARsF,aAAAvB,KAkFOwB,EAAAA,WAlFPxB,KAkFmByB,EAAAA,OAlFnBvB,MAkF0B6E,OAC1B/E,SAAAsB,GAAAC,aAAAvB,KAAOyB,EAAAA,OAAPvB,MAAc8E,OACdhF,KAAqDsF,EAArD/D,aAAAvB,KAAOwB,EAAAA,WAAPxB,KAAmB0K,EAAAA,aAtGnB1K,KAAE2K,EAAAA,oBA+WFrF,KCtWIsF,EAAmB,EAKvBC,EAAA,WAkBE,QAAFA,GACuB/D,EACXjJ,EACAiN,GAFWxR,KAAvBwN,UAAuBA,EACXxN,KAAZuE,YAAYA,EACAvE,KAAZwR,QAAYA,EAoBZ,MAlBED,GAAFpR,UAAAsR,SAAE,WACOzR,KAAKwN,YAMRxN,KAAKwN,UAAYvM,EAAiBjB,KAAKuE,YAAavE,KAAKwR,QAAQrQ,eAIrEoQ,EAAFpR,UAAAuR,YAAE,SAAYC,GACd,GAAUC,GAAgBD,EAAyB,iBAAKA,EAA+B,qBAE/EC,KACF5R,KAAK+J,aAAe6H,EAAcC,8BAtCxCnL,KAACoL,EAAAA,UAADlL,OACEC,SAAU,mDACVkL,SAAU,iBACV5K,MACE6K,UAAW,gCACXtK,oBAAqB,oBACrBhB,KAAQ,kDAdZA,KAAQ6B,EAARN,aAAAvB,KA2BKwB,EAAAA,aA9BLxB,KAAEuL,EAAAA,aAEFvL,KAAQsF,uBAoBR1I,YAAAoD,KAAGwL,EAAAA,MAAHtL,MAAS,gBAGTmD,eAAArD,KAAGwL,EAAAA,MAAHtL,MAAS,sBAETuL,kBAAAzL,KAAGwL,EAAAA,MAAHtL,MAAS,qBAyBT2K,KAKAa,EAAA,WAWE,QAAFA,GACwBC,EACZ9N,EACAiN,GAFYxR,KAAxBqS,WAAwBA,EACZrS,KAAZuE,YAAYA,EACAvE,KAAZwR,QAAYA,EALDxR,KAAX2B,GAAgB,oBAAoB2P,IAsBpC,MAfEc,GAAFjS,UAAAsR,SAAE,WAAA,GAAF7M,GAAA5E,IACSA,MAAKqS,aACRrS,KAAKqS,WAAapR,EAAiBjB,KAAKuE,YAAavE,KAAKwR,QAAQrQ,cAGhEnB,KAAKqS,YACPrM,QAAQC,UAAUC,KAAK,WAC7B,GAAcoM,GAAY1N,EAAKyN,WAAW5J,kBAE9B6J,KAAcA,EAAUrN,kBAC1BqN,EAAUrN,gBAAkBL,EAAKjD,sBA1B3C+E,KAACoL,EAAAA,UAADlL,OACEC,SAAU,uCACVkL,SAAU,iBACV5K,MACEC,MAAS,mBACTmL,OAAQ,8CA3DZ7L,KAAQ6B,EAARN,aAAAvB,KAkEKwB,EAAAA,aArELxB,KAAEuL,EAAAA,aAEFvL,KAAQsF,uBAgERrK,KAAA+E,KAAGwL,EAAAA,SAsBHE,KAMAI,EAAA,WAAA,QAAAA,MAI+B,sBAJ/B9L,KAACoL,EAAAA,UAADlL,OACEC,SAAU,+DACVM,MAAOC,MAAS,0BAElBoL,KAOAC,EAAA,WAAA,QAAAA,MAI+B,sBAJ/B/L,KAACoL,EAAAA,UAADlL,OACEC,SAAU,+DACVM,MAAOC,MAAS,0BAElBqL,KIrGAC,EAAA,WAAA,QAAAA,MA4B8B,sBA5B9BhM,KAACiM,EAAAA,SAAD/L,OACEgM,SACEC,EAAAA,aACAC,EAAAA,cACAC,EAAAA,aACAC,EAAAA,iBAEFC,SACE5O,EACAkN,EACAa,EACAI,EACAC,EACAO,EAAAA,iBAEFE,cACE7O,EACAkN,EACAa,EACAK,EACAD,GAEFW,WACEnH,EACAL,GAEFyH,iBAAkB/O,OAEpBqO"}