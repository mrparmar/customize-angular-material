{"version":3,"file":"material-divider.umd.js","sources":["../../src/lib/divider/divider-module.ts","../../src/lib/divider/divider.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatDivider} from './divider';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, CommonModule],\r\n  exports: [MatDivider, MatCommonModule],\r\n  declarations: [MatDivider],\r\n})\r\nexport class MatDividerModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-divider',\r\n  host: {\r\n    'role': 'separator',\r\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n    '[class.mat-divider-vertical]': 'vertical',\r\n    '[class.mat-divider-horizontal]': '!vertical',\r\n    '[class.mat-divider-inset]': 'inset',\r\n    'class': 'mat-divider'\r\n  },\r\n  template: '',\r\n  styleUrls: ['divider.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDivider {\r\n  /** Whether the divider is vertically aligned. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\r\n  private _vertical: boolean = false;\r\n\r\n  /** Whether the divider is an inset divider. */\r\n  @Input()\r\n  get inset(): boolean { return this._inset; }\r\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\r\n  private _inset: boolean = false;\r\n}\r\n"],"names":["MatCommonModule","CommonModule","NgModule","ChangeDetectionStrategy","ViewEncapsulation","Component","coerceBooleanProperty"],"mappings":";;;;;;;;;;;;;;;;;ACWA,AAAA,IAAA,UAAA,kBAAA,YAAA;IAAA,SAAA,UAAA,GAAA;QAqBU,IAAV,CAAA,SAAmB,GAAY,KAAK,CAAC;QAM3B,IAAV,CAAA,MAAgB,GAAY,KAAK,CAAC;KACjC;IAVC,MAAF,CAAA,cAAA,CACM,UADN,CAAA,SAAA,EAAA,UACc,EADd;;;;;;QAAE,YAAF,EAC4B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;QAClD,UAAa,KAAc,EAA7B,EAAiC,IAAI,CAAC,SAAS,GAAGM,8BAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;KADjF,CAAA,CAAoD;IAKlD,MAAF,CAAA,cAAA,CACM,UADN,CAAA,SAAA,EAAA,OACW,EADX;;;;;;QAAE,YAAF,EACyB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;;;;;QAC5C,UAAU,KAAc,EAA1B,EAA8B,IAAI,CAAC,MAAM,GAAGA,8BAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;KAD3E,CAAA,CAA8C;;QAzB9C,EAAA,IAAA,EAACD,cAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,aAAA;oBACE,IAAF,EAAA;wBACA,MAAY,EAAZ,WAAyB;wBACnB,yBAAN,EAAA,sCAAA;wBACI,8BAAJ,EAAA,UAAA;wBACI,gCAAJ,EAAA,WAAA;wBACI,2BAAJ,EAAA,OAAA;wBACI,OAAJ,EAAA,aAAA;qBACA;oBACA,QAAA,EAAA,EAAA;oBACA,MAAA,EAAA,CAAA,6SAAA,CAAA;oBACE,aAAF,EAAAD,sBAAA,CAAA,IAAA;oBACE,eAAF,EAAAD,4BAAA,CAAA,MAAA;iBACA,EAAA,EAAA;KACA,CAAA;IACA,UAAA,CAAA,cAAA,GAAA;;;KAGA,CAAA;IAMA,OAAA,UAAA,CAAA;;;;;;;ADrBA,AAAA,IAAA,gBAAA,kBAAA,YAAA;IAAA,SAAA,gBAAA,GAAA;KAKgC;;QALhC,EAAA,IAAA,EAACD,aAAQ,EAAT,IAAA,EAAA,CAAU;oBACR,OAAO,EAAE,CAACF,sBAAe,EAAEC,mBAAY,CAAC;oBACxC,OAAO,EAAE,CAAC,UAAU,EAAED,sBAAe,CAAC;oBACtC,YAAY,EAAE,CAAC,UAAU,CAAC;iBAC3B,EAAD,EAAA;;IAC+B,OAA/B,gBAAgC,CAAhC;CAAgC,EAAhC,CAAA;;;;;;;;;;;;;"}