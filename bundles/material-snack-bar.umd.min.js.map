{"version":3,"file":"material-snack-bar.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\r\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\r\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\nimport {MatSnackBarModule} from './snack-bar-module';\r\nimport {MatSnackBarRef} from './snack-bar-ref';\r\n\r\n\r\n/** Injection token that can be used to specify default snack bar. */\r\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\r\n  return new MatSnackBarConfig();\r\n}\r\n\r\n/**\r\n * Service to dispatch Material Design snack bar messages.\r\n */\r\n@Injectable({providedIn: MatSnackBarModule})\r\nexport class MatSnackBar implements OnDestroy {\r\n  /**\r\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\r\n   * If there is a parent snack-bar service, all operations should delegate to that parent\r\n   * via `_openedSnackBarRef`.\r\n   */\r\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\r\n\r\n  /** Reference to the currently opened snackbar at *any* level. */\r\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\r\n    const parent = this._parentSnackBar;\r\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\r\n  }\r\n\r\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\r\n    if (this._parentSnackBar) {\r\n      this._parentSnackBar._openedSnackBarRef = value;\r\n    } else {\r\n      this._snackBarRefAtThisLevel = value;\r\n    }\r\n  }\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _live: LiveAnnouncer,\r\n      private _injector: Injector,\r\n      private _breakpointObserver: BreakpointObserver,\r\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\r\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\r\n   * currently opened snack bars.\r\n   *\r\n   * @param component Component to be instantiated.\r\n   * @param config Extra configuration for the snack bar.\r\n   */\r\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\r\n    MatSnackBarRef<T> {\r\n    return this._attach(component, config) as MatSnackBarRef<T>;\r\n  }\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\r\n   * currently opened snack bars.\r\n   *\r\n   * @param template Template to be instantiated.\r\n   * @param config Extra configuration for the snack bar.\r\n   */\r\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\r\n    MatSnackBarRef<EmbeddedViewRef<any>> {\r\n    return this._attach(template, config);\r\n  }\r\n\r\n  /**\r\n   * Opens a snackbar with a message and an optional action.\r\n   * @param message The message to show in the snackbar.\r\n   * @param action The label for the snackbar action.\r\n   * @param config Additional configuration options for the snackbar.\r\n   */\r\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\r\n      MatSnackBarRef<SimpleSnackBar> {\r\n    const _config = {...this._defaultConfig, ...config};\r\n\r\n    // Since the user doesn't have access to the component, we can\r\n    // override the data to pass in our own message and action.\r\n    _config.data = {message, action};\r\n\r\n    if (!_config.announcementMessage) {\r\n      _config.announcementMessage = message;\r\n    }\r\n\r\n    return this.openFromComponent(SimpleSnackBar, _config);\r\n  }\r\n\r\n  /**\r\n   * Dismisses the currently-visible snack bar.\r\n   */\r\n  dismiss(): void {\r\n    if (this._openedSnackBarRef) {\r\n      this._openedSnackBarRef.dismiss();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Only dismiss the snack bar at the current level on destroy.\r\n    if (this._snackBarRefAtThisLevel) {\r\n      this._snackBarRefAtThisLevel.dismiss();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attaches the snack bar container component to the overlay.\r\n   */\r\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\r\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\r\n      [MatSnackBarConfig, config]\r\n    ]));\r\n\r\n    const containerPortal =\r\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\r\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\r\n    containerRef.instance.snackBarConfig = config;\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Places a new component or a template as the content of the snack bar container.\r\n   */\r\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\r\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\r\n\r\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\r\n    const overlayRef = this._createOverlay(config);\r\n    const container = this._attachSnackBarContainer(overlayRef, config);\r\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\r\n\r\n    if (content instanceof TemplateRef) {\r\n      const portal = new TemplatePortal(content, null!, {\r\n        $implicit: config.data,\r\n        snackBarRef\r\n      } as any);\r\n\r\n      snackBarRef.instance = container.attachTemplatePortal(portal);\r\n    } else {\r\n      const injector = this._createInjector(config, snackBarRef);\r\n      const portal = new ComponentPortal(content, undefined, injector);\r\n      const contentRef = container.attachComponentPortal<T>(portal);\r\n\r\n      // We can't pass this via the injector, because the injector is created earlier.\r\n      snackBarRef.instance = contentRef.instance;\r\n    }\r\n\r\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\r\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\r\n    // fill the width of the screen for full width snackbars.\r\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\r\n      takeUntil(overlayRef.detachments().pipe(take(1)))\r\n    ).subscribe(state => {\r\n      if (state.matches) {\r\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\r\n      } else {\r\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\r\n      }\r\n    });\r\n\r\n    this._animateSnackBar(snackBarRef, config);\r\n    this._openedSnackBarRef = snackBarRef;\r\n    return this._openedSnackBarRef;\r\n  }\r\n\r\n  /** Animates the old snack bar out and the new one in. */\r\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\r\n    // When the snackbar is dismissed, clear the reference to it.\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\r\n      if (this._openedSnackBarRef == snackBarRef) {\r\n        this._openedSnackBarRef = null;\r\n      }\r\n\r\n      if (config.announcementMessage) {\r\n        this._live.clear();\r\n      }\r\n    });\r\n\r\n    if (this._openedSnackBarRef) {\r\n      // If a snack bar is already in view, dismiss it and enter the\r\n      // new snack bar after exit animation is complete.\r\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\r\n        snackBarRef.containerInstance.enter();\r\n      });\r\n      this._openedSnackBarRef.dismiss();\r\n    } else {\r\n      // If no snack bar is in view, enter the new snack bar.\r\n      snackBarRef.containerInstance.enter();\r\n    }\r\n\r\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\r\n    if (config.duration && config.duration > 0) {\r\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\r\n    }\r\n\r\n    if (config.announcementMessage) {\r\n      this._live.announce(config.announcementMessage, config.politeness);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new overlay and places it in the correct location.\r\n   * @param config The user-specified snack bar config.\r\n   */\r\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\r\n    const overlayConfig = new OverlayConfig();\r\n    overlayConfig.direction = config.direction;\r\n\r\n    let positionStrategy = this._overlay.position().global();\r\n    // Set horizontal position.\r\n    const isRtl = config.direction === 'rtl';\r\n    const isLeft = (\r\n      config.horizontalPosition === 'left' ||\r\n      (config.horizontalPosition === 'start' && !isRtl) ||\r\n      (config.horizontalPosition === 'end' && isRtl));\r\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\r\n    if (isLeft) {\r\n      positionStrategy.left('0');\r\n    } else if (isRight) {\r\n      positionStrategy.right('0');\r\n    } else {\r\n      positionStrategy.centerHorizontally();\r\n    }\r\n    // Set horizontal position.\r\n    if (config.verticalPosition === 'top') {\r\n      positionStrategy.top('0');\r\n    } else {\r\n      positionStrategy.bottom('0');\r\n    }\r\n\r\n    overlayConfig.positionStrategy = positionStrategy;\r\n    return this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Creates an injector to be used inside of a snack bar component.\r\n   * @param config Config that was used to create the snack bar.\r\n   * @param snackBarRef Reference to the snack bar.\r\n   */\r\n  private _createInjector<T>(\r\n      config: MatSnackBarConfig,\r\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n\r\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\r\n      [MatSnackBarRef, snackBarRef],\r\n      [MAT_SNACK_BAR_DATA, config.data]\r\n    ]));\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayRef} from '@angular/cdk/overlay';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\n\r\n\r\n/** Event that is emitted when a snack bar is dismissed. */\r\nexport interface MatSnackBarDismiss {\r\n  /** Whether the snack bar was dismissed using the action button. */\r\n  dismissedByAction: boolean;\r\n}\r\n\r\n/**\r\n * Reference to a snack bar dispatched from the snack bar service.\r\n */\r\nexport class MatSnackBarRef<T> {\r\n  /** The instance of the component making up the content of the snack bar. */\r\n  instance: T;\r\n\r\n  /**\r\n   * The instance of the component making up the content of the snack bar.\r\n   * @docs-private\r\n   */\r\n  containerInstance: MatSnackBarContainer;\r\n\r\n  /** Subject for notifying the user that the snack bar has been dismissed. */\r\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\r\n\r\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\r\n  private readonly _afterOpened = new Subject<void>();\r\n\r\n  /** Subject for notifying the user that the snack bar action was called. */\r\n  private readonly _onAction = new Subject<void>();\r\n\r\n  /**\r\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\r\n   * dismissed before the duration passes.\r\n   */\r\n  private _durationTimeoutId: number;\r\n\r\n  /** Whether the snack bar was dismissed using the action button. */\r\n  private _dismissedByAction = false;\r\n\r\n  constructor(containerInstance: MatSnackBarContainer,\r\n              private _overlayRef: OverlayRef) {\r\n    this.containerInstance = containerInstance;\r\n    // Dismiss snackbar on action.\r\n    this.onAction().subscribe(() => this.dismiss());\r\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\r\n  }\r\n\r\n  /** Dismisses the snack bar. */\r\n  dismiss(): void {\r\n    if (!this._afterDismissed.closed) {\r\n      this.containerInstance.exit();\r\n    }\r\n    clearTimeout(this._durationTimeoutId);\r\n  }\r\n\r\n  /** Marks the snackbar action clicked. */\r\n  dismissWithAction(): void {\r\n    if (!this._onAction.closed) {\r\n      this._dismissedByAction = true;\r\n      this._onAction.next();\r\n      this._onAction.complete();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Marks the snackbar action clicked.\r\n   * @deprecated Use `dismissWithAction` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  closeWithAction(): void {\r\n    this.dismissWithAction();\r\n  }\r\n\r\n  /** Dismisses the snack bar after some duration */\r\n  _dismissAfter(duration: number): void {\r\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\r\n  }\r\n\r\n  /** Marks the snackbar as opened */\r\n  _open(): void {\r\n    if (!this._afterOpened.closed) {\r\n      this._afterOpened.next();\r\n      this._afterOpened.complete();\r\n    }\r\n  }\r\n\r\n  /** Cleans up the DOM after closing. */\r\n  private _finishDismiss(): void {\r\n    this._overlayRef.dispose();\r\n\r\n    if (!this._onAction.closed) {\r\n      this._onAction.complete();\r\n    }\r\n\r\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\r\n    this._afterDismissed.complete();\r\n    this._dismissedByAction = false;\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar is finished closing. */\r\n  afterDismissed(): Observable<MatSnackBarDismiss> {\r\n    return this._afterDismissed.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\r\n  afterOpened(): Observable<void> {\r\n    return this.containerInstance._onEnter;\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar action is called. */\r\n  onAction(): Observable<void> {\r\n    return this._onAction.asObservable();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\r\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\r\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\r\n\r\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\r\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\r\n\r\n/** Possible values for verticalPosition on MatSnackBarConfig. */\r\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\r\n\r\n/**\r\n * Configuration used when opening a snack-bar.\r\n */\r\nexport class MatSnackBarConfig<D = any> {\r\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\r\n  politeness?: AriaLivePoliteness = 'assertive';\r\n\r\n  /**\r\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\r\n   * component or template, the announcement message will default to the specified message.\r\n   */\r\n  announcementMessage?: string = '';\r\n\r\n  /** The view container to place the overlay for the snack bar into. */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\r\n  duration?: number = 0;\r\n\r\n  /** Extra CSS classes to be added to the snack bar container. */\r\n  panelClass?: string | string[];\r\n\r\n  /** Text layout direction for the snack bar. */\r\n  direction?: Direction;\r\n\r\n  /** Data being injected into the child component. */\r\n  data?: D | null = null;\r\n\r\n  /** The horizontal position to place the snack bar. */\r\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\r\n\r\n  /** The vertical position to place the snack bar. */\r\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\r\nimport {MatSnackBarRef} from './snack-bar-ref';\r\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\r\n\r\n\r\n/**\r\n * A component used to open as the default snack bar, matching material spec.\r\n * This should only be used internally by the snack bar service.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'simple-snack-bar',\r\n  templateUrl: 'simple-snack-bar.html',\r\n  styleUrls: ['simple-snack-bar.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-simple-snackbar',\r\n  }\r\n})\r\nexport class SimpleSnackBar {\r\n  /** Data that was injected into the snack bar. */\r\n  data: {message: string, action: string};\r\n\r\n  constructor(\r\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\r\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\r\n    this.data = data;\r\n  }\r\n\r\n  /** Performs the action on the snack bar. */\r\n  action(): void {\r\n    this.snackBarRef.dismissWithAction();\r\n  }\r\n\r\n  /** If the action button should be shown. */\r\n  get hasAction(): boolean {\r\n    return !!this.data.action;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the Material snack bar.\r\n * @docs-private\r\n */\r\nexport const matSnackBarAnimations: {\r\n  readonly snackBarState: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that shows and hides a snack bar. */\r\n  snackBarState: trigger('state', [\r\n    state('void, hidden', style({\r\n      transform: 'scale(0.8)',\r\n      opacity: 0,\r\n    })),\r\n    state('visible', style({\r\n      transform: 'scale(1)',\r\n      opacity: 1,\r\n    })),\r\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\r\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\r\n      opacity: 0\r\n    }))),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {\r\n  BasePortalOutlet,\r\n  CdkPortalOutlet,\r\n  ComponentPortal,\r\n  TemplatePortal,\r\n} from '@angular/cdk/portal';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  NgZone,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {take} from 'rxjs/operators';\r\nimport {matSnackBarAnimations} from './snack-bar-animations';\r\nimport {MatSnackBarConfig} from './snack-bar-config';\r\n\r\n\r\n/**\r\n * Internal component that wraps user-provided snack bar content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'snack-bar-container',\r\n  templateUrl: 'snack-bar-container.html',\r\n  styleUrls: ['snack-bar-container.css'],\r\n  // In Ivy embedded views will be change detected from their declaration place, rather than\r\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\r\n  // because it might cause snack bars that were opened from a template not to be out of date.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [matSnackBarAnimations.snackBarState],\r\n  host: {\r\n    '[attr.role]': '_role',\r\n    'class': 'mat-snack-bar-container',\r\n    '[@state]': '_animationState',\r\n    '(@state.done)': 'onAnimationEnd($event)'\r\n  },\r\n})\r\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\r\n  /** Whether the component has been destroyed. */\r\n  private _destroyed = false;\r\n\r\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\r\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\r\n\r\n  /** Subject for notifying that the snack bar has exited from view. */\r\n  readonly _onExit: Subject<any> = new Subject();\r\n\r\n  /** Subject for notifying that the snack bar has finished entering the view. */\r\n  readonly _onEnter: Subject<any> = new Subject();\r\n\r\n  /** The state of the snack bar animations. */\r\n  _animationState = 'void';\r\n\r\n  /** ARIA role for the snack bar container. */\r\n  _role: 'alert' | 'status' | null;\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    /** The snack bar configuration. */\r\n    public snackBarConfig: MatSnackBarConfig) {\r\n\r\n    super();\r\n\r\n    // Based on the ARIA spec, `alert` and `status` roles have an\r\n    // implicit `assertive` and `polite` politeness respectively.\r\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\r\n      this._role = 'alert';\r\n    } else if (snackBarConfig.politeness === 'off') {\r\n      this._role = null;\r\n    } else {\r\n      this._role = 'status';\r\n    }\r\n  }\r\n\r\n  /** Attach a component portal as content to this snack bar container. */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    this._assertNotAttached();\r\n    this._applySnackBarClasses();\r\n    return this._portalOutlet.attachComponentPortal(portal);\r\n  }\r\n\r\n  /** Attach a template portal as content to this snack bar container. */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    this._assertNotAttached();\r\n    this._applySnackBarClasses();\r\n    return this._portalOutlet.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Handle end of animations, updating the state of the snackbar. */\r\n  onAnimationEnd(event: AnimationEvent) {\r\n    const {fromState, toState} = event;\r\n\r\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\r\n      this._completeExit();\r\n    }\r\n\r\n    if (toState === 'visible') {\r\n      // Note: we shouldn't use `this` inside the zone callback,\r\n      // because it can cause a memory leak.\r\n      const onEnter = this._onEnter;\r\n\r\n      this._ngZone.run(() => {\r\n        onEnter.next();\r\n        onEnter.complete();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Begin animation of snack bar entrance into view. */\r\n  enter(): void {\r\n    if (!this._destroyed) {\r\n      this._animationState = 'visible';\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Begin animation of the snack bar exiting from view. */\r\n  exit(): Observable<void> {\r\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\r\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\r\n    // `MatSnackBar.open`).\r\n    this._animationState = 'hidden';\r\n    return this._onExit;\r\n  }\r\n\r\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\r\n  ngOnDestroy() {\r\n    this._destroyed = true;\r\n    this._completeExit();\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to settle before removing the element. Helps prevent\r\n   * errors where we end up removing an element which is in the middle of an animation.\r\n   */\r\n  private _completeExit() {\r\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\r\n      this._onExit.next();\r\n      this._onExit.complete();\r\n    });\r\n  }\r\n\r\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\r\n  private _applySnackBarClasses() {\r\n    const element: HTMLElement = this._elementRef.nativeElement;\r\n    const panelClasses = this.snackBarConfig.panelClass;\r\n\r\n    if (panelClasses) {\r\n      if (Array.isArray(panelClasses)) {\r\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\r\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\r\n      } else {\r\n        element.classList.add(panelClasses);\r\n      }\r\n    }\r\n\r\n    if (this.snackBarConfig.horizontalPosition === 'center') {\r\n      element.classList.add('mat-snack-bar-center');\r\n    }\r\n\r\n    if (this.snackBarConfig.verticalPosition === 'top') {\r\n      element.classList.add('mat-snack-bar-top');\r\n    }\r\n  }\r\n\r\n  /** Asserts that no content is already attached to the container. */\r\n  private _assertNotAttached() {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throw Error('Attempting to attach snack bar content after content is already attached');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    OverlayModule,\r\n    PortalModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [MatSnackBarContainer, MatCommonModule],\r\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\r\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\r\n})\r\nexport class MatSnackBarModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBarConfig","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","apply","MatSnackBarRef","containerInstance","_overlayRef","_this","_afterDismissed","Subject","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","politeness","announcementMessage","data","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","defineProperty","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","matSnackBarAnimations","snackBarState","trigger","state","style","transform","opacity","transition","animate","MatSnackBarContainer","_super","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_role","tslib_1.__extends","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter_1","run","enter","detectChanges","ngOnDestroy","onMicrotaskEmpty","pipe","take","element","nativeElement","panelClasses","panelClass","isArray","forEach","cssClass","classList","add","hasAttached","Error","animations","[attr.role]","[@state]","(@state.done)","ChangeDetectorRef","propDecorators","MatSnackBarModule","NgModule","imports","OverlayModule","PortalModule","CommonModule","MatButtonModule","MatCommonModule","exports","declarations","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","value","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","TemplateRef","TemplatePortal","$implicit","_createInjector","undefined","contentRef","observe","Breakpoints","Handset","takeUntil","detachments","matches","overlayElement","remove","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","decorators","Optional","SkipSelf","Inject"],"mappings":"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"}