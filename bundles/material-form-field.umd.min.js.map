{"version":3,"file":"material-form-field.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/form-field/form-field-errors.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldPlaceholderConflictError(): Error {\r\n  return Error('Placeholder attribute and child element were both specified.');\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\r\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldMissingControlError(): Error {\r\n  return Error('mat-form-field must contain a MatFormFieldControl.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Single error message to be shown underneath the form field. */\r\n@Directive({\r\n  selector: 'mat-error',\r\n  host: {\r\n    'class': 'mat-error',\r\n    'role': 'alert',\r\n    '[attr.id]': 'id',\r\n  }\r\n})\r\nexport class MatError {\r\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the MatFormField.\r\n * @docs-private\r\n */\r\nexport const matFormFieldAnimations: {\r\n  readonly transitionMessages: AnimationTriggerMetadata\r\n} = {\r\n  /** Animation that transitions the form field's error and hint messages. */\r\n  transitionMessages: trigger('transitionMessages', [\r\n    // TODO(mmalerba): Use angular animations for label animation as well.\r\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\r\n    transition('void => enter', [\r\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\r\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\r\n    ]),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {NgControl} from '@angular/forms';\r\n\r\n\r\n/** An interface which allows a control to work inside of a `MatFormField`. */\r\nexport abstract class MatFormFieldControl<T> {\r\n  /** The value of the control. */\r\n  value: T | null;\r\n\r\n  /**\r\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\r\n   * needs to run change detection.\r\n   */\r\n  readonly stateChanges: Observable<void>;\r\n\r\n  /** The element ID for this control. */\r\n  readonly id: string;\r\n\r\n  /** The placeholder for this control. */\r\n  readonly placeholder: string;\r\n\r\n  /** Gets the NgControl for this control. */\r\n  readonly ngControl: NgControl | null;\r\n\r\n  /** Whether the control is focused. */\r\n  readonly focused: boolean;\r\n\r\n  /** Whether the control is empty. */\r\n  readonly empty: boolean;\r\n\r\n  /** Whether the `MatFormField` label should try to float. */\r\n  readonly shouldLabelFloat: boolean;\r\n\r\n  /** Whether the control is required. */\r\n  readonly required: boolean;\r\n\r\n  /** Whether the control is disabled. */\r\n  readonly disabled: boolean;\r\n\r\n  /** Whether the control is in an error state. */\r\n  readonly errorState: boolean;\r\n\r\n  /**\r\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\r\n   * based on their control type. The form field will add a class,\r\n   * `mat-form-field-type-{{controlType}}` to its root element.\r\n   */\r\n  readonly controlType?: string;\r\n\r\n  /**\r\n   * Whether the input is currently in an autofilled state. If property is not present on the\r\n   * control it is assumed to be false.\r\n   */\r\n  readonly autofilled?: boolean;\r\n\r\n  /** Sets the list of element IDs that currently describe this control. */\r\n  abstract setDescribedByIds(ids: string[]): void;\r\n\r\n  /** Handles a click on the control's container. */\r\n  abstract onContainerClick(event: MouseEvent): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Hint text to be shown underneath the form field control. */\r\n@Directive({\r\n  selector: 'mat-hint',\r\n  host: {\r\n    'class': 'mat-hint',\r\n    '[class.mat-right]': 'align == \"end\"',\r\n    '[attr.id]': 'id',\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n  }\r\n})\r\nexport class MatHint {\r\n  /** Whether to align the hint label at the start or end of the line. */\r\n  @Input() align: 'start' | 'end' = 'start';\r\n\r\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\r\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** The floating label for a `mat-form-field`. */\r\n@Directive({\r\n  selector: 'mat-label'\r\n})\r\nexport class MatLabel {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/**\r\n * The placeholder text for an `MatFormField`.\r\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\r\n *     placeholder.\r\n * @breaking-change 8.0.0\r\n */\r\n@Directive({\r\n  selector: 'mat-placeholder'\r\n})\r\nexport class MatPlaceholder {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Prefix to be placed in front of the form field. */\r\n@Directive({\r\n  selector: '[matPrefix]',\r\n})\r\nexport class MatPrefix {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Suffix to be placed at the end of the form field. */\r\n@Directive({\r\n  selector: '[matSuffix]',\r\n})\r\nexport class MatSuffix {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  Optional,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor, CanColorCtor,\r\n  FloatLabelType,\r\n  LabelOptions,\r\n  MAT_LABEL_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n} from '@angular/material/core';\r\nimport {fromEvent, merge, Subject} from 'rxjs';\r\nimport {startWith, take, takeUntil} from 'rxjs/operators';\r\nimport {MatError} from './error';\r\nimport {matFormFieldAnimations} from './form-field-animations';\r\nimport {MatFormFieldControl} from './form-field-control';\r\nimport {\r\n  getMatFormFieldDuplicatedHintError,\r\n  getMatFormFieldMissingControlError,\r\n  getMatFormFieldPlaceholderConflictError,\r\n} from './form-field-errors';\r\nimport {MatHint} from './hint';\r\nimport {MatLabel} from './label';\r\nimport {MatPlaceholder} from './placeholder';\r\nimport {MatPrefix} from './prefix';\r\nimport {MatSuffix} from './suffix';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {NgControl} from '@angular/forms';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\nlet nextUniqueId = 0;\r\nconst floatingLabelScale = 0.75;\r\nconst outlineGapPadding = 5;\r\n\r\n\r\n/**\r\n * Boilerplate for applying mixins to MatFormField.\r\n * @docs-private\r\n */\r\nexport class MatFormFieldBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\n/**\r\n * Base class to which we're applying the form field mixins.\r\n * @docs-private\r\n */\r\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\r\n    mixinColor(MatFormFieldBase, 'primary');\r\n\r\n/** Possible appearance styles for the form field. */\r\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\r\n\r\n/**\r\n * Represents the default options for the form field that can be configured\r\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\r\n */\r\nexport interface MatFormFieldDefaultOptions {\r\n  appearance?: MatFormFieldAppearance;\r\n}\r\n\r\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all form field within an app.\r\n */\r\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\r\n\r\n\r\n/** Container for form controls that applies Material Design styling and behavior. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-form-field',\r\n  exportAs: 'matFormField',\r\n  templateUrl: 'form-field.html',\r\n  // MatInput is a directive and can't have styles, so we need to include its styles here\r\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\r\n  // big deal for people who aren't using MatInput.\r\n  styleUrls: [\r\n    'form-field.css',\r\n    'form-field-fill.css',\r\n    'form-field-input.css',\r\n    'form-field-legacy.css',\r\n    'form-field-outline.css',\r\n    'form-field-standard.css',\r\n  ],\r\n  animations: [matFormFieldAnimations.transitionMessages],\r\n  host: {\r\n    'class': 'mat-form-field',\r\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\r\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\r\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\r\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\r\n    '[class.mat-form-field-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\r\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\r\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\r\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\r\n    '[class.mat-form-field-disabled]': '_control.disabled',\r\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\r\n    '[class.mat-focused]': '_control.focused',\r\n    '[class.mat-accent]': 'color == \"accent\"',\r\n    '[class.mat-warn]': 'color == \"warn\"',\r\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\r\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\r\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\r\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\r\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\r\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\r\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\r\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\r\n  },\r\n  inputs: ['color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\n\r\nexport class MatFormField extends _MatFormFieldMixinBase\r\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\r\n  private _labelOptions: LabelOptions;\r\n\r\n  /**\r\n   * Whether the outline gap needs to be calculated\r\n   * immediately on the next change detection run.\r\n   */\r\n  private _outlineGapCalculationNeededImmediately = false;\r\n\r\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\r\n  private _outlineGapCalculationNeededOnStable = false;\r\n\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** The form-field appearance style. */\r\n  @Input()\r\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\r\n  set appearance(value: MatFormFieldAppearance) {\r\n    const oldValue = this._appearance;\r\n\r\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\r\n\r\n    if (this._appearance === 'outline' && oldValue !== value) {\r\n      this._updateOutlineGapOnStable();\r\n    }\r\n  }\r\n  _appearance: MatFormFieldAppearance;\r\n\r\n  /** Whether the required marker should be hidden. */\r\n  @Input()\r\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\r\n  set hideRequiredMarker(value: boolean) {\r\n    this._hideRequiredMarker = coerceBooleanProperty(value);\r\n  }\r\n  private _hideRequiredMarker: boolean;\r\n\r\n  /** Override for the logic that disables the label animation in certain cases. */\r\n  private _showAlwaysAnimate = false;\r\n\r\n  /** Whether the floating label should always float or not. */\r\n  get _shouldAlwaysFloat(): boolean {\r\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\r\n  }\r\n\r\n  /** Whether the label can float or not. */\r\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\r\n\r\n  /** State of the mat-hint and mat-error animations. */\r\n  _subscriptAnimationState: string = '';\r\n\r\n  /** Text for the form field hint. */\r\n  @Input()\r\n  get hintLabel(): string { return this._hintLabel; }\r\n  set hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._processHints();\r\n  }\r\n  private _hintLabel = '';\r\n\r\n  // Unique id for the hint label.\r\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\r\n\r\n  // Unique id for the internal form field label.\r\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\r\n\r\n  /**\r\n   * Whether the label should always float, never float or float as the user types.\r\n   *\r\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\r\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\r\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\r\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\r\n   */\r\n  @Input()\r\n  get floatLabel(): FloatLabelType {\r\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\r\n  }\r\n  set floatLabel(value: FloatLabelType) {\r\n    if (value !== this._floatLabel) {\r\n      this._floatLabel = value || this._labelOptions.float || 'auto';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _floatLabel: FloatLabelType;\r\n\r\n  /** Whether the Angular animations are enabled. */\r\n  _animationsEnabled: boolean;\r\n\r\n  /**\r\n   * @deprecated\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @ViewChild('underline') underlineRef: ElementRef;\r\n\r\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\r\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\r\n  @ViewChild('label') private _label: ElementRef;\r\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\r\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\r\n  @ContentChild(MatLabel) _labelChild: MatLabel;\r\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\r\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\r\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\r\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\r\n\r\n  constructor(\r\n      public _elementRef: ElementRef,\r\n      private _changeDetectorRef: ChangeDetectorRef,\r\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\r\n      @Optional() private _dir: Directionality,\r\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\r\n          private _defaults: MatFormFieldDefaultOptions,\r\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\r\n      private _platform?: Platform,\r\n      private _ngZone?: NgZone,\r\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\r\n    super(_elementRef);\r\n\r\n    this._labelOptions = labelOptions ? labelOptions : {};\r\n    this.floatLabel = this._labelOptions.float || 'auto';\r\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\r\n\r\n    // Set the default through here so we invoke the setter on the first run.\r\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\r\n  }\r\n\r\n  /**\r\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\r\n   * positioned relative to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._connectionContainerRef || this._elementRef;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._validateControlChild();\r\n\r\n    const control = this._control;\r\n\r\n    if (control.controlType) {\r\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\r\n    }\r\n\r\n    // Subscribe to changes in the child control state in order to update the form field UI.\r\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\r\n      this._validatePlaceholders();\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Run change detection if the value changes.\r\n    if (control.ngControl && control.ngControl.valueChanges) {\r\n      control.ngControl.valueChanges\r\n        .pipe(takeUntil(this._destroyed))\r\n        .subscribe(() => this._changeDetectorRef.markForCheck());\r\n    }\r\n\r\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\r\n    // whether the `ngAfterContentChecked` below is still necessary.\r\n    const zone = this._ngZone;\r\n\r\n    if (zone) {\r\n      // Note that we have to run outside of the `NgZone` explicitly,\r\n      // in order to avoid throwing users into an infinite loop\r\n      // if `zone-patch-rxjs` is included.\r\n      zone.runOutsideAngular(() => {\r\n        zone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n          if (this._outlineGapCalculationNeededOnStable) {\r\n            this.updateOutlineGap();\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    // Run change detection and update the outline if the suffix or prefix changes.\r\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\r\n      this._updateOutlineGapOnStable();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Re-validate when the number of hints changes.\r\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._processHints();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Update the aria-described by when the number of errors changes.\r\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    if (this._dir) {\r\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    this._validateControlChild();\r\n    if (this._outlineGapCalculationNeededImmediately) {\r\n      this.updateOutlineGap();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // Avoid animations on load.\r\n    this._subscriptAnimationState = 'enter';\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\r\n  _shouldForward(prop: keyof NgControl): boolean {\r\n    const ngControl = this._control ? this._control.ngControl : null;\r\n    return ngControl && ngControl[prop];\r\n  }\r\n\r\n  _hasPlaceholder() {\r\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\r\n  }\r\n\r\n  _hasLabel() {\r\n    return !!this._labelChild;\r\n  }\r\n\r\n  _shouldLabelFloat() {\r\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\r\n  }\r\n\r\n  _hideControlPlaceholder() {\r\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\r\n    return this.appearance === 'legacy' && !this._hasLabel() ||\r\n        this._hasLabel() && !this._shouldLabelFloat();\r\n  }\r\n\r\n  _hasFloatingLabel() {\r\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\r\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\r\n  }\r\n\r\n  /** Determines whether to display hints or errors. */\r\n  _getDisplayedMessages(): 'error' | 'hint' {\r\n    return (this._errorChildren && this._errorChildren.length > 0 &&\r\n        this._control.errorState) ? 'error' : 'hint';\r\n  }\r\n\r\n  /** Animates the placeholder up and locks it in position. */\r\n  _animateAndLockLabel(): void {\r\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\r\n      // If animations are disabled, we shouldn't go in here,\r\n      // because the `transitionend` will never fire.\r\n      if (this._animationsEnabled) {\r\n        this._showAlwaysAnimate = true;\r\n\r\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\r\n          this._showAlwaysAnimate = false;\r\n        });\r\n      }\r\n\r\n      this.floatLabel = 'always';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\r\n   * or child element with the `mat-placeholder` directive).\r\n   */\r\n  private _validatePlaceholders() {\r\n    if (this._control.placeholder && this._placeholderChild) {\r\n      throw getMatFormFieldPlaceholderConflictError();\r\n    }\r\n  }\r\n\r\n  /** Does any extra processing that is required when handling the hints. */\r\n  private _processHints() {\r\n    this._validateHints();\r\n    this._syncDescribedByIds();\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\r\n   * attribute being considered as `align=\"start\"`.\r\n   */\r\n  private _validateHints() {\r\n    if (this._hintChildren) {\r\n      let startHint: MatHint;\r\n      let endHint: MatHint;\r\n      this._hintChildren.forEach((hint: MatHint) => {\r\n        if (hint.align === 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw getMatFormFieldDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align === 'end') {\r\n          if (endHint) {\r\n            throw getMatFormFieldDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the list of element IDs that describe the child control. This allows the control to update\r\n   * its `aria-describedby` attribute accordingly.\r\n   */\r\n  private _syncDescribedByIds() {\r\n    if (this._control) {\r\n      let ids: string[] = [];\r\n\r\n      if (this._getDisplayedMessages() === 'hint') {\r\n        const startHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'start') : null;\r\n        const endHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'end') : null;\r\n\r\n        if (startHint) {\r\n          ids.push(startHint.id);\r\n        } else if (this._hintLabel) {\r\n          ids.push(this._hintLabelId);\r\n        }\r\n\r\n        if (endHint) {\r\n          ids.push(endHint.id);\r\n        }\r\n      } else if (this._errorChildren) {\r\n        ids = this._errorChildren.map(error => error.id);\r\n      }\r\n\r\n      this._control.setDescribedByIds(ids);\r\n    }\r\n  }\r\n\r\n  /** Throws an error if the form field's control is missing. */\r\n  protected _validateControlChild() {\r\n    if (!this._control) {\r\n      throw getMatFormFieldMissingControlError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\r\n   * appearance.\r\n   */\r\n  updateOutlineGap() {\r\n    const labelEl = this._label ? this._label.nativeElement : null;\r\n\r\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\r\n        !labelEl.textContent.trim()) {\r\n      return;\r\n    }\r\n\r\n    if (this._platform && !this._platform.isBrowser) {\r\n      // getBoundingClientRect isn't available on the server.\r\n      return;\r\n    }\r\n    // If the element is not present in the DOM, the outline gap will need to be calculated\r\n    // the next time it is checked and in the DOM.\r\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\r\n      this._outlineGapCalculationNeededImmediately = true;\r\n      return;\r\n    }\r\n\r\n    let startWidth = 0;\r\n    let gapWidth = 0;\r\n\r\n    const container = this._connectionContainerRef.nativeElement;\r\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\r\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\r\n\r\n    if (this._label && this._label.nativeElement.children.length) {\r\n      const containerRect = container.getBoundingClientRect();\r\n\r\n      // If the container's width and height are zero, it means that the element is\r\n      // invisible and we can't calculate the outline gap. Mark the element as needing\r\n      // to be checked the next time the zone stabilizes. We can't do this immediately\r\n      // on the next change detection, because even if the element becomes visible,\r\n      // the `ClientRect` won't be reclaculated immediately. We reset the\r\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\r\n      if (containerRect.width === 0 && containerRect.height === 0) {\r\n        this._outlineGapCalculationNeededOnStable = true;\r\n        this._outlineGapCalculationNeededImmediately = false;\r\n        return;\r\n      }\r\n\r\n      const containerStart = this._getStartEnd(containerRect);\r\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\r\n      let labelWidth = 0;\r\n\r\n      for (const child of labelEl.children) {\r\n        labelWidth += child.offsetWidth;\r\n      }\r\n      startWidth = labelStart - containerStart - outlineGapPadding;\r\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\r\n    }\r\n\r\n    for (let i = 0; i < startEls.length; i++) {\r\n      startEls.item(i).style.width = `${startWidth}px`;\r\n    }\r\n    for (let i = 0; i < gapEls.length; i++) {\r\n      gapEls.item(i).style.width = `${gapWidth}px`;\r\n    }\r\n\r\n    this._outlineGapCalculationNeededOnStable =\r\n        this._outlineGapCalculationNeededImmediately = false;\r\n  }\r\n\r\n  /** Gets the start end of the rect considering the current directionality. */\r\n  private _getStartEnd(rect: ClientRect): number {\r\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\r\n  }\r\n\r\n  /**\r\n   * Updates the outline gap the new time the zone stabilizes.\r\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\r\n   */\r\n  private _updateOutlineGapOnStable() {\r\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\r\n    if (this._ngZone) {\r\n      this._outlineGapCalculationNeededOnStable = true;\r\n    } else {\r\n      Promise.resolve().then(() => this.updateOutlineGap());\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {MatError} from './error';\r\nimport {MatFormField} from './form-field';\r\nimport {MatHint} from './hint';\r\nimport {MatLabel} from './label';\r\nimport {MatPlaceholder} from './placeholder';\r\nimport {MatPrefix} from './prefix';\r\nimport {MatSuffix} from './suffix';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MatError,\r\n    MatFormField,\r\n    MatHint,\r\n    MatLabel,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ObserversModule,\r\n  ],\r\n  exports: [\r\n    MatError,\r\n    MatFormField,\r\n    MatHint,\r\n    MatLabel,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n  ],\r\n})\r\nexport class MatFormFieldModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatFormFieldPlaceholderConflictError","Error","getMatFormFieldDuplicatedHintError","align","getMatFormFieldMissingControlError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextUniqueId","MatError","id","type","Directive","args","selector","host","class","role","[attr.id]","Input","matFormFieldAnimations","transitionMessages","trigger","state","style","opacity","transform","transition","animate","MatFormFieldControl","MatHint","[class.mat-right]","[attr.align]","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_elementRef","_MatFormFieldMixinBase","mixinColor","MAT_FORM_FIELD_DEFAULT_OPTIONS","InjectionToken","MatFormField","_super","_changeDetectorRef","labelOptions","_dir","_defaults","_platform","_ngZone","_animationMode","_this","call","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_destroyed","Subject","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelId","_labelOptions","floatLabel","float","_animationsEnabled","appearance","tslib_1.__extends","defineProperty","_appearance","value","oldValue","_updateOutlineGapOnStable","_hideRequiredMarker","coerceBooleanProperty","_processHints","_floatLabel","markForCheck","getConnectedOverlayOrigin","_connectionContainerRef","ngAfterContentInit","_validateControlChild","control","_control","controlType","nativeElement","classList","add","stateChanges","pipe","startWith","subscribe","_validatePlaceholders","_syncDescribedByIds","ngControl","valueChanges","takeUntil","zone","runOutsideAngular","onStable","asObservable","updateOutlineGap","merge","_prefixChildren","changes","_suffixChildren","_hintChildren","_errorChildren","change","ngAfterContentChecked","ngAfterViewInit","detectChanges","ngOnDestroy","next","complete","_shouldForward","prop","_hasPlaceholder","placeholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","length","errorState","_animateAndLockLabel","fromEvent","_label","take","_validateHints","startHint_1","endHint_1","forEach","hint","hintLabel","ids","startHint","find","endHint","push","map","error","setDescribedByIds","labelEl","children","textContent","trim","isBrowser","document","contains","startWidth","gapWidth","container","startEls","querySelectorAll","gapEls","containerRect","getBoundingClientRect","width","height","containerStart","_getStartEnd","labelStart","labelWidth","_i","_a","offsetWidth","outlineGapPadding","i","item","rect","right","left","Promise","resolve","then","Component","exportAs","template","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","[class._mat-animation-noopable]","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ctorParameters","ElementRef","ChangeDetectorRef","undefined","decorators","Optional","Inject","MAT_LABEL_GLOBAL_OPTIONS","Directionality","Platform","propDecorators","hideRequiredMarker","underlineRef","ViewChild","_inputContainerRef","ContentChild","ContentChildren","MatFormFieldModule","NgModule","declarations","imports","CommonModule","ObserversModule","exports"],"mappings":";;;;;;;+hCAuBA,SAAgBA,GAAUC,EAAGC,GAEzB,QAASC,KAAOC,KAAKC,YAAcJ,EADnCK,EAAcL,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,ICjBnF,QAAgBO,KACd,MAAOC,OAAM,gEAIf,QAAgBC,GAAmCC,GACjD,MAAOF,OAAM,4CAA2CE,EAA1D,QAIA,QAAgBC,KACd,MAAOH,OAAM,sDDJf,GAAIL,GAAgB,SAASL,EAAGC,GAI5B,OAHAI,EAAgBE,OAAOO,iBAChBC,uBAA2BC,QAAS,SAAUhB,EAAGC,GAAKD,EAAEe,UAAYd,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIgB,KAAKhB,GAAOA,EAAEiB,eAAeD,KAAIjB,EAAEiB,GAAKhB,EAAEgB,MACpDjB,EAAGC,IETxBkB,EAAe,EAInBC,EAAA,WAAA,QAAAA,KASWjB,KAAXkB,GAAwB,aAAaF,IACrC,sBAVAG,KAACC,EAAAA,UAADC,OACEC,SAAU,YACVC,MACEC,MAAS,YACTC,KAAQ,QACRC,YAAa,4BAIjBR,KAAAC,KAAGQ,EAAAA,SACHV,KCLaW,GAIXC,mBAAoBC,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAASC,EAAAA,OAAQC,QAAS,EAAGC,UAAW,oBAC9CC,EAAAA,WAAW,iBACTH,EAAAA,OAAQC,QAAS,EAAGC,UAAW,sBAC/BE,EAAAA,QAAQ,4DChBd,QAAAC,MAuDA,MAAAA,MCzDIrB,EAAe,EAInBsB,EAAA,WAAA,QAAAA,KAYWtC,KAAXS,MAAoC,QAGzBT,KAAXkB,GAAwB,YAAYF,IACpC,sBAhBAG,KAACC,EAAAA,UAADC,OACEC,SAAU,WACVC,MACEC,MAAS,WACTe,oBAAqB,iBACrBb,YAAa,KAEbc,eAAgB,8BAKpB/B,QAAAU,KAAGQ,EAAAA,QAGHT,KAAAC,KAAGQ,EAAAA,SACHW,KCnBAG,EAAA,WAAA,QAAAA,MAGuB,sBAHvBtB,KAACC,EAAAA,UAADC,OACEC,SAAU,gBAEZmB,KCEAC,EAAA,WAAA,QAAAA,MAG6B,sBAH7BvB,KAACC,EAAAA,UAADC,OACEC,SAAU,sBAEZoB,KCRAC,EAAA,WAAA,QAAAA,MAGwB,sBAHxBxB,KAACC,EAAAA,UAADC,OACEC,SAAU,kBAEZqB,KCHAC,EAAA,WAAA,QAAAA,MAGwB,sBAHxBzB,KAACC,EAAAA,UAADC,OACEC,SAAU,kBAEZsB,KC0CI5B,EAAe,eAUjB,QAAF6B,GAAqBC,GAAA9C,KAArB8C,YAAqBA,EACrB,MAAAD,MAMaE,EACTC,EAAAA,WAAWH,EAAkB,WAiBpBI,EACT,GAAIC,GAAAA,eAA2C,kCAInDC,EAAA,SAAAC,GAyJE,QAAFD,GACaL,EACCO,EACsCC,EAC1BC,EAERC,EAEJC,EACAC,EACmCC,GAV/C,GAAFC,GAWIR,EAXJS,KAAA7D,KAWU8C,IAXV9C,WACa4D,GAAbd,YAAaA,EACCc,EAAdP,mBAAcA,EAEYO,EAA1BL,KAA0BA,EAERK,EAAlBJ,UAAkBA,EAEJI,EAAdH,UAAcA,EACAG,EAAdF,QAAcA,EA3GJE,EAAVE,yCAAoD,EAG1CF,EAAVG,sCAAiD,EAEvCH,EAAVI,WAAuB,GAAIC,GAAAA,QAyBjBL,EAAVM,oBAA+B,EAW7BN,EAAFO,yBAAqC,GAS3BP,EAAVQ,WAAuB,GAGrBR,EAAFS,aAAyB,YAAYrD,IAGnC4C,EAAFU,SAAa,wBAAwBtD,IAuDjC4C,EAAKW,cAAgBjB,MACrBM,EAAKY,WAAaZ,EAAKW,cAAcE,OAAS,OAC9Cb,EAAKc,mBAAwC,mBAAnBf,EAG1BC,EAAKe,WAAcnB,GAAaA,EAAUmB,WAAcnB,EAAUmB,WAAa,WA3BnF,MAjGkCC,GAAlCzB,EAAAC,GAgBEhD,OAAFyE,eACM1B,EADNhD,UAAA,kBAAE,WAC2C,MAAOH,MAAK8E,iBACvD,SAAeC,GACjB,GAAUC,GAAWhF,KAAK8E,WAEtB9E,MAAK8E,YAAcC,GAAU/E,KAAKwD,WAAaxD,KAAKwD,UAAUmB,YAAe,SAEpD,YAArB3E,KAAK8E,aAA6BE,IAAaD,GACjD/E,KAAKiF,6DAMT7E,OAAFyE,eACM1B,EADNhD,UAAA,0BAAE,WACoC,MAAOH,MAAKkF,yBAChD,SAAuBH,GACrB/E,KAAKkF,oBAAsBC,EAAAA,sBAAsBJ,oCAQnD3E,OAAFyE,eAAM1B,EAANhD,UAAA,0BAAE,WACE,MAA2B,WAApBH,KAAKwE,aAA4BxE,KAAKkE,oDAI/C9D,OAAFyE,eAAM1B,EAANhD,UAAA,sBAAE,WAAgC,MAA2B,UAApBH,KAAKwE,4CAM5CpE,OAAFyE,eACM1B,EADNhD,UAAA,iBAAE,WAC0B,MAAOH,MAAKoE,gBACtC,SAAcW,GACZ/E,KAAKoE,WAAaW,EAClB/E,KAAKoF,iDAkBPhF,OAAFyE,eACM1B,EADNhD,UAAA,kBAAE,WAEE,MAA2B,WAApBH,KAAK2E,YAAgD,UAArB3E,KAAKqF,YAA0B,OAASrF,KAAKqF,iBAEtF,SAAeN,GACTA,IAAU/E,KAAKqF,cACjBrF,KAAKqF,YAAcN,GAAS/E,KAAKuE,cAAcE,OAAS,OACxDzE,KAAKqD,mBAAmBiC,iDAkD5BnC,EAAFhD,UAAAoF,0BAAE,WACE,MAAOvF,MAAKwF,yBAA2BxF,KAAK8C,aAG9CK,EAAFhD,UAAAsF,mBAAE,WAAA,GAAF7B,GAAA5D,IACIA,MAAK0F,uBAET,IAAUC,GAAU3F,KAAK4F,QAEjBD,GAAQE,aACV7F,KAAK8C,YAAYgD,cAAcC,UAAUC,IAAI,uBAAuBL,EAAQE,aAI9EF,EAAQM,aAAaC,KAAKC,EAAAA,UAAS,OAAeC,UAAU,WAC1DxC,EAAKyC,wBACLzC,EAAK0C,sBACL1C,EAAKP,mBAAmBiC,iBAItBK,EAAQY,WAAaZ,EAAQY,UAAUC,cACzCb,EAAQY,UAAUC,aACfN,KAAKO,EAAAA,UAAUzG,KAAKgE,aACpBoC,UAAU,WAAM,MAAAxC,GAAKP,mBAAmBiC,gBAKjD,IAAUoB,GAAO1G,KAAK0D,OAEdgD,IAIFA,EAAKC,kBAAkB,WACrBD,EAAKE,SAASC,eAAeX,KAAKO,EAAAA,UAAU7C,EAAKI,aAAaoC,UAAU,WAClExC,EAAKG,sCACPH,EAAKkD,uBAObC,EAAAA,MAAM/G,KAAKgH,gBAAgBC,QAASjH,KAAKkH,gBAAgBD,SAASb,UAAU,WAC1ExC,EAAKqB,4BACLrB,EAAKP,mBAAmBiC,iBAI1BtF,KAAKmH,cAAcF,QAAQf,KAAKC,EAAAA,UAAU,OAAOC,UAAU,WACzDxC,EAAKwB,gBACLxB,EAAKP,mBAAmBiC,iBAI1BtF,KAAKoH,eAAeH,QAAQf,KAAKC,EAAAA,UAAU,OAAOC,UAAU,WAC1DxC,EAAK0C,sBACL1C,EAAKP,mBAAmBiC,iBAGtBtF,KAAKuD,MACPvD,KAAKuD,KAAK8D,OAAOnB,KAAKO,EAAAA,UAAUzG,KAAKgE,aAAaoC,UAAU,WAAM,MAAAxC,GAAKkD,sBAI3E3D,EAAFhD,UAAAmH,sBAAE,WACEtH,KAAK0F,wBACD1F,KAAK8D,yCACP9D,KAAK8G,oBAIT3D,EAAFhD,UAAAoH,gBAAE,WAEEvH,KAAKmE,yBAA2B,QAChCnE,KAAKqD,mBAAmBmE,iBAG1BrE,EAAFhD,UAAAsH,YAAE,WACEzH,KAAKgE,WAAW0D,OAChB1H,KAAKgE,WAAW2D,YAIlBxE,EAAFhD,UAAAyH,eAAE,SAAeC,GACjB,GAAUtB,GAAYvG,KAAK4F,SAAW5F,KAAK4F,SAASW,UAAY,IAC5D,OAAOA,IAAaA,EAAUsB,IAGhC1E,EAAFhD,UAAA2H,gBAAE,WACE,SAAU9H,KAAK4F,UAAY5F,KAAK4F,SAASmC,aAAe/H,KAAKgI,oBAG/D7E,EAAFhD,UAAA8H,UAAE,WACE,QAASjI,KAAKkI,aAGhB/E,EAAFhD,UAAAgI,kBAAE,WACE,MAAOnI,MAAKoI,iBAAmBpI,KAAK4F,SAASyC,kBAAoBrI,KAAKsI,qBAGxEnF,EAAFhD,UAAAoI,wBAAE,WAEE,MAA2B,WAApBvI,KAAK2E,aAA4B3E,KAAKiI,aACzCjI,KAAKiI,cAAgBjI,KAAKmI,qBAGhChF,EAAFhD,UAAAqI,kBAAE,WAEE,MAAOxI,MAAKiI,aAAmC,WAApBjI,KAAK2E,YAA2B3E,KAAK8H,mBAIlE3E,EAAFhD,UAAAsI,sBAAE,WACE,MAAQzI,MAAKoH,gBAAkBpH,KAAKoH,eAAesB,OAAS,GACxD1I,KAAK4F,SAAS+C,WAAc,QAAU,QAI5CxF,EAAFhD,UAAAyI,qBAAE,WAAA,GAAFhF,GAAA5D,IACQA,MAAKwI,qBAAuBxI,KAAKoI,iBAG/BpI,KAAK0E,qBACP1E,KAAKkE,oBAAqB,EAE1B2E,EAAAA,UAAU7I,KAAK8I,OAAOhD,cAAe,iBAAiBI,KAAK6C,EAAAA,KAAK,IAAI3C,UAAU,WAC5ExC,EAAKM,oBAAqB,KAI9BlE,KAAKwE,WAAa,SAClBxE,KAAKqD,mBAAmBiC,iBAQpBnC,EAAVhD,UAAAkG,sBAAE,WACE,GAAIrG,KAAK4F,SAASmC,aAAe/H,KAAKgI,kBACpC,KAAM1H,MAKF6C,EAAVhD,UAAAiF,cAAE,WACEpF,KAAKgJ,iBACLhJ,KAAKsG,uBAOCnD,EAAVhD,UAAA6I,eAAE,WAAA,GAAFpF,GAAA5D,IACI,IAAIA,KAAKmH,cAAe,CAC5B,GAAU8B,GACAC,CACJlJ,MAAKmH,cAAcgC,QAAQ,SAACC,GAC1B,GAAmB,UAAfA,EAAK3I,MAAmB,CAC1B,GAAIwI,GAAarF,EAAKyF,UACpB,KAAM7I,GAAmC,QAE3CyI,GAAYG,MACP,IAAmB,QAAfA,EAAK3I,MAAiB,CAC/B,GAAIyI,EACF,KAAM1I,GAAmC,MAE3C0I,GAAUE,OAUVjG,EAAVhD,UAAAmG,oBAAE,WACE,GAAItG,KAAK4F,SAAU,CACvB,GAAU0D,KAEJ,IAAqC,SAAjCtJ,KAAKyI,wBAAoC,CACnD,GAAcc,GAAYvJ,KAAKmH,cACnBnH,KAAKmH,cAAcqC,KAAK,SAAAJ,GAAQ,MAAe,UAAfA,EAAK3I,QAAqB,KACxDgJ,EAAUzJ,KAAKmH,cACjBnH,KAAKmH,cAAcqC,KAAK,SAAAJ,GAAQ,MAAe,QAAfA,EAAK3I,QAAmB,IAExD8I,GACFD,EAAII,KAAKH,EAAUrI,IACVlB,KAAKoE,YACdkF,EAAII,KAAK1J,KAAKqE,cAGZoF,GACFH,EAAII,KAAKD,EAAQvI,QAEVlB,MAAKoH,iBACdkC,EAAMtJ,KAAKoH,eAAeuC,IAAI,SAAAC,GAAS,MAAAA,GAAM1I,KAG/ClB,MAAK4F,SAASiE,kBAAkBP,KAK1BnG,EAAZhD,UAAAuF,sBAAE,WACE,IAAK1F,KAAK4F,SACR,KAAMlF,MAQVyC,EAAFhD,UAAA2G,iBAAE,WACF,GAAUgD,GAAU9J,KAAK8I,OAAS9I,KAAK8I,OAAOhD,cAAgB,IAE1D,IAAwB,YAApB9F,KAAK2E,YAA6BmF,GAAYA,EAAQC,SAASrB,QAC9DoB,EAAQE,YAAYC,UAIrBjK,KAAKyD,WAAczD,KAAKyD,UAAUyG,WAAtC,CAMA,IAAKC,SAAwB,gBAAEC,SAASpK,KAAK8C,YAAYgD,eAEvD,YADA9F,KAAK8D,yCAA0C,EAIrD,IAAQuG,GAAa,EACbC,EAAW,EAETC,EAAYvK,KAAKwF,wBAAwBM,cACzC0E,EAAWD,EAAUE,iBAAiB,iCACtCC,EAASH,EAAUE,iBAAiB,8BAE1C,IAAIzK,KAAK8I,QAAU9I,KAAK8I,OAAOhD,cAAciE,SAASrB,OAAQ,CAClE,GAAYiC,GAAgBJ,EAAUK,uBAQhC,IAA4B,IAAxBD,EAAcE,OAAwC,IAAzBF,EAAcG,OAG7C,MAFA9K,MAAK+D,sCAAuC,OAC5C/D,KAAK8D,yCAA0C,EAQjD,KAAoB,GAJdiH,GAAiB/K,KAAKgL,aAAaL,GACnCM,EAAajL,KAAKgL,aAAalB,EAAQC,SAAS,GAAGa,yBACrDM,EAAa,EAEvBC,EAAA,EAA0BC,EAAAtB,EAAQC,SAARoB,EAA1BC,EAAA1C,OAA0ByC,IAAkB,CACpCD,GADRE,EAAAD,GAC4BE,YAEtBhB,EAAaY,EAAaF,EApeN,EAqepBT,EAAWY,EAAa,EAteH,IAseOA,EAAkCI,GAAwB,EAGxF,IAAK,GAAIC,GAAI,EAAGA,EAAIf,EAAS9B,OAAQ6C,IACnCf,EAASgB,KAAKD,GAAGvJ,MAAM6I,MAAWR,EAAxC,IAEI,KAAK,GAAIkB,GAAI,EAAGA,EAAIb,EAAOhC,OAAQ6C,IACjCb,EAAOc,KAAKD,GAAGvJ,MAAM6I,MAAWP,EAAtC,IAGItK,MAAK+D,qCACD/D,KAAK8D,yCAA0C,IAI7CX,EAAVhD,UAAA6K,aAAE,SAAqBS,GACnB,MAAOzL,MAAKuD,MAA4B,QAApBvD,KAAKuD,KAAKwB,MAAkB0G,EAAKC,MAAQD,EAAKE,MAO5DxI,EAAVhD,UAAA8E,0BAAE,WAAA,GAAFrB,GAAA5D,IAEQA,MAAK0D,QACP1D,KAAK+D,sCAAuC,EAE5C6H,QAAQC,UAAUC,KAAK,WAAM,MAAAlI,GAAKkD,qCA3dxC3F,KAAC4K,EAAAA,UAAD1K,OAAAC,SAAA,iBACE0K,SAAU,eACVC,SAAU,6xgBAMV1K,MACEC,MAAJ,iBACI0K,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,mCAAN,sBACIC,0CAAJ,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACIC,qBAAJ,oBACIC,mBAAJ,kBACIC,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,4BACIC,kCAAJ,uBAEAC,QAAA,SACAC,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA3K,EAAA4K,eAAA,WAAA,QACA5M,KAAA6M,EAAAA,aACA7M,KAAA8M,EAAAA,oBACA9M,SAAA+M,GAAAC,aAAAhN,KAAAiN,EAAAA,WAAAjN,KAAAkN,EAAAA,OAAAhN,MAAAiN,EAAAA,8BACAnN,KAAAoN,EAAAA,eAAAJ,aAAAhN,KAAmCiN,EAAAA,aACnCjN,SAAA+M,GAAAC,aAAAhN,KAAAiN,EAAAA,WAAAjN,KAAAkN,EAAAA,OAAAhN,MAAA4B,OACA9B,KAAAqN,EAAAA,wHA3HArL,EAAAsL,gBAJA9J,aAAAxD,KAAAQ,EAAAA,QA8OA+M,qBAAAvN,KAAAQ,EAAAA,QArPA0H,YAAAlI,KAAAQ,EAAAA,QAuPA6C,aAAArD,KAAAQ,EAAAA,QA3MAgN,eAAAxN,KAAAyN,EAAAA,UAAAvN,MAAA,eA7BAmE,0BAAArE,KAAAyN,EAAAA,UAAAvN,MAAA,yBA6OAwN,qBAAA1N,KAAAyN,EAAAA,UAAAvN,MAAA,yGApGA2G,oBAAA7G,KAAA2N,EAAAA,aAAAzN,MAAAqB,KAcAwF,cAAA/G,KAAA2N,EAAAA,aAAAzN,MAAAoB,KAsBA2E,iBAAAjG,KAAQ4N,EAAAA,gBAAR1N,MAAAJ,KAsBAkG,gBAAAhG,KAAA4N,EAAAA,gBAAA1N,MAAAiB,KAmBA0E,kBAAA7F,KAAA4N,EAAAA,gBAAA1N,MAAAsB,KAEAuE,kBAAA/F,KAAA4N,EAAAA,gBAAY1N,MAAZuB,MAEAO,GACAJ,GC9NAiM,EAAA,WAAA,QAAAA,MAwBiC,sBAxBjC7N,KAAC8N,EAAAA,SAAD5N,OACE6N,cACEjO,EACAkC,EACAb,EACAG,EACAC,EACAC,EACAC,GAEFuM,SACEC,EAAAA,aACAC,EAAAA,iBAEFC,SACErO,EACAkC,EACAb,EACAG,EACAC,EACAC,EACAC,OAGJoM"}