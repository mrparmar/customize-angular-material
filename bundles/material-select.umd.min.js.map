{"version":3,"file":"material-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/select/select-errors.ts","../../src/lib/select/select.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\r\n * after initialization.\r\n * @docs-private\r\n */\r\nexport function getMatSelectDynamicMultipleError(): Error {\r\n  return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\r\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\r\n * resetting the value.\r\n * @docs-private\r\n */\r\nexport function getMatSelectNonArrayValueError(): Error {\r\n  return Error('Value must be an array in multiple-selection mode.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when assigning a non-function value to the comparator\r\n * used to determine if a value corresponds to an option. Note that whether the function\r\n * actually takes two values and returns a boolean is not checked.\r\n */\r\nexport function getMatSelectNonFunctionValueError(): Error {\r\n  return Error('`compareWith` must be a function.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {\r\n  A,\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n  SPACE,\r\n  UP_ARROW,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  isDevMode,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Self,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {\r\n  _countGroupLabelsBeforeOption,\r\n  _getOptionScrollPosition,\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  CanUpdateErrorState,\r\n  CanUpdateErrorStateCtor,\r\n  ErrorStateMatcher,\r\n  HasTabIndex,\r\n  HasTabIndexCtor,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  MatOptgroup,\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinErrorState,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\r\nimport {defer, merge, Observable, Subject} from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  startWith,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n} from 'rxjs/operators';\r\nimport {matSelectAnimations} from './select-animations';\r\nimport {\r\n  getMatSelectDynamicMultipleError,\r\n  getMatSelectNonArrayValueError,\r\n  getMatSelectNonFunctionValueError,\r\n} from './select-errors';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the alignment of the selected option over\r\n * the trigger element.\r\n */\r\n\r\n/** The max height of the select's overlay panel */\r\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\r\n\r\n/** The panel's padding on the x-axis */\r\nexport const SELECT_PANEL_PADDING_X = 16;\r\n\r\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\r\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\r\n\r\n/** The height of the select items in `em` units. */\r\nexport const SELECT_ITEM_HEIGHT_EM = 3;\r\n\r\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\r\n/**\r\n * Distance between the panel edge and the option text in\r\n * multi-selection mode.\r\n *\r\n * Calculated as:\r\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\r\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\r\n * The checkbox width is 16px.\r\n */\r\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\r\n\r\n/**\r\n * The select panel will only \"fit\" inside the viewport if it is positioned at\r\n * this value or more away from the viewport boundary.\r\n */\r\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\r\n\r\n/** Injection token that determines the scroll handling while a select is open. */\r\nexport const MAT_SELECT_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_SELECT_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n/** Change event object that is emitted when the select value has changed. */\r\nexport class MatSelectChange {\r\n  constructor(\r\n    /** Reference to the select that emitted the change event. */\r\n    public source: MatSelect,\r\n    /** Current value of the select that emitted the event. */\r\n    public value: any) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSelect.\r\n/** @docs-private */\r\nexport class MatSelectBase {\r\n  constructor(public _elementRef: ElementRef,\r\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatSelectMixinBase:\r\n    CanDisableCtor &\r\n    HasTabIndexCtor &\r\n    CanDisableRippleCtor &\r\n    CanUpdateErrorStateCtor &\r\n    typeof MatSelectBase =\r\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\r\n\r\n\r\n/**\r\n * Allows the user to customize the trigger that is displayed when the select has a value.\r\n */\r\n@Directive({\r\n  selector: 'mat-select-trigger'\r\n})\r\nexport class MatSelectTrigger {}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-select',\r\n  exportAs: 'matSelect',\r\n  templateUrl: 'select.html',\r\n  styleUrls: ['select.css'],\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'role': 'listbox',\r\n    '[attr.id]': 'id',\r\n    '[attr.tabindex]': 'tabIndex',\r\n    '[attr.aria-label]': '_getAriaLabel()',\r\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\r\n    '[class.mat-select-disabled]': 'disabled',\r\n    '[class.mat-select-invalid]': 'errorState',\r\n    '[class.mat-select-required]': 'required',\r\n    '[class.mat-select-empty]': 'empty',\r\n    'class': 'mat-select',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n  },\r\n  animations: [\r\n    matSelectAnimations.transformPanelWrap,\r\n    matSelectAnimations.transformPanel\r\n  ],\r\n  providers: [\r\n    {provide: MatFormFieldControl, useExisting: MatSelect},\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\r\n  ],\r\n})\r\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\r\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\r\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\r\n  private _scrollStrategyFactory: () => ScrollStrategy;\r\n\r\n  /** Whether or not the overlay panel is open. */\r\n  private _panelOpen = false;\r\n\r\n  /** Whether filling out the select is required in the form. */\r\n  private _required: boolean = false;\r\n\r\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\r\n  private _scrollTop = 0;\r\n\r\n  /** The placeholder displayed in the trigger of the select. */\r\n  private _placeholder: string;\r\n\r\n  /** Whether the component is in multiple selection mode. */\r\n  private _multiple: boolean = false;\r\n\r\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  /** Unique id for this input. */\r\n  private _uid = `mat-select-${nextUniqueId++}`;\r\n\r\n  /** Emits whenever the component is destroyed. */\r\n  private readonly _destroy = new Subject<void>();\r\n\r\n  /** The last measured value for the trigger's client bounding rect. */\r\n  _triggerRect: ClientRect;\r\n\r\n  /** The aria-describedby attribute on the select for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** The cached font-size of the trigger element. */\r\n  _triggerFontSize = 0;\r\n\r\n  /** Deals with the selection logic. */\r\n  _selectionModel: SelectionModel<MatOption>;\r\n\r\n  /** Manages keyboard events for options in the panel. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when select has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The IDs of child options to be passed to the aria-owns attribute. */\r\n  _optionIds: string = '';\r\n\r\n  /** The value of the select panel's transform-origin property. */\r\n  _transformOrigin: string = 'top';\r\n\r\n  /** Emits when the panel element is finished transforming in. */\r\n  _panelDoneAnimatingStream = new Subject<string>();\r\n\r\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\r\n  _scrollStrategy: ScrollStrategy;\r\n\r\n  /**\r\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\r\n   * This must be adjusted to align the selected option text over the trigger text.\r\n   * when the panel opens. Will change based on the y-position of the selected option.\r\n   */\r\n  _offsetY = 0;\r\n\r\n  /**\r\n   * This position config ensures that the top \"start\" corner of the overlay\r\n   * is aligned with with the top \"start\" of the origin by default (overlapping\r\n   * the trigger completely). If the panel cannot fit below the trigger, it\r\n   * will fall back to a position above the trigger.\r\n   */\r\n  _positions = [\r\n    {\r\n      originX: 'start',\r\n      originY: 'top',\r\n      overlayX: 'start',\r\n      overlayY: 'top',\r\n    },\r\n    {\r\n      originX: 'start',\r\n      originY: 'bottom',\r\n      overlayX: 'start',\r\n      overlayY: 'bottom',\r\n    },\r\n  ];\r\n\r\n  /** Whether the component is disabling centering of the active option over the trigger. */\r\n  private _disableOptionCentering: boolean = false;\r\n\r\n  /** Whether the select is focused. */\r\n  get focused(): boolean {\r\n    return this._focused || this._panelOpen;\r\n  }\r\n  /**\r\n   * @deprecated Setter to be removed as this property is intended to be readonly.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  set focused(value: boolean) {\r\n    this._focused = value;\r\n  }\r\n  private _focused = false;\r\n\r\n  /** A name for this control that can be used by `mat-form-field`. */\r\n  controlType = 'mat-select';\r\n\r\n  /** Trigger that opens the select. */\r\n  @ViewChild('trigger') trigger: ElementRef;\r\n\r\n  /** Panel containing the select options. */\r\n  @ViewChild('panel') panel: ElementRef;\r\n\r\n  /** Overlay pane containing the options. */\r\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\r\n\r\n  /** All of the defined select options. */\r\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\r\n\r\n  /** All of the defined groups of options. */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\r\n\r\n  /** User-supplied override of the trigger element. */\r\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\r\n\r\n  /** Placeholder to be shown if no value has been selected. */\r\n  @Input()\r\n  get placeholder(): string { return this._placeholder; }\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether the component is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether the user should be allowed to select multiple options. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    if (this._selectionModel) {\r\n      throw getMatSelectDynamicMultipleError();\r\n    }\r\n\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether to center the active option over the trigger. */\r\n  @Input()\r\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\r\n  set disableOptionCentering(value: boolean) {\r\n    this._disableOptionCentering = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /**\r\n   * Function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  @Input()\r\n  get compareWith() { return this._compareWith; }\r\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    if (typeof fn !== 'function') {\r\n      throw getMatSelectNonFunctionValueError();\r\n    }\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\r\n\r\n  /** Value of the select control. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (newValue !== this._value) {\r\n      this.writeValue(newValue);\r\n      this._value = newValue;\r\n    }\r\n  }\r\n  private _value: any;\r\n\r\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** Object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /**\r\n   * Function used to sort the values in a select in multiple mode.\r\n   * Follows the same logic as `Array.prototype.sort`.\r\n   */\r\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\r\n\r\n  /** Unique id of the element. */\r\n  @Input()\r\n  get id(): string { return this._id; }\r\n  set id(value: string) {\r\n    this._id = value || this._uid;\r\n    this.stateChanges.next();\r\n  }\r\n  private _id: string;\r\n\r\n  /** Combined stream of all of the child options' change events. */\r\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.options) {\r\n      return merge(...this.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    return this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\r\n  });\r\n\r\n  /** Event emitted when the select panel has been toggled. */\r\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted when the select has been opened. */\r\n  @Output('opened') readonly _openedStream: Observable<void> =\r\n      this.openedChange.pipe(filter(o => o), map(() => {}));\r\n\r\n  /** Event emitted when the select has been closed. */\r\n  @Output('closed') readonly _closedStream: Observable<void> =\r\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\r\n\r\n   /** Event emitted when the selected value has been changed by the user. */\r\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\r\n      new EventEmitter<MatSelectChange>();\r\n\r\n  /**\r\n   * Event that emits whenever the raw value of the select changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor(\r\n    private _viewportRuler: ViewportRuler,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _ngZone: NgZone,\r\n    _defaultErrorStateMatcher: ErrorStateMatcher,\r\n    elementRef: ElementRef,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() _parentForm: NgForm,\r\n    @Optional() _parentFormGroup: FormGroupDirective,\r\n    @Optional() private _parentFormField: MatFormField,\r\n    @Self() @Optional() public ngControl: NgControl,\r\n    @Attribute('tabindex') tabIndex: string,\r\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\r\n    /**\r\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    private _liveAnnouncer?: LiveAnnouncer) {\r\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\r\n          _parentFormGroup, ngControl);\r\n\r\n    if (this.ngControl) {\r\n      // Note: we provide the value accessor through here, instead of\r\n      // the `providers` to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n\r\n    this._scrollStrategyFactory = scrollStrategyFactory;\r\n    this._scrollStrategy = this._scrollStrategyFactory();\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\r\n    this.stateChanges.next();\r\n\r\n    // We need `distinctUntilChanged` here, because some browsers will\r\n    // fire the animation end event twice for the same animation. See:\r\n    // https://github.com/angular/angular/issues/24084\r\n    this._panelDoneAnimatingStream\r\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\r\n      .subscribe(() => {\r\n        if (this.panelOpen) {\r\n          this._scrollTop = 0;\r\n          this.openedChange.emit(true);\r\n        } else {\r\n          this.openedChange.emit(false);\r\n          this.overlayDir.offsetX = 0;\r\n          this._changeDetectorRef.markForCheck();\r\n        }\r\n      });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._initKeyManager();\r\n\r\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\r\n      event.added.forEach(option => option.select());\r\n      event.removed.forEach(option => option.deselect());\r\n    });\r\n\r\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\r\n      this._resetOptions();\r\n      this._initializeSelection();\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\r\n    // the parent form field know to run change detection when the disabled state changes.\r\n    if (changes['disabled']) {\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroy.next();\r\n    this._destroy.complete();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  /** Toggles the overlay panel open or closed. */\r\n  toggle(): void {\r\n    this.panelOpen ? this.close() : this.open();\r\n  }\r\n\r\n  /** Opens the overlay panel. */\r\n  open(): void {\r\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\r\n      return;\r\n    }\r\n\r\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\r\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\r\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\r\n\r\n    this._panelOpen = true;\r\n    this._keyManager.withHorizontalOrientation(null);\r\n    this._calculateOverlayPosition();\r\n    this._highlightCorrectOption();\r\n    this._changeDetectorRef.markForCheck();\r\n\r\n    // Set the font size on the panel element once it exists.\r\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\r\n          this.overlayDir.overlayRef.overlayElement) {\r\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Closes the overlay panel and focuses the host element. */\r\n  close(): void {\r\n    if (this._panelOpen) {\r\n      this._panelOpen = false;\r\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\r\n      this._changeDetectorRef.markForCheck();\r\n      this._onTouched();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the select's value. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param value New value to be written to the model.\r\n   */\r\n  writeValue(value: any): void {\r\n    if (this.options) {\r\n      this._setSelectionByValue(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the select's value\r\n   * changes from user input. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the value changes.\r\n   */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the select is blurred\r\n   * by the user. Part of the ControlValueAccessor interface required\r\n   * to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the component has been touched.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Disables the select. Part of the ControlValueAccessor interface required\r\n   * to integrate with Angular's core forms API.\r\n   *\r\n   * @param isDisabled Sets whether the component is disabled.\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether or not the overlay panel is open. */\r\n  get panelOpen(): boolean {\r\n    return this._panelOpen;\r\n  }\r\n\r\n  /** The currently selected option. */\r\n  get selected(): MatOption | MatOption[] {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\r\n\r\n  /** The value displayed in the trigger. */\r\n  get triggerValue(): string {\r\n    if (this.empty) {\r\n      return '';\r\n    }\r\n\r\n    if (this._multiple) {\r\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\r\n\r\n      if (this._isRtl()) {\r\n        selectedOptions.reverse();\r\n      }\r\n\r\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\r\n      return selectedOptions.join(', ');\r\n    }\r\n\r\n    return this._selectionModel.selected[0].viewValue;\r\n  }\r\n\r\n  /** Whether the element is in RTL mode. */\r\n  _isRtl(): boolean {\r\n    return this._dir ? this._dir.value === 'rtl' : false;\r\n  }\r\n\r\n  /** Handles all keydown events on the select. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (!this.disabled) {\r\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\r\n    }\r\n  }\r\n\r\n  /** Handles keyboard events while the select is closed. */\r\n  private _handleClosedKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\r\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\r\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\r\n    const manager = this._keyManager;\r\n\r\n    // Open the select on ALT + arrow key to match the native <select>\r\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\r\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\r\n      this.open();\r\n    } else if (!this.multiple) {\r\n      const selectedOption = this.selected;\r\n\r\n      if (keyCode === HOME || keyCode === END) {\r\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n        event.preventDefault();\r\n      } else {\r\n        manager.onKeydown(event);\r\n      }\r\n\r\n      // Since the value has changed, we need to announce it ourselves.\r\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\r\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\r\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Handles keyboard events when the selected is open. */\r\n  private _handleOpenKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\r\n    const manager = this._keyManager;\r\n\r\n    if (keyCode === HOME || keyCode === END) {\r\n      event.preventDefault();\r\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n    } else if (isArrowKey && event.altKey) {\r\n      // Close the select on ALT + arrow key to match the native <select>\r\n      event.preventDefault();\r\n      this.close();\r\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\r\n      !hasModifierKey(event)) {\r\n      event.preventDefault();\r\n      manager.activeItem._selectViaInteraction();\r\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\r\n      event.preventDefault();\r\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\r\n\r\n      this.options.forEach(option => {\r\n        if (!option.disabled) {\r\n          hasDeselectedOptions ? option.select() : option.deselect();\r\n        }\r\n      });\r\n    } else {\r\n      const previouslyFocusedIndex = manager.activeItemIndex;\r\n\r\n      manager.onKeydown(event);\r\n\r\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\r\n          manager.activeItemIndex !== previouslyFocusedIndex) {\r\n        manager.activeItem._selectViaInteraction();\r\n      }\r\n    }\r\n  }\r\n\r\n  _onFocus() {\r\n    if (!this.disabled) {\r\n      this._focused = true;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\n   * \"blur\" to the panel when it opens, causing a false positive.\r\n   */\r\n  _onBlur() {\r\n    this._focused = false;\r\n\r\n    if (!this.disabled && !this.panelOpen) {\r\n      this._onTouched();\r\n      this._changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback that is invoked when the overlay panel has been attached.\r\n   */\r\n  _onAttached(): void {\r\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\r\n      this._setPseudoCheckboxPaddingSize();\r\n      this._changeDetectorRef.detectChanges();\r\n      this._calculateOverlayOffsetX();\r\n      this.panel.nativeElement.scrollTop = this._scrollTop;\r\n    });\r\n  }\r\n\r\n  /** Returns the theme to be used on the panel. */\r\n  _getPanelTheme(): string {\r\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\r\n  }\r\n\r\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\r\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\r\n  private _setPseudoCheckboxPaddingSize() {\r\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\r\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\r\n      if (pseudoCheckbox) {\r\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Whether the select has a value. */\r\n  get empty(): boolean {\r\n    return !this._selectionModel || this._selectionModel.isEmpty();\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the selected option based on a value. If no option can be\r\n   * found with the designated value, the select trigger is cleared.\r\n   */\r\n  private _setSelectionByValue(value: any | any[]): void {\r\n    if (this.multiple && value) {\r\n      if (!Array.isArray(value)) {\r\n        throw getMatSelectNonArrayValueError();\r\n      }\r\n\r\n      this._selectionModel.clear();\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\r\n      this._sortValues();\r\n    } else {\r\n      this._selectionModel.clear();\r\n      const correspondingOption = this._selectValue(value);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what option the user interacted with last.\r\n      if (correspondingOption) {\r\n        this._keyManager.setActiveItem(correspondingOption);\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Finds and selects and option based on its value.\r\n   * @returns Option that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any): MatOption | undefined {\r\n    const correspondingOption = this.options.find((option: MatOption) => {\r\n      try {\r\n        // Treat null as a special reset value.\r\n        return option.value != null && this._compareWith(option.value,  value);\r\n      } catch (error) {\r\n        if (isDevMode()) {\r\n          // Notify developers of errors in their comparator.\r\n          console.warn(error);\r\n        }\r\n        return false;\r\n      }\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      this._selectionModel.select(correspondingOption);\r\n    }\r\n\r\n    return correspondingOption;\r\n  }\r\n\r\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\r\n  private _initKeyManager() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\r\n      .withTypeAhead()\r\n      .withVerticalOrientation()\r\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\r\n      .withAllowedModifierKeys(['shiftKey']);\r\n\r\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n      // Restore focus to the trigger before closing. Ensures that the focus\r\n      // position won't be lost if the user got focus into the overlay.\r\n      this.focus();\r\n      this.close();\r\n    });\r\n\r\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n      if (this._panelOpen && this.panel) {\r\n        this._scrollActiveOptionIntoView();\r\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\r\n        this._keyManager.activeItem._selectViaInteraction();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Drops current option subscriptions and IDs and resets from scratch. */\r\n  private _resetOptions(): void {\r\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\r\n\r\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\r\n      this._onSelect(event.source, event.isUserInput);\r\n\r\n      if (event.isUserInput && this._panelOpen) {\r\n        this.close();\r\n        this.focus();\r\n      }\r\n    });\r\n\r\n    // Listen to changes in the internal state of the options and react accordingly.\r\n    // Handles cases like the labels of the selected options changing.\r\n    merge(...this.options.map(option => option._stateChanges))\r\n      .pipe(takeUntil(changedOrDestroyed))\r\n      .subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n        this.stateChanges.next();\r\n      });\r\n\r\n    this._setOptionIds();\r\n  }\r\n\r\n  /** Invoked when an option is clicked. */\r\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\r\n    const wasSelected = this._selectionModel.isSelected(option);\r\n\r\n    if (option.value == null && !this._multiple) {\r\n      option.deselect();\r\n      this._selectionModel.clear();\r\n      this._propagateChanges(option.value);\r\n    } else {\r\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\r\n\r\n      if (isUserInput) {\r\n        this._keyManager.setActiveItem(option);\r\n      }\r\n\r\n      if (this.multiple) {\r\n        this._sortValues();\r\n\r\n        if (isUserInput) {\r\n          // In case the user selected the option with their mouse, we\r\n          // want to restore focus back to the trigger, in order to\r\n          // prevent the select keyboard controls from clashing with\r\n          // the ones from `mat-option`.\r\n          this.focus();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\r\n      this._propagateChanges();\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Sorts the selected values in the selected based on their order in the panel. */\r\n  private _sortValues() {\r\n    if (this.multiple) {\r\n      const options = this.options.toArray();\r\n\r\n      this._selectionModel.sort((a, b) => {\r\n        return this.sortComparator ? this.sortComparator(a, b, options) :\r\n                                     options.indexOf(a) - options.indexOf(b);\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Emits change event to set the model value. */\r\n  private _propagateChanges(fallbackValue?: any): void {\r\n    let valueToEmit: any = null;\r\n\r\n    if (this.multiple) {\r\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\r\n    } else {\r\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\r\n    }\r\n\r\n    this._value = valueToEmit;\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Records option IDs to pass to the aria-owns property. */\r\n  private _setOptionIds() {\r\n    this._optionIds = this.options.map(option => option.id).join(' ');\r\n  }\r\n\r\n  /**\r\n   * Highlights the selected item. If no option is selected, it will highlight\r\n   * the first item instead.\r\n   */\r\n  private _highlightCorrectOption(): void {\r\n    if (this._keyManager) {\r\n      if (this.empty) {\r\n        this._keyManager.setFirstItemActive();\r\n      } else {\r\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Scrolls the active option into view. */\r\n  private _scrollActiveOptionIntoView(): void {\r\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\r\n        this.optionGroups);\r\n\r\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\r\n      activeOptionIndex + labelCount,\r\n      this._getItemHeight(),\r\n      this.panel.nativeElement.scrollTop,\r\n      SELECT_PANEL_MAX_HEIGHT\r\n    );\r\n  }\r\n\r\n  /** Focuses the select element. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  /** Gets the index of the provided option in the option list. */\r\n  private _getOptionIndex(option: MatOption): number | undefined {\r\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\r\n      return result === undefined ? (option === current ? index : undefined) : result;\r\n    }, undefined);\r\n  }\r\n\r\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\r\n  private _calculateOverlayPosition(): void {\r\n    const itemHeight = this._getItemHeight();\r\n    const items = this._getItemCount();\r\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const scrollContainerHeight = items * itemHeight;\r\n\r\n    // The farthest the panel can be scrolled before it hits the bottom\r\n    const maxScroll = scrollContainerHeight - panelHeight;\r\n\r\n    // If no value is selected we open the popup to the first item.\r\n    let selectedOptionOffset =\r\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\r\n\r\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\r\n        this.optionGroups);\r\n\r\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\r\n    // center of the overlay panel rather than the top.\r\n    const scrollBuffer = panelHeight / 2;\r\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\r\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\r\n\r\n    this._checkOverlayWithinViewport(maxScroll);\r\n  }\r\n\r\n  /**\r\n   * Calculates the scroll position of the select's overlay panel.\r\n   *\r\n   * Attempts to center the selected option in the panel. If the option is\r\n   * too high or too low in the panel to be scrolled to the center, it clamps the\r\n   * scroll position to the min or max scroll positions respectively.\r\n   */\r\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\r\n                          maxScroll: number): number {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\r\n    const halfOptionHeight = itemHeight / 2;\r\n\r\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\r\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\r\n    // the center of the overlay panel. Half the option height must be re-added to the\r\n    // scrollTop so the option is centered based on its middle, not its top edge.\r\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\r\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\r\n  }\r\n\r\n  /** Returns the aria-label of the select component. */\r\n  _getAriaLabel(): string | null {\r\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\r\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\r\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\r\n  }\r\n\r\n  /** Returns the aria-labelledby of the select component. */\r\n  _getAriaLabelledby(): string | null {\r\n    if (this.ariaLabelledby) {\r\n      return this.ariaLabelledby;\r\n    }\r\n\r\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\r\n    // computed label. `this.ariaLabel` is only the user-specified label.\r\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\r\n      this._getAriaLabel()) {\r\n      return null;\r\n    }\r\n\r\n    return this._parentFormField._labelId || null;\r\n  }\r\n\r\n  /** Determines the `aria-activedescendant` to be set on the host. */\r\n  _getAriaActiveDescendant(): string | null {\r\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\r\n      return this._keyManager.activeItem.id;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\r\n   * This must be adjusted to align the selected option text over the trigger text when\r\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\r\n   * can't be calculated until the panel has been attached, because we need to know the\r\n   * content width in order to constrain the panel within the viewport.\r\n   */\r\n  private _calculateOverlayOffsetX(): void {\r\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\r\n    const viewportSize = this._viewportRuler.getViewportSize();\r\n    const isRtl = this._isRtl();\r\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\r\n                                         SELECT_PANEL_PADDING_X * 2;\r\n    let offsetX: number;\r\n\r\n    // Adjust the offset, depending on the option padding.\r\n    if (this.multiple) {\r\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\r\n    } else {\r\n      let selected = this._selectionModel.selected[0] || this.options.first;\r\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\r\n    }\r\n\r\n    // Invert the offset in LTR.\r\n    if (!isRtl) {\r\n      offsetX *= -1;\r\n    }\r\n\r\n    // Determine how much the select overflows on each side.\r\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\r\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\r\n                          + (isRtl ? 0 : paddingWidth);\r\n\r\n    // If the element overflows on either side, reduce the offset to allow it to fit.\r\n    if (leftOverflow > 0) {\r\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    } else if (rightOverflow > 0) {\r\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    }\r\n\r\n    // Set the offset directly in order to avoid having to go through change detection and\r\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\r\n    // blurry content in some browsers.\r\n    this.overlayDir.offsetX = Math.round(offsetX);\r\n    this.overlayDir.overlayRef.updatePosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the y-offset of the select's overlay panel in relation to the\r\n   * top start corner of the trigger. It has to be adjusted in order for the\r\n   * selected option to be aligned over the trigger when the panel opens.\r\n   */\r\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\r\n                                  maxScroll: number): number {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\r\n    let optionOffsetFromPanelTop: number;\r\n\r\n    // Disable offset if requested by user by returning 0 as value to offset\r\n    if (this._disableOptionCentering) {\r\n      return 0;\r\n    }\r\n\r\n    if (this._scrollTop === 0) {\r\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\r\n    } else if (this._scrollTop === maxScroll) {\r\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\r\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\r\n\r\n      // The first item is partially out of the viewport. Therefore we need to calculate what\r\n      // portion of it is shown in the viewport and account for it in our offset.\r\n      let partialItemHeight =\r\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\r\n\r\n      // Because the panel height is longer than the height of the options alone,\r\n      // there is always extra padding at the top or bottom of the panel. When\r\n      // scrolled to the very bottom, this padding is at the top of the panel and\r\n      // must be added to the offset.\r\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\r\n    } else {\r\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\r\n      // its offset will be the scroll buffer minus the half height that was added to\r\n      // center it.\r\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\r\n    }\r\n\r\n    // The final offset is the option's offset from the top, adjusted for the height difference,\r\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\r\n    // The value is rounded to prevent some browsers from blurring the content.\r\n    return Math.round(optionOffsetFromPanelTop  - optionOffsetFromPanelTop +optionHeightAdjustment);\r\n  }\r\n\r\n  /**\r\n   * Checks that the attempted overlay position will fit within the viewport.\r\n   * If it will not fit, tries to adjust the scroll position and the associated\r\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\r\n   * sets the offset back to 0 to allow the fallback position to take over.\r\n   */\r\n  private _checkOverlayWithinViewport(maxScroll: number): void {\r\n    const itemHeight = this._getItemHeight();\r\n    const viewportSize = this._viewportRuler.getViewportSize();\r\n\r\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\r\n    const bottomSpaceAvailable =\r\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\r\n\r\n    const panelHeightTop = Math.abs(this._offsetY);\r\n    const totalPanelHeight =\r\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\r\n\r\n    if (panelHeightBottom > bottomSpaceAvailable) {\r\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\r\n    } else if (panelHeightTop > topSpaceAvailable) {\r\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\r\n    } else {\r\n      this._transformOrigin = this._getOriginBasedOnOption();\r\n    }\r\n  }\r\n\r\n  /** Adjusts the overlay panel up to fit in the viewport. */\r\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\r\n\r\n    // Scrolls the panel up by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel up into the viewport.\r\n    this._scrollTop -= distanceBelowViewport;\r\n    this._offsetY -= distanceBelowViewport - this._triggerRect.height - 20;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\r\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\r\n    // effect.\r\n    if (this._scrollTop <= 0) {\r\n      this._scrollTop = 0;\r\n      this._offsetY = - this._triggerRect.height - 20;\r\n      this._transformOrigin = `50% bottom 0px`;\r\n    }\r\n  }\r\n\r\n  /** Adjusts the overlay panel down to fit in the viewport. */\r\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\r\n                           maxScroll: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\r\n\r\n    // Scrolls the panel down by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel down into the viewport.\r\n    this._scrollTop += distanceAboveViewport;\r\n    this._offsetY += distanceAboveViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\r\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\r\n    // to take effect.\r\n    if (this._scrollTop >= maxScroll) {\r\n      this._scrollTop = maxScroll;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% top 0px`;\r\n      return;\r\n    }\r\n  }\r\n\r\n  /** Sets the transform origin point based on the selected option. */\r\n  private _getOriginBasedOnOption(): string {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\r\n    return `50% ${originY}px 0px`;\r\n  }\r\n\r\n  /** Calculates the amount of items in the select. This includes options and group labels. */\r\n  private _getItemCount(): number {\r\n    return this.options.length + this.optionGroups.length;\r\n  }\r\n\r\n  /** Calculates the height of the select's options. */\r\n  private _getItemHeight(): number {\r\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) {\r\n    this._ariaDescribedby = ids.join(' ');\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick() {\r\n    this.focus();\r\n    this.open();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean {\r\n    return this._panelOpen || !this.empty;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  animate,\r\n  animateChild,\r\n  AnimationTriggerMetadata,\r\n  query,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * The following are all the animations for the mat-select component, with each\r\n * const containing the metadata for one animation.\r\n *\r\n * The values below match the implementation of the AngularJS Material mat-select animation.\r\n * @docs-private\r\n */\r\nexport const matSelectAnimations: {\r\n  readonly transformPanelWrap: AnimationTriggerMetadata;\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n  readonly fadeInContent: AnimationTriggerMetadata;\r\n} = {\r\n  /**\r\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\r\n   * closing the select.\r\n   * This is needed due to https://github.com/angular/angular/issues/23302\r\n   */\r\n  transformPanelWrap: trigger('transformPanelWrap', [\r\n      transition('* => void', query('@transformPanel', [animateChild()],\r\n          {optional: true}))\r\n  ]),\r\n\r\n  /**\r\n   * This animation transforms the select's overlay panel on and off the page.\r\n   *\r\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\r\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\r\n   * side to ensure the option text correctly overlaps the trigger text.\r\n   *\r\n   * When the panel is removed from the DOM, it simply fades out linearly.\r\n   */\r\n  transformPanel: trigger('transformPanel', [\r\n    state('void', style({\r\n      transform: 'scaleY(0.8)',\r\n      minWidth: '100%',\r\n      opacity: 0\r\n    })),\r\n    state('showing', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    state('showing-multiple', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\r\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\r\n  ]),\r\n\r\n  /**\r\n   * This animation fades in the background color and text content of the\r\n   * select's options. It is time delayed to occur 100ms after the overlay\r\n   * panel has transformed in.\r\n   * @deprecated Not used anymore. To be removed.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  fadeInContent: trigger('fadeInContent', [\r\n    state('showing', style({opacity: 1})),\r\n    transition('void => showing', [\r\n      style({opacity: 0}),\r\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n    ])\r\n  ])\r\n};\r\n\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const transformPanel = matSelectAnimations.transformPanel;\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const fadeInContent = matSelectAnimations.fadeInContent;\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MatOptionModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\r\n  declarations: [MatSelect, MatSelectTrigger],\r\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\r\n})\r\nexport class MatSelectModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","transform","minWidth","opacity","animate","fadeInContent","nextUniqueId","exports","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","MatSelectTrigger","type","Directive","args","selector","MatSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","ngOnInit","SelectionModel","multiple","distinctUntilChanged","takeUntil","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","ngAfterContentInit","_initKeyManager","onChange","event","added","forEach","select","removed","deselect","changes","startWith","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","fontSize","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","hasModifierKey","altKey","preventDefault","selectedOption","HOME","END","setFirstItemActive","setLastItemActive","onKeydown","announce","activeItem","A","ctrlKey","hasDeselectedOptions_1","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","SELECT_PANEL_PADDING_X","offsetWidth","isEmpty","Promise","resolve","then","isArray","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","isDevMode","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","focus","change","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","toArray","sort","a","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","reduce","result","current","index","undefined","itemHeight","items","_getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","_getAriaLabel","ariaLabelledby","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","class","(keydown)","(focus)","(blur)","animations","providers","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","NgZone","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","MatFormField","NgControl","Self","String","Attribute","Inject","LiveAnnouncer","propDecorators","ViewChild","CdkConnectedOverlay","ContentChildren","MatOption","descendants","MatOptgroup","panelClass","Input","customTrigger","ContentChild","required","disableOptionCentering","compareWith","errorStateMatcher","Output","MatSelectModule","NgModule","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","MatFormFieldModule","declarations"],"mappings":"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"}