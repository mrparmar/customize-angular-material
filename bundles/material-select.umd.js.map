{"version":3,"file":"material-select.umd.js","sources":["../../src/lib/select/select-module.ts","../../src/lib/select/select.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/select-animations.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MatOptionModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\r\n  declarations: [MatSelect, MatSelectTrigger],\r\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\r\n})\r\nexport class MatSelectModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {\r\n  A,\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n  SPACE,\r\n  UP_ARROW,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  isDevMode,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Self,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {\r\n  _countGroupLabelsBeforeOption,\r\n  _getOptionScrollPosition,\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  CanUpdateErrorState,\r\n  CanUpdateErrorStateCtor,\r\n  ErrorStateMatcher,\r\n  HasTabIndex,\r\n  HasTabIndexCtor,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  MatOptgroup,\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinErrorState,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\r\nimport {defer, merge, Observable, Subject} from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  startWith,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n} from 'rxjs/operators';\r\nimport {matSelectAnimations} from './select-animations';\r\nimport {\r\n  getMatSelectDynamicMultipleError,\r\n  getMatSelectNonArrayValueError,\r\n  getMatSelectNonFunctionValueError,\r\n} from './select-errors';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the alignment of the selected option over\r\n * the trigger element.\r\n */\r\n\r\n/** The max height of the select's overlay panel */\r\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\r\n\r\n/** The panel's padding on the x-axis */\r\nexport const SELECT_PANEL_PADDING_X = 16;\r\n\r\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\r\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\r\n\r\n/** The height of the select items in `em` units. */\r\nexport const SELECT_ITEM_HEIGHT_EM = 3;\r\n\r\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\r\n/**\r\n * Distance between the panel edge and the option text in\r\n * multi-selection mode.\r\n *\r\n * Calculated as:\r\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\r\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\r\n * The checkbox width is 16px.\r\n */\r\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\r\n\r\n/**\r\n * The select panel will only \"fit\" inside the viewport if it is positioned at\r\n * this value or more away from the viewport boundary.\r\n */\r\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\r\n\r\n/** Injection token that determines the scroll handling while a select is open. */\r\nexport const MAT_SELECT_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_SELECT_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n/** Change event object that is emitted when the select value has changed. */\r\nexport class MatSelectChange {\r\n  constructor(\r\n    /** Reference to the select that emitted the change event. */\r\n    public source: MatSelect,\r\n    /** Current value of the select that emitted the event. */\r\n    public value: any) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSelect.\r\n/** @docs-private */\r\nexport class MatSelectBase {\r\n  constructor(public _elementRef: ElementRef,\r\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatSelectMixinBase:\r\n    CanDisableCtor &\r\n    HasTabIndexCtor &\r\n    CanDisableRippleCtor &\r\n    CanUpdateErrorStateCtor &\r\n    typeof MatSelectBase =\r\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\r\n\r\n\r\n/**\r\n * Allows the user to customize the trigger that is displayed when the select has a value.\r\n */\r\n@Directive({\r\n  selector: 'mat-select-trigger'\r\n})\r\nexport class MatSelectTrigger {}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-select',\r\n  exportAs: 'matSelect',\r\n  templateUrl: 'select.html',\r\n  styleUrls: ['select.css'],\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'role': 'listbox',\r\n    '[attr.id]': 'id',\r\n    '[attr.tabindex]': 'tabIndex',\r\n    '[attr.aria-label]': '_getAriaLabel()',\r\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\r\n    '[class.mat-select-disabled]': 'disabled',\r\n    '[class.mat-select-invalid]': 'errorState',\r\n    '[class.mat-select-required]': 'required',\r\n    '[class.mat-select-empty]': 'empty',\r\n    'class': 'mat-select',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n  },\r\n  animations: [\r\n    matSelectAnimations.transformPanelWrap,\r\n    matSelectAnimations.transformPanel\r\n  ],\r\n  providers: [\r\n    {provide: MatFormFieldControl, useExisting: MatSelect},\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\r\n  ],\r\n})\r\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\r\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\r\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\r\n  private _scrollStrategyFactory: () => ScrollStrategy;\r\n\r\n  /** Whether or not the overlay panel is open. */\r\n  private _panelOpen = false;\r\n\r\n  /** Whether filling out the select is required in the form. */\r\n  private _required: boolean = false;\r\n\r\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\r\n  private _scrollTop = 0;\r\n\r\n  /** The placeholder displayed in the trigger of the select. */\r\n  private _placeholder: string;\r\n\r\n  /** Whether the component is in multiple selection mode. */\r\n  private _multiple: boolean = false;\r\n\r\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  /** Unique id for this input. */\r\n  private _uid = `mat-select-${nextUniqueId++}`;\r\n\r\n  /** Emits whenever the component is destroyed. */\r\n  private readonly _destroy = new Subject<void>();\r\n\r\n  /** The last measured value for the trigger's client bounding rect. */\r\n  _triggerRect: ClientRect;\r\n\r\n  /** The aria-describedby attribute on the select for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** The cached font-size of the trigger element. */\r\n  _triggerFontSize = 0;\r\n\r\n  /** Deals with the selection logic. */\r\n  _selectionModel: SelectionModel<MatOption>;\r\n\r\n  /** Manages keyboard events for options in the panel. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when select has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The IDs of child options to be passed to the aria-owns attribute. */\r\n  _optionIds: string = '';\r\n\r\n  /** The value of the select panel's transform-origin property. */\r\n  _transformOrigin: string = 'top';\r\n\r\n  /** Emits when the panel element is finished transforming in. */\r\n  _panelDoneAnimatingStream = new Subject<string>();\r\n\r\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\r\n  _scrollStrategy: ScrollStrategy;\r\n\r\n  /**\r\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\r\n   * This must be adjusted to align the selected option text over the trigger text.\r\n   * when the panel opens. Will change based on the y-position of the selected option.\r\n   */\r\n  _offsetY = 0;\r\n\r\n  /**\r\n   * This position config ensures that the top \"start\" corner of the overlay\r\n   * is aligned with with the top \"start\" of the origin by default (overlapping\r\n   * the trigger completely). If the panel cannot fit below the trigger, it\r\n   * will fall back to a position above the trigger.\r\n   */\r\n  _positions = [\r\n    {\r\n      originX: 'start',\r\n      originY: 'top',\r\n      overlayX: 'start',\r\n      overlayY: 'top',\r\n    },\r\n    {\r\n      originX: 'start',\r\n      originY: 'bottom',\r\n      overlayX: 'start',\r\n      overlayY: 'bottom',\r\n    },\r\n  ];\r\n\r\n  /** Whether the component is disabling centering of the active option over the trigger. */\r\n  private _disableOptionCentering: boolean = false;\r\n\r\n  /** Whether the select is focused. */\r\n  get focused(): boolean {\r\n    return this._focused || this._panelOpen;\r\n  }\r\n  /**\r\n   * @deprecated Setter to be removed as this property is intended to be readonly.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  set focused(value: boolean) {\r\n    this._focused = value;\r\n  }\r\n  private _focused = false;\r\n\r\n  /** A name for this control that can be used by `mat-form-field`. */\r\n  controlType = 'mat-select';\r\n\r\n  /** Trigger that opens the select. */\r\n  @ViewChild('trigger') trigger: ElementRef;\r\n\r\n  /** Panel containing the select options. */\r\n  @ViewChild('panel') panel: ElementRef;\r\n\r\n  /** Overlay pane containing the options. */\r\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\r\n\r\n  /** All of the defined select options. */\r\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\r\n\r\n  /** All of the defined groups of options. */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\r\n\r\n  /** User-supplied override of the trigger element. */\r\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\r\n\r\n  /** Placeholder to be shown if no value has been selected. */\r\n  @Input()\r\n  get placeholder(): string { return this._placeholder; }\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether the component is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether the user should be allowed to select multiple options. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    if (this._selectionModel) {\r\n      throw getMatSelectDynamicMultipleError();\r\n    }\r\n\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether to center the active option over the trigger. */\r\n  @Input()\r\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\r\n  set disableOptionCentering(value: boolean) {\r\n    this._disableOptionCentering = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /**\r\n   * Function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  @Input()\r\n  get compareWith() { return this._compareWith; }\r\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    if (typeof fn !== 'function') {\r\n      throw getMatSelectNonFunctionValueError();\r\n    }\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\r\n\r\n  /** Value of the select control. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (newValue !== this._value) {\r\n      this.writeValue(newValue);\r\n      this._value = newValue;\r\n    }\r\n  }\r\n  private _value: any;\r\n\r\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** Object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /**\r\n   * Function used to sort the values in a select in multiple mode.\r\n   * Follows the same logic as `Array.prototype.sort`.\r\n   */\r\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\r\n\r\n  /** Unique id of the element. */\r\n  @Input()\r\n  get id(): string { return this._id; }\r\n  set id(value: string) {\r\n    this._id = value || this._uid;\r\n    this.stateChanges.next();\r\n  }\r\n  private _id: string;\r\n\r\n  /** Combined stream of all of the child options' change events. */\r\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.options) {\r\n      return merge(...this.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    return this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\r\n  });\r\n\r\n  /** Event emitted when the select panel has been toggled. */\r\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted when the select has been opened. */\r\n  @Output('opened') readonly _openedStream: Observable<void> =\r\n      this.openedChange.pipe(filter(o => o), map(() => {}));\r\n\r\n  /** Event emitted when the select has been closed. */\r\n  @Output('closed') readonly _closedStream: Observable<void> =\r\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\r\n\r\n   /** Event emitted when the selected value has been changed by the user. */\r\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\r\n      new EventEmitter<MatSelectChange>();\r\n\r\n  /**\r\n   * Event that emits whenever the raw value of the select changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor(\r\n    private _viewportRuler: ViewportRuler,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _ngZone: NgZone,\r\n    _defaultErrorStateMatcher: ErrorStateMatcher,\r\n    elementRef: ElementRef,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() _parentForm: NgForm,\r\n    @Optional() _parentFormGroup: FormGroupDirective,\r\n    @Optional() private _parentFormField: MatFormField,\r\n    @Self() @Optional() public ngControl: NgControl,\r\n    @Attribute('tabindex') tabIndex: string,\r\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\r\n    /**\r\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    private _liveAnnouncer?: LiveAnnouncer) {\r\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\r\n          _parentFormGroup, ngControl);\r\n\r\n    if (this.ngControl) {\r\n      // Note: we provide the value accessor through here, instead of\r\n      // the `providers` to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n\r\n    this._scrollStrategyFactory = scrollStrategyFactory;\r\n    this._scrollStrategy = this._scrollStrategyFactory();\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\r\n    this.stateChanges.next();\r\n\r\n    // We need `distinctUntilChanged` here, because some browsers will\r\n    // fire the animation end event twice for the same animation. See:\r\n    // https://github.com/angular/angular/issues/24084\r\n    this._panelDoneAnimatingStream\r\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\r\n      .subscribe(() => {\r\n        if (this.panelOpen) {\r\n          this._scrollTop = 0;\r\n          this.openedChange.emit(true);\r\n        } else {\r\n          this.openedChange.emit(false);\r\n          this.overlayDir.offsetX = 0;\r\n          this._changeDetectorRef.markForCheck();\r\n        }\r\n      });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._initKeyManager();\r\n\r\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\r\n      event.added.forEach(option => option.select());\r\n      event.removed.forEach(option => option.deselect());\r\n    });\r\n\r\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\r\n      this._resetOptions();\r\n      this._initializeSelection();\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\r\n    // the parent form field know to run change detection when the disabled state changes.\r\n    if (changes['disabled']) {\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroy.next();\r\n    this._destroy.complete();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  /** Toggles the overlay panel open or closed. */\r\n  toggle(): void {\r\n    this.panelOpen ? this.close() : this.open();\r\n  }\r\n\r\n  /** Opens the overlay panel. */\r\n  open(): void {\r\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\r\n      return;\r\n    }\r\n\r\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\r\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\r\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\r\n\r\n    this._panelOpen = true;\r\n    this._keyManager.withHorizontalOrientation(null);\r\n    this._calculateOverlayPosition();\r\n    this._highlightCorrectOption();\r\n    this._changeDetectorRef.markForCheck();\r\n\r\n    // Set the font size on the panel element once it exists.\r\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\r\n          this.overlayDir.overlayRef.overlayElement) {\r\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Closes the overlay panel and focuses the host element. */\r\n  close(): void {\r\n    if (this._panelOpen) {\r\n      this._panelOpen = false;\r\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\r\n      this._changeDetectorRef.markForCheck();\r\n      this._onTouched();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the select's value. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param value New value to be written to the model.\r\n   */\r\n  writeValue(value: any): void {\r\n    if (this.options) {\r\n      this._setSelectionByValue(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the select's value\r\n   * changes from user input. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the value changes.\r\n   */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the select is blurred\r\n   * by the user. Part of the ControlValueAccessor interface required\r\n   * to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the component has been touched.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Disables the select. Part of the ControlValueAccessor interface required\r\n   * to integrate with Angular's core forms API.\r\n   *\r\n   * @param isDisabled Sets whether the component is disabled.\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether or not the overlay panel is open. */\r\n  get panelOpen(): boolean {\r\n    return this._panelOpen;\r\n  }\r\n\r\n  /** The currently selected option. */\r\n  get selected(): MatOption | MatOption[] {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\r\n\r\n  /** The value displayed in the trigger. */\r\n  get triggerValue(): string {\r\n    if (this.empty) {\r\n      return '';\r\n    }\r\n\r\n    if (this._multiple) {\r\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\r\n\r\n      if (this._isRtl()) {\r\n        selectedOptions.reverse();\r\n      }\r\n\r\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\r\n      return selectedOptions.join(', ');\r\n    }\r\n\r\n    return this._selectionModel.selected[0].viewValue;\r\n  }\r\n\r\n  /** Whether the element is in RTL mode. */\r\n  _isRtl(): boolean {\r\n    return this._dir ? this._dir.value === 'rtl' : false;\r\n  }\r\n\r\n  /** Handles all keydown events on the select. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (!this.disabled) {\r\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\r\n    }\r\n  }\r\n\r\n  /** Handles keyboard events while the select is closed. */\r\n  private _handleClosedKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\r\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\r\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\r\n    const manager = this._keyManager;\r\n\r\n    // Open the select on ALT + arrow key to match the native <select>\r\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\r\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\r\n      this.open();\r\n    } else if (!this.multiple) {\r\n      const selectedOption = this.selected;\r\n\r\n      if (keyCode === HOME || keyCode === END) {\r\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n        event.preventDefault();\r\n      } else {\r\n        manager.onKeydown(event);\r\n      }\r\n\r\n      // Since the value has changed, we need to announce it ourselves.\r\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\r\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\r\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Handles keyboard events when the selected is open. */\r\n  private _handleOpenKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\r\n    const manager = this._keyManager;\r\n\r\n    if (keyCode === HOME || keyCode === END) {\r\n      event.preventDefault();\r\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n    } else if (isArrowKey && event.altKey) {\r\n      // Close the select on ALT + arrow key to match the native <select>\r\n      event.preventDefault();\r\n      this.close();\r\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\r\n      !hasModifierKey(event)) {\r\n      event.preventDefault();\r\n      manager.activeItem._selectViaInteraction();\r\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\r\n      event.preventDefault();\r\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\r\n\r\n      this.options.forEach(option => {\r\n        if (!option.disabled) {\r\n          hasDeselectedOptions ? option.select() : option.deselect();\r\n        }\r\n      });\r\n    } else {\r\n      const previouslyFocusedIndex = manager.activeItemIndex;\r\n\r\n      manager.onKeydown(event);\r\n\r\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\r\n          manager.activeItemIndex !== previouslyFocusedIndex) {\r\n        manager.activeItem._selectViaInteraction();\r\n      }\r\n    }\r\n  }\r\n\r\n  _onFocus() {\r\n    if (!this.disabled) {\r\n      this._focused = true;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\n   * \"blur\" to the panel when it opens, causing a false positive.\r\n   */\r\n  _onBlur() {\r\n    this._focused = false;\r\n\r\n    if (!this.disabled && !this.panelOpen) {\r\n      this._onTouched();\r\n      this._changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback that is invoked when the overlay panel has been attached.\r\n   */\r\n  _onAttached(): void {\r\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\r\n      this._setPseudoCheckboxPaddingSize();\r\n      this._changeDetectorRef.detectChanges();\r\n      this._calculateOverlayOffsetX();\r\n      this.panel.nativeElement.scrollTop = this._scrollTop;\r\n    });\r\n  }\r\n\r\n  /** Returns the theme to be used on the panel. */\r\n  _getPanelTheme(): string {\r\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\r\n  }\r\n\r\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\r\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\r\n  private _setPseudoCheckboxPaddingSize() {\r\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\r\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\r\n      if (pseudoCheckbox) {\r\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Whether the select has a value. */\r\n  get empty(): boolean {\r\n    return !this._selectionModel || this._selectionModel.isEmpty();\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the selected option based on a value. If no option can be\r\n   * found with the designated value, the select trigger is cleared.\r\n   */\r\n  private _setSelectionByValue(value: any | any[]): void {\r\n    if (this.multiple && value) {\r\n      if (!Array.isArray(value)) {\r\n        throw getMatSelectNonArrayValueError();\r\n      }\r\n\r\n      this._selectionModel.clear();\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\r\n      this._sortValues();\r\n    } else {\r\n      this._selectionModel.clear();\r\n      const correspondingOption = this._selectValue(value);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what option the user interacted with last.\r\n      if (correspondingOption) {\r\n        this._keyManager.setActiveItem(correspondingOption);\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Finds and selects and option based on its value.\r\n   * @returns Option that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any): MatOption | undefined {\r\n    const correspondingOption = this.options.find((option: MatOption) => {\r\n      try {\r\n        // Treat null as a special reset value.\r\n        return option.value != null && this._compareWith(option.value,  value);\r\n      } catch (error) {\r\n        if (isDevMode()) {\r\n          // Notify developers of errors in their comparator.\r\n          console.warn(error);\r\n        }\r\n        return false;\r\n      }\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      this._selectionModel.select(correspondingOption);\r\n    }\r\n\r\n    return correspondingOption;\r\n  }\r\n\r\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\r\n  private _initKeyManager() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\r\n      .withTypeAhead()\r\n      .withVerticalOrientation()\r\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\r\n      .withAllowedModifierKeys(['shiftKey']);\r\n\r\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n      // Restore focus to the trigger before closing. Ensures that the focus\r\n      // position won't be lost if the user got focus into the overlay.\r\n      this.focus();\r\n      this.close();\r\n    });\r\n\r\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n      if (this._panelOpen && this.panel) {\r\n        this._scrollActiveOptionIntoView();\r\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\r\n        this._keyManager.activeItem._selectViaInteraction();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Drops current option subscriptions and IDs and resets from scratch. */\r\n  private _resetOptions(): void {\r\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\r\n\r\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\r\n      this._onSelect(event.source, event.isUserInput);\r\n\r\n      if (event.isUserInput && this._panelOpen) {\r\n        this.close();\r\n        this.focus();\r\n      }\r\n    });\r\n\r\n    // Listen to changes in the internal state of the options and react accordingly.\r\n    // Handles cases like the labels of the selected options changing.\r\n    merge(...this.options.map(option => option._stateChanges))\r\n      .pipe(takeUntil(changedOrDestroyed))\r\n      .subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n        this.stateChanges.next();\r\n      });\r\n\r\n    this._setOptionIds();\r\n  }\r\n\r\n  /** Invoked when an option is clicked. */\r\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\r\n    const wasSelected = this._selectionModel.isSelected(option);\r\n\r\n    if (option.value == null && !this._multiple) {\r\n      option.deselect();\r\n      this._selectionModel.clear();\r\n      this._propagateChanges(option.value);\r\n    } else {\r\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\r\n\r\n      if (isUserInput) {\r\n        this._keyManager.setActiveItem(option);\r\n      }\r\n\r\n      if (this.multiple) {\r\n        this._sortValues();\r\n\r\n        if (isUserInput) {\r\n          // In case the user selected the option with their mouse, we\r\n          // want to restore focus back to the trigger, in order to\r\n          // prevent the select keyboard controls from clashing with\r\n          // the ones from `mat-option`.\r\n          this.focus();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\r\n      this._propagateChanges();\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Sorts the selected values in the selected based on their order in the panel. */\r\n  private _sortValues() {\r\n    if (this.multiple) {\r\n      const options = this.options.toArray();\r\n\r\n      this._selectionModel.sort((a, b) => {\r\n        return this.sortComparator ? this.sortComparator(a, b, options) :\r\n                                     options.indexOf(a) - options.indexOf(b);\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Emits change event to set the model value. */\r\n  private _propagateChanges(fallbackValue?: any): void {\r\n    let valueToEmit: any = null;\r\n\r\n    if (this.multiple) {\r\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\r\n    } else {\r\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\r\n    }\r\n\r\n    this._value = valueToEmit;\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Records option IDs to pass to the aria-owns property. */\r\n  private _setOptionIds() {\r\n    this._optionIds = this.options.map(option => option.id).join(' ');\r\n  }\r\n\r\n  /**\r\n   * Highlights the selected item. If no option is selected, it will highlight\r\n   * the first item instead.\r\n   */\r\n  private _highlightCorrectOption(): void {\r\n    if (this._keyManager) {\r\n      if (this.empty) {\r\n        this._keyManager.setFirstItemActive();\r\n      } else {\r\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Scrolls the active option into view. */\r\n  private _scrollActiveOptionIntoView(): void {\r\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\r\n        this.optionGroups);\r\n\r\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\r\n      activeOptionIndex + labelCount,\r\n      this._getItemHeight(),\r\n      this.panel.nativeElement.scrollTop,\r\n      SELECT_PANEL_MAX_HEIGHT\r\n    );\r\n  }\r\n\r\n  /** Focuses the select element. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  /** Gets the index of the provided option in the option list. */\r\n  private _getOptionIndex(option: MatOption): number | undefined {\r\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\r\n      return result === undefined ? (option === current ? index : undefined) : result;\r\n    }, undefined);\r\n  }\r\n\r\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\r\n  private _calculateOverlayPosition(): void {\r\n    const itemHeight = this._getItemHeight();\r\n    const items = this._getItemCount();\r\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const scrollContainerHeight = items * itemHeight;\r\n\r\n    // The farthest the panel can be scrolled before it hits the bottom\r\n    const maxScroll = scrollContainerHeight - panelHeight;\r\n\r\n    // If no value is selected we open the popup to the first item.\r\n    let selectedOptionOffset =\r\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\r\n\r\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\r\n        this.optionGroups);\r\n\r\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\r\n    // center of the overlay panel rather than the top.\r\n    const scrollBuffer = panelHeight / 2;\r\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\r\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\r\n\r\n    this._checkOverlayWithinViewport(maxScroll);\r\n  }\r\n\r\n  /**\r\n   * Calculates the scroll position of the select's overlay panel.\r\n   *\r\n   * Attempts to center the selected option in the panel. If the option is\r\n   * too high or too low in the panel to be scrolled to the center, it clamps the\r\n   * scroll position to the min or max scroll positions respectively.\r\n   */\r\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\r\n                          maxScroll: number): number {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\r\n    const halfOptionHeight = itemHeight / 2;\r\n\r\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\r\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\r\n    // the center of the overlay panel. Half the option height must be re-added to the\r\n    // scrollTop so the option is centered based on its middle, not its top edge.\r\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\r\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\r\n  }\r\n\r\n  /** Returns the aria-label of the select component. */\r\n  _getAriaLabel(): string | null {\r\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\r\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\r\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\r\n  }\r\n\r\n  /** Returns the aria-labelledby of the select component. */\r\n  _getAriaLabelledby(): string | null {\r\n    if (this.ariaLabelledby) {\r\n      return this.ariaLabelledby;\r\n    }\r\n\r\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\r\n    // computed label. `this.ariaLabel` is only the user-specified label.\r\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\r\n      this._getAriaLabel()) {\r\n      return null;\r\n    }\r\n\r\n    return this._parentFormField._labelId || null;\r\n  }\r\n\r\n  /** Determines the `aria-activedescendant` to be set on the host. */\r\n  _getAriaActiveDescendant(): string | null {\r\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\r\n      return this._keyManager.activeItem.id;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\r\n   * This must be adjusted to align the selected option text over the trigger text when\r\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\r\n   * can't be calculated until the panel has been attached, because we need to know the\r\n   * content width in order to constrain the panel within the viewport.\r\n   */\r\n  private _calculateOverlayOffsetX(): void {\r\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\r\n    const viewportSize = this._viewportRuler.getViewportSize();\r\n    const isRtl = this._isRtl();\r\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\r\n                                         SELECT_PANEL_PADDING_X * 2;\r\n    let offsetX: number;\r\n\r\n    // Adjust the offset, depending on the option padding.\r\n    if (this.multiple) {\r\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\r\n    } else {\r\n      let selected = this._selectionModel.selected[0] || this.options.first;\r\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\r\n    }\r\n\r\n    // Invert the offset in LTR.\r\n    if (!isRtl) {\r\n      offsetX *= -1;\r\n    }\r\n\r\n    // Determine how much the select overflows on each side.\r\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\r\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\r\n                          + (isRtl ? 0 : paddingWidth);\r\n\r\n    // If the element overflows on either side, reduce the offset to allow it to fit.\r\n    if (leftOverflow > 0) {\r\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    } else if (rightOverflow > 0) {\r\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    }\r\n\r\n    // Set the offset directly in order to avoid having to go through change detection and\r\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\r\n    // blurry content in some browsers.\r\n    this.overlayDir.offsetX = Math.round(offsetX);\r\n    this.overlayDir.overlayRef.updatePosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the y-offset of the select's overlay panel in relation to the\r\n   * top start corner of the trigger. It has to be adjusted in order for the\r\n   * selected option to be aligned over the trigger when the panel opens.\r\n   */\r\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\r\n                                  maxScroll: number): number {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\r\n    let optionOffsetFromPanelTop: number;\r\n\r\n    // Disable offset if requested by user by returning 0 as value to offset\r\n    if (this._disableOptionCentering) {\r\n      return 0;\r\n    }\r\n\r\n    if (this._scrollTop === 0) {\r\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\r\n    } else if (this._scrollTop === maxScroll) {\r\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\r\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\r\n\r\n      // The first item is partially out of the viewport. Therefore we need to calculate what\r\n      // portion of it is shown in the viewport and account for it in our offset.\r\n      let partialItemHeight =\r\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\r\n\r\n      // Because the panel height is longer than the height of the options alone,\r\n      // there is always extra padding at the top or bottom of the panel. When\r\n      // scrolled to the very bottom, this padding is at the top of the panel and\r\n      // must be added to the offset.\r\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\r\n    } else {\r\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\r\n      // its offset will be the scroll buffer minus the half height that was added to\r\n      // center it.\r\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\r\n    }\r\n\r\n    // The final offset is the option's offset from the top, adjusted for the height difference,\r\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\r\n    // The value is rounded to prevent some browsers from blurring the content.\r\n    return Math.round(optionOffsetFromPanelTop  - optionOffsetFromPanelTop +optionHeightAdjustment);\r\n  }\r\n\r\n  /**\r\n   * Checks that the attempted overlay position will fit within the viewport.\r\n   * If it will not fit, tries to adjust the scroll position and the associated\r\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\r\n   * sets the offset back to 0 to allow the fallback position to take over.\r\n   */\r\n  private _checkOverlayWithinViewport(maxScroll: number): void {\r\n    const itemHeight = this._getItemHeight();\r\n    const viewportSize = this._viewportRuler.getViewportSize();\r\n\r\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\r\n    const bottomSpaceAvailable =\r\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\r\n\r\n    const panelHeightTop = Math.abs(this._offsetY);\r\n    const totalPanelHeight =\r\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\r\n\r\n    if (panelHeightBottom > bottomSpaceAvailable) {\r\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\r\n    } else if (panelHeightTop > topSpaceAvailable) {\r\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\r\n    } else {\r\n      this._transformOrigin = this._getOriginBasedOnOption();\r\n    }\r\n  }\r\n\r\n  /** Adjusts the overlay panel up to fit in the viewport. */\r\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\r\n\r\n    // Scrolls the panel up by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel up into the viewport.\r\n    this._scrollTop -= distanceBelowViewport;\r\n    this._offsetY -= distanceBelowViewport - this._triggerRect.height - 20;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\r\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\r\n    // effect.\r\n    if (this._scrollTop <= 0) {\r\n      this._scrollTop = 0;\r\n      this._offsetY = - this._triggerRect.height - 20;\r\n      this._transformOrigin = `50% bottom 0px`;\r\n    }\r\n  }\r\n\r\n  /** Adjusts the overlay panel down to fit in the viewport. */\r\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\r\n                           maxScroll: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\r\n\r\n    // Scrolls the panel down by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel down into the viewport.\r\n    this._scrollTop += distanceAboveViewport;\r\n    this._offsetY += distanceAboveViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\r\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\r\n    // to take effect.\r\n    if (this._scrollTop >= maxScroll) {\r\n      this._scrollTop = maxScroll;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% top 0px`;\r\n      return;\r\n    }\r\n  }\r\n\r\n  /** Sets the transform origin point based on the selected option. */\r\n  private _getOriginBasedOnOption(): string {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\r\n    return `50% ${originY}px 0px`;\r\n  }\r\n\r\n  /** Calculates the amount of items in the select. This includes options and group labels. */\r\n  private _getItemCount(): number {\r\n    return this.options.length + this.optionGroups.length;\r\n  }\r\n\r\n  /** Calculates the height of the select's options. */\r\n  private _getItemHeight(): number {\r\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) {\r\n    this._ariaDescribedby = ids.join(' ');\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick() {\r\n    this.focus();\r\n    this.open();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean {\r\n    return this._panelOpen || !this.empty;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\r\n * after initialization.\r\n * @docs-private\r\n */\r\nexport function getMatSelectDynamicMultipleError(): Error {\r\n  return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\r\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\r\n * resetting the value.\r\n * @docs-private\r\n */\r\nexport function getMatSelectNonArrayValueError(): Error {\r\n  return Error('Value must be an array in multiple-selection mode.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when assigning a non-function value to the comparator\r\n * used to determine if a value corresponds to an option. Note that whether the function\r\n * actually takes two values and returns a boolean is not checked.\r\n */\r\nexport function getMatSelectNonFunctionValueError(): Error {\r\n  return Error('`compareWith` must be a function.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  animate,\r\n  animateChild,\r\n  AnimationTriggerMetadata,\r\n  query,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * The following are all the animations for the mat-select component, with each\r\n * const containing the metadata for one animation.\r\n *\r\n * The values below match the implementation of the AngularJS Material mat-select animation.\r\n * @docs-private\r\n */\r\nexport const matSelectAnimations: {\r\n  readonly transformPanelWrap: AnimationTriggerMetadata;\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n  readonly fadeInContent: AnimationTriggerMetadata;\r\n} = {\r\n  /**\r\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\r\n   * closing the select.\r\n   * This is needed due to https://github.com/angular/angular/issues/23302\r\n   */\r\n  transformPanelWrap: trigger('transformPanelWrap', [\r\n      transition('* => void', query('@transformPanel', [animateChild()],\r\n          {optional: true}))\r\n  ]),\r\n\r\n  /**\r\n   * This animation transforms the select's overlay panel on and off the page.\r\n   *\r\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\r\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\r\n   * side to ensure the option text correctly overlaps the trigger text.\r\n   *\r\n   * When the panel is removed from the DOM, it simply fades out linearly.\r\n   */\r\n  transformPanel: trigger('transformPanel', [\r\n    state('void', style({\r\n      transform: 'scaleY(0.8)',\r\n      minWidth: '100%',\r\n      opacity: 0\r\n    })),\r\n    state('showing', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    state('showing-multiple', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\r\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\r\n  ]),\r\n\r\n  /**\r\n   * This animation fades in the background color and text content of the\r\n   * select's options. It is time delayed to occur 100ms after the overlay\r\n   * panel has transformed in.\r\n   * @deprecated Not used anymore. To be removed.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  fadeInContent: trigger('fadeInContent', [\r\n    state('showing', style({opacity: 1})),\r\n    transition('void => showing', [\r\n      style({opacity: 0}),\r\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n    ])\r\n  ])\r\n};\r\n\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const transformPanel = matSelectAnimations.transformPanel;\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const fadeInContent = matSelectAnimations.fadeInContent;\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"],"names":["MatFormFieldModule","MatOptionModule","MatCommonModule","OverlayModule","CommonModule","NgModule","Output","Input","ContentChild","ContentChildren","MatOptgroup","MatOption","ViewChild","CdkConnectedOverlay","LiveAnnouncer","Inject","Attribute","NgControl","Self","Optional","MatFormField","FormGroupDirective","NgForm","Directionality","ElementRef","ErrorStateMatcher","NgZone","MAT_OPTION_PARENT_COMPONENT","MatFormFieldControl","ChangeDetectionStrategy","ViewEncapsulation","Component","SELECT_MULTIPLE_PANEL_PADDING_X","_countGroupLabelsBeforeOption","_getOptionScrollPosition","merge","takeUntil","ActiveDescendantKeyManager","isDevMode","take","A","hasModifierKey","ENTER","SPACE","HOME","END","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","startWith","distinctUntilChanged","SelectionModel","coerceBooleanProperty","EventEmitter","filter","map","switchMap","defer","Subject","tslib_1.__extends","Directive","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","Overlay","overlay","InjectionToken","animate","style","transition","state","trigger","query","animateChild"],"mappings":"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"}