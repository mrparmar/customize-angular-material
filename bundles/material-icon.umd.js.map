{"version":3,"file":"material-icon.umd.js","sources":["../../src/lib/icon/icon-module.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-registry.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatIcon} from './icon';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule],\r\n  exports: [MatIcon, MatCommonModule],\r\n  declarations: [MatIcon],\r\n})\r\nexport class MatIconModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {take} from 'rxjs/operators';\r\nimport {\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  InjectionToken,\r\n  inject,\r\n  Inject,\r\n  OnDestroy,\r\n  AfterViewChecked,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {MatIconRegistry} from './icon-registry';\r\n\r\n\r\n// Boilerplate for applying mixins to MatIcon.\r\n/** @docs-private */\r\nexport class MatIconBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\r\n    mixinColor(MatIconBase);\r\n\r\n/**\r\n * Injection token used to provide the current location to `MatIcon`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * @docs-private\r\n */\r\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\r\n  providedIn: 'root',\r\n  factory: MAT_ICON_LOCATION_FACTORY\r\n});\r\n\r\n/**\r\n * Stubbed out location for `MatIcon`.\r\n * @docs-private\r\n */\r\nexport interface MatIconLocation {\r\n  getPathname: () => string;\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\r\n  const _document = inject(DOCUMENT);\r\n  const _location = _document ? _document.location : null;\r\n\r\n  return {\r\n    // Note that this needs to be a function, rather than a property, because Angular\r\n    // will only resolve it once, but we want the current path on each call.\r\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\r\n  };\r\n}\r\n\r\n\r\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\r\nconst funcIriAttributes = [\r\n  'clip-path',\r\n  'color-profile',\r\n  'src',\r\n  'cursor',\r\n  'fill',\r\n  'filter',\r\n  'marker',\r\n  'marker-start',\r\n  'marker-mid',\r\n  'marker-end',\r\n  'mask',\r\n  'stroke'\r\n];\r\n\r\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\r\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\r\n\r\n/** Regex that can be used to extract the id out of a FuncIRI. */\r\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\r\n\r\n/**\r\n * Component to display an icon. It can be used in the following ways:\r\n *\r\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r\n *   Examples:\r\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\r\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\r\n *\r\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\r\n *   component. By default the Material icons font is used as described at\r\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\r\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\r\n *   Examples:\r\n *     `<mat-icon>home</mat-icon>\r\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\r\n *\r\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\r\n *   https://fortawesome.github.io/Font-Awesome/examples/\r\n *   Example:\r\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  template: '<ng-content></ng-content>',\r\n  selector: 'mat-icon',\r\n  exportAs: 'matIcon',\r\n  styleUrls: ['icon.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'role': 'img',\r\n    'class': 'mat-icon notranslate',\r\n    '[class.mat-icon-inline]': 'inline',\r\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\r\n  CanColor, OnDestroy {\r\n\r\n  /**\r\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n   * the element the icon is contained in.\r\n   */\r\n  @Input()\r\n  get inline(): boolean {\r\n    return this._inline;\r\n  }\r\n  set inline(inline: boolean) {\r\n    this._inline = coerceBooleanProperty(inline);\r\n  }\r\n  private _inline: boolean = false;\r\n\r\n  /** Name of the icon in the SVG icon set. */\r\n  @Input() svgIcon: string;\r\n\r\n  /** Font set that the icon is a part of. */\r\n  @Input()\r\n  get fontSet(): string { return this._fontSet; }\r\n  set fontSet(value: string) {\r\n    this._fontSet = this._cleanupFontValue(value);\r\n  }\r\n  private _fontSet: string;\r\n\r\n  /** Name of an icon within a font set. */\r\n  @Input()\r\n  get fontIcon(): string { return this._fontIcon; }\r\n  set fontIcon(value: string) {\r\n    this._fontIcon = this._cleanupFontValue(value);\r\n  }\r\n  private _fontIcon: string;\r\n\r\n  private _previousFontSetClass: string;\r\n  private _previousFontIconClass: string;\r\n\r\n  /** Keeps track of the current page path. */\r\n  private _previousPath?: string;\r\n\r\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\r\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\r\n\r\n  constructor(\r\n      elementRef: ElementRef<HTMLElement>,\r\n      private _iconRegistry: MatIconRegistry,\r\n      @Attribute('aria-hidden') ariaHidden: string,\r\n      /**\r\n       * @deprecated `location` parameter to be made required.\r\n       * @breaking-change 8.0.0\r\n       */\r\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\r\n    super(elementRef);\r\n\r\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\r\n    // the right thing to do for the majority of icon use-cases.\r\n    if (!ariaHidden) {\r\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Splits an svgIcon binding value into its icon set and icon name components.\r\n   * Returns a 2-element array of [(icon set), (icon name)].\r\n   * The separator for the two fields is ':'. If there is no separator, an empty\r\n   * string is returned for the icon set and the entire value is returned for\r\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n   * Throws an error if the name contains two or more ':' separators.\r\n   * Examples:\r\n   *   `'social:cake' -> ['social', 'cake']\r\n   *   'penguin' -> ['', 'penguin']\r\n   *   null -> ['', '']\r\n   *   'a:b:c' -> (throws Error)`\r\n   */\r\n  private _splitIconName(iconName: string): [string, string] {\r\n    if (!iconName) {\r\n      return ['', ''];\r\n    }\r\n    const parts = iconName.split(':');\r\n    switch (parts.length) {\r\n      case 1: return ['', parts[0]]; // Use default namespace.\r\n      case 2: return <[string, string]>parts;\r\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\r\n    const svgIconChanges = changes['svgIcon'];\r\n\r\n    if (svgIconChanges) {\r\n      if (this.svgIcon) {\r\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\r\n\r\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\r\n          svg => this._setSvgElement(svg),\r\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\r\n        );\r\n      } else if (svgIconChanges.previousValue) {\r\n        this._clearSvgElement();\r\n      }\r\n    }\r\n\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\r\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    const cachedElements = this._elementsWithExternalReferences;\r\n\r\n    if (cachedElements && this._location && cachedElements.size) {\r\n      const newPath = this._location.getPathname();\r\n\r\n      // We need to check whether the URL has changed on each change detection since\r\n      // the browser doesn't have an API that will let us react on link clicks and\r\n      // we can't depend on the Angular router. The references need to be updated,\r\n      // because while most browsers don't care whether the URL is correct after\r\n      // the first render, Safari will break if the user navigates to a different\r\n      // page and the SVG isn't re-rendered.\r\n      if (newPath !== this._previousPath) {\r\n        this._previousPath = newPath;\r\n        this._prependPathToReferences(newPath);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._elementsWithExternalReferences) {\r\n      this._elementsWithExternalReferences.clear();\r\n    }\r\n  }\r\n\r\n  private _usingFontIcon(): boolean {\r\n    return !this.svgIcon;\r\n  }\r\n\r\n  private _setSvgElement(svg: SVGElement) {\r\n    this._clearSvgElement();\r\n\r\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\r\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\r\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\r\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\r\n\r\n    for (let i = 0; i < styleTags.length; i++) {\r\n      styleTags[i].textContent += ' ';\r\n    }\r\n\r\n    // Note: we do this fix here, rather than the icon registry, because the\r\n    // references have to point to the URL at the time that the icon was created.\r\n    if (this._location) {\r\n      const path = this._location.getPathname();\r\n      this._previousPath = path;\r\n      this._cacheChildrenWithExternalReferences(svg);\r\n      this._prependPathToReferences(path);\r\n    }\r\n\r\n    this._elementRef.nativeElement.appendChild(svg);\r\n  }\r\n\r\n  private _clearSvgElement() {\r\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\r\n    let childCount = layoutElement.childNodes.length;\r\n\r\n    if (this._elementsWithExternalReferences) {\r\n      this._elementsWithExternalReferences.clear();\r\n    }\r\n\r\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\r\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\r\n    while (childCount--) {\r\n      const child = layoutElement.childNodes[childCount];\r\n\r\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\r\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\r\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\r\n        layoutElement.removeChild(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _updateFontIconClasses() {\r\n    if (!this._usingFontIcon()) {\r\n      return;\r\n    }\r\n\r\n    const elem: HTMLElement = this._elementRef.nativeElement;\r\n    const fontSetClass = this.fontSet ?\r\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\r\n        this._iconRegistry.getDefaultFontSetClass();\r\n\r\n    if (fontSetClass != this._previousFontSetClass) {\r\n      if (this._previousFontSetClass) {\r\n        elem.classList.remove(this._previousFontSetClass);\r\n      }\r\n      if (fontSetClass) {\r\n        elem.classList.add(fontSetClass);\r\n      }\r\n      this._previousFontSetClass = fontSetClass;\r\n    }\r\n\r\n    if (this.fontIcon != this._previousFontIconClass) {\r\n      if (this._previousFontIconClass) {\r\n        elem.classList.remove(this._previousFontIconClass);\r\n      }\r\n      if (this.fontIcon) {\r\n        elem.classList.add(this.fontIcon);\r\n      }\r\n      this._previousFontIconClass = this.fontIcon;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleans up a value to be used as a fontIcon or fontSet.\r\n   * Since the value ends up being assigned as a CSS class, we\r\n   * have to trim the value and omit space-separated values.\r\n   */\r\n  private _cleanupFontValue(value: string) {\r\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\r\n  }\r\n\r\n  /**\r\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n   * reference. This is required because WebKit browsers require references to be prefixed with\r\n   * the current path, if the page has a `base` tag.\r\n   */\r\n  private _prependPathToReferences(path: string) {\r\n    const elements = this._elementsWithExternalReferences;\r\n\r\n    if (elements) {\r\n      elements.forEach((attrs, element) => {\r\n        attrs.forEach(attr => {\r\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Caches the children of an SVG element that have `url()`\r\n   * references that we need to prefix with the current path.\r\n   */\r\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\r\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\r\n    const elements = this._elementsWithExternalReferences =\r\n        this._elementsWithExternalReferences || new Map();\r\n\r\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\r\n      funcIriAttributes.forEach(attr => {\r\n        const elementWithReference = elementsWithFuncIri[i];\r\n        const value = elementWithReference.getAttribute(attr);\r\n        const match = value ? value.match(funcIriPattern) : null;\r\n\r\n        if (match) {\r\n          let attributes = elements.get(elementWithReference);\r\n\r\n          if (!attributes) {\r\n            attributes = [];\r\n            elements.set(elementWithReference, attributes);\r\n          }\r\n\r\n          attributes!.push({name: attr, value: match[1]});\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Optional,\r\n  SecurityContext,\r\n  SkipSelf,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\r\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\r\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n * @docs-private\r\n */\r\nexport function getMatIconNameNotFoundError(iconName: string): Error {\r\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\r\n}\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mat-icon>` without including @angular/http.\r\n * @docs-private\r\n */\r\nexport function getMatIconNoHttpProviderError(): Error {\r\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\r\n               'Please include the HttpClientModule from @angular/common/http in your ' +\r\n               'app imports.');\r\n}\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * @param url URL that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\r\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\r\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\r\n * @param literal HTML that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\r\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\r\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\r\n}\r\n\r\n\r\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * @docs-private\r\n */\r\nclass SvgIconConfig {\r\n  url: SafeResourceUrl | null;\r\n  svgElement: SVGElement | null;\r\n\r\n  constructor(url: SafeResourceUrl);\r\n  constructor(svgElement: SVGElement);\r\n  constructor(data: SafeResourceUrl | SVGElement) {\r\n    // Note that we can't use `instanceof SVGElement` here,\r\n    // because it'll break during server-side rendering.\r\n    if (!!(data as any).nodeName) {\r\n      this.svgElement = data as SVGElement;\r\n    } else {\r\n      this.url = data as SafeResourceUrl;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Service to register and display icons used by the `<mat-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatIconRegistry implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  /**\r\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n   */\r\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\r\n\r\n  /**\r\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n   * Multiple icon sets can be registered under the same namespace.\r\n   */\r\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\r\n\r\n  /** Cache for icons loaded by direct URLs. */\r\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\r\n\r\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\r\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\r\n\r\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\r\n  private _fontCssClassesByAlias = new Map<string, string>();\r\n\r\n  /**\r\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\r\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\r\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\r\n   */\r\n  private _defaultFontSetClass = 'material-icons';\r\n\r\n  constructor(\r\n    @Optional() private _httpClient: HttpClient,\r\n    private _sanitizer: DomSanitizer,\r\n    @Optional() @Inject(DOCUMENT) document: any) {\r\n      this._document = document;\r\n    }\r\n\r\n  /**\r\n   * Registers an icon by URL in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\r\n    return this.addSvgIconInNamespace('', iconName, url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon using an HTML string in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\r\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\r\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon by URL in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\r\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\r\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\r\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n\r\n    if (!sanitizedLiteral) {\r\n      throw getMatIconFailedToSanitizeLiteralError(literal);\r\n    }\r\n\r\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\r\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the default namespace.\r\n   * @param url\r\n   */\r\n  addSvgIconSet(url: SafeResourceUrl): this {\r\n    return this.addSvgIconSetInNamespace('', url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set using an HTML string in the default namespace.\r\n   * @param literal SVG source of the icon set.\r\n   */\r\n  addSvgIconSetLiteral(literal: SafeHtml): this {\r\n    return this.addSvgIconSetLiteralInNamespace('', literal);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param url\r\n   */\r\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\r\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param literal SVG source of the icon set.\r\n   */\r\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\r\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n\r\n    if (!sanitizedLiteral) {\r\n      throw getMatIconFailedToSanitizeLiteralError(literal);\r\n    }\r\n\r\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\r\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\r\n  }\r\n\r\n  /**\r\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\r\n   * component with the alias as the fontSet input will cause the class name to be applied\r\n   * to the `<mat-icon>` element.\r\n   *\r\n   * @param alias Alias for the font.\r\n   * @param className Class name override to be used instead of the alias.\r\n   */\r\n  registerFontClassAlias(alias: string, className: string = alias): this {\r\n    this._fontCssClassesByAlias.set(alias, className);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name associated with the alias by a previous call to\r\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n   */\r\n  classNameForFontAlias(alias: string): string {\r\n    return this._fontCssClassesByAlias.get(alias) || alias;\r\n  }\r\n\r\n  /**\r\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   *\r\n   * @param className\r\n   */\r\n  setDefaultFontSetClass(className: string): this {\r\n    this._defaultFontSetClass = className;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   */\r\n  getDefaultFontSetClass(): string {\r\n    return this._defaultFontSetClass;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n   * it will not contain any modifications made to elements previously returned).\r\n   *\r\n   * @param safeUrl URL from which to fetch the SVG icon.\r\n   */\r\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\r\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n    }\r\n\r\n    const cachedIcon = this._cachedIconsByUrl.get(url);\r\n\r\n    if (cachedIcon) {\r\n      return observableOf(cloneSvg(cachedIcon));\r\n    }\r\n\r\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\r\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\r\n      map(svg => cloneSvg(svg)),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n   * if not, the Observable will throw an error.\r\n   *\r\n   * @param name Name of the icon to be retrieved.\r\n   * @param namespace Namespace in which to look for the icon.\r\n   */\r\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\r\n    // Return (copy of) cached icon if possible.\r\n    const key = iconKey(namespace, name);\r\n    const config = this._svgIconConfigs.get(key);\r\n\r\n    if (config) {\r\n      return this._getSvgFromConfig(config);\r\n    }\r\n\r\n    // See if we have any icon sets registered for the namespace.\r\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n\r\n    if (iconSetConfigs) {\r\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n    }\r\n\r\n    return observableThrow(getMatIconNameNotFoundError(key));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n   this._svgIconConfigs.clear();\r\n   this._iconSetConfigs.clear();\r\n   this._cachedIconsByUrl.clear();\r\n  }\r\n\r\n  /**\r\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n   */\r\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    if (config.svgElement) {\r\n      // We already have the SVG element for this icon, return a copy.\r\n      return observableOf(cloneSvg(config.svgElement));\r\n    } else {\r\n      // Fetch the icon from the config's URL, cache it, and return a copy.\r\n      return this._loadSvgIconFromConfig(config).pipe(\r\n        tap(svg => config.svgElement = svg),\r\n        map(svg => cloneSvg(svg)),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n   * First searches the available cached icons for a nested element with a matching name, and\r\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n   * that have not been cached, and searches again after all fetches are completed.\r\n   * The returned Observable produces the SVG element if possible, and throws\r\n   * an error if no icon with the specified name can be found.\r\n   */\r\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\r\n      Observable<SVGElement> {\r\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n    // requested name.\r\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n    if (namedIcon) {\r\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n      // time anyway, there's probably not much advantage compared to just always extracting\r\n      // it from the icon set.\r\n      return observableOf(namedIcon);\r\n    }\r\n\r\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n    // fetched, fetch them now and look for iconName in the results.\r\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\r\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\r\n      .map(iconSetConfig => {\r\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\r\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\r\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n\r\n            // Swallow errors fetching individual URLs so the\r\n            // combined Observable won't necessarily fail.\r\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\r\n            return observableOf(null);\r\n          })\r\n        );\r\n      });\r\n\r\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n    // cached SVG element (unless the request failed), and we can check again for the icon.\r\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\r\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n      if (!foundIcon) {\r\n        throw getMatIconNameNotFoundError(name);\r\n      }\r\n\r\n      return foundIcon;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\r\n      SVGElement | null {\r\n    // Iterate backwards, so icon sets added later have precedence.\r\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n      const config = iconSetConfigs[i];\r\n      if (config.svgElement) {\r\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\r\n        if (foundIcon) {\r\n          return foundIcon;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    return this._fetchUrl(config.url)\r\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    // If the SVG for this icon set has already been parsed, do nothing.\r\n    if (config.svgElement) {\r\n      return observableOf(config.svgElement);\r\n    }\r\n\r\n    return this._fetchUrl(config.url).pipe(map(svgText => {\r\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\r\n      // only needs to occur if the cache is yet unset.\r\n      if (!config.svgElement) {\r\n        config.svgElement = this._svgElementFromString(svgText);\r\n      }\r\n\r\n      return config.svgElement;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string, and adds default attributes.\r\n   */\r\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\r\n    const svg = this._svgElementFromString(responseText);\r\n    this._setSvgAttributes(svg);\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\r\n    const iconSource = iconSet.querySelector('#' + iconName);\r\n\r\n    if (!iconSource) {\r\n      return null;\r\n    }\r\n\r\n    // Clone the element and remove the ID to prevent multiple elements from being added\r\n    // to the page with the same ID.\r\n    const iconElement = iconSource.cloneNode(true) as Element;\r\n    iconElement.removeAttribute('id');\r\n\r\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n    // the content of a new <svg> node.\r\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\r\n      return this._setSvgAttributes(iconElement as SVGElement);\r\n    }\r\n\r\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n    // tag is problematic on Firefox, because it needs to include the current page path.\r\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\r\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\r\n    }\r\n\r\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n    // the correct nodes, but the SVG content doesn't render. Instead we\r\n    // have to create an empty SVG node using innerHTML and append its content.\r\n    // Elements created using DOMParser.parseFromString have the same problem.\r\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n    const svg = this._svgElementFromString('<svg></svg>');\r\n    // Clone the node so we don't remove it from the parent icon set element.\r\n    svg.appendChild(iconElement);\r\n\r\n    return this._setSvgAttributes(svg);\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string.\r\n   */\r\n  private _svgElementFromString(str: string): SVGElement {\r\n    const div = this._document.createElement('DIV');\r\n    div.innerHTML = str;\r\n    const svg = div.querySelector('svg') as SVGElement;\r\n\r\n    if (!svg) {\r\n      throw Error('<svg> tag not found');\r\n    }\r\n\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Converts an element into an SVG node by cloning all of its children.\r\n   */\r\n  private _toSvgElement(element: Element): SVGElement {\r\n    let svg = this._svgElementFromString('<svg></svg>');\r\n\r\n    for (let i = 0; i < element.childNodes.length; i++) {\r\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\r\n        svg.appendChild(element.childNodes[i].cloneNode(true));\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Sets the default attributes for an SVG element to be used as an icon.\r\n   */\r\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\r\n    svg.setAttribute('fit', '');\r\n    svg.setAttribute('height', '100%');\r\n    svg.setAttribute('width', '100%');\r\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable which produces the string contents of the given URL. Results may be\r\n   * cached, so future calls with the same URL may not cause another HTTP request.\r\n   */\r\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\r\n    if (!this._httpClient) {\r\n      throw getMatIconNoHttpProviderError();\r\n    }\r\n\r\n    if (safeUrl == null) {\r\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\r\n    }\r\n\r\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n    }\r\n\r\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n    // already a request in progress for that URL. It's necessary to call share() on the\r\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\r\n\r\n    if (inProgressFetch) {\r\n      return inProgressFetch;\r\n    }\r\n\r\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\r\n    // Observable. Figure out why and fix it.\r\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\r\n      finalize(() => this._inProgressUrlFetches.delete(url)),\r\n      share(),\r\n    );\r\n\r\n    this._inProgressUrlFetches.set(url, req);\r\n    return req;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon config by name in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param iconName Name under which to register the config.\r\n   * @param config Config to be registered.\r\n   */\r\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\r\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set config in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param config Config to be registered.\r\n   */\r\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\r\n    const configNamespace = this._iconSetConfigs.get(namespace);\r\n\r\n    if (configNamespace) {\r\n      configNamespace.push(config);\r\n    } else {\r\n      this._iconSetConfigs.set(namespace, [config]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\r\n  parentRegistry: MatIconRegistry,\r\n  httpClient: HttpClient,\r\n  sanitizer: DomSanitizer,\r\n  document?: any) {\r\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\r\n}\r\n\r\n/** @docs-private */\r\nexport const ICON_REGISTRY_PROVIDER = {\r\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\r\n  provide: MatIconRegistry,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), MatIconRegistry],\r\n    [new Optional(), HttpClient],\r\n    DomSanitizer,\r\n    [new Optional(), DOCUMENT as InjectionToken<any>],\r\n  ],\r\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\r\n};\r\n\r\n/** Clones an SVGElement while preserving type information. */\r\nfunction cloneSvg(svg: SVGElement): SVGElement {\r\n  return svg.cloneNode(true) as SVGElement;\r\n}\r\n\r\n/** Returns the cache key to use for an icon namespace and name. */\r\nfunction iconKey(namespace: string, name: string) {\r\n  return namespace + ':' + name;\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"],"names":["MatCommonModule","NgModule","Input","Optional","Inject","Attribute","ChangeDetectionStrategy","ViewEncapsulation","Component","take","coerceBooleanProperty","tslib_1.__extends","inject","DOCUMENT","InjectionToken","mixinColor","DomSanitizer","HttpClient","SkipSelf","Injectable","finalize","share","SecurityContext","map","observableOf","forkJoin","catchError","tap","observableThrow"],"mappings":"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"}