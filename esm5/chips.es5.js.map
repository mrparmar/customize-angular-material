{"version":3,"file":"chips.es5.js","sources":["../../../src/lib/chips/chips-module.ts","../../../src/lib/chips/chip-input.ts","../../../src/lib/chips/chip-list.ts","../../../src/lib/chips/chip-default-options.ts","../../../src/lib/chips/chip.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ENTER} from '@angular/cdk/keycodes';\r\nimport {NgModule} from '@angular/core';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\r\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\r\nimport {MatChipInput} from './chip-input';\r\nimport {MatChipList} from './chip-list';\r\n\r\nconst CHIP_DECLARATIONS = [\r\n  MatChipList,\r\n  MatChip,\r\n  MatChipInput,\r\n  MatChipRemove,\r\n  MatChipAvatar,\r\n  MatChipTrailingIcon,\r\n];\r\n\r\n@NgModule({\r\n  exports: CHIP_DECLARATIONS,\r\n  declarations: CHIP_DECLARATIONS,\r\n  providers: [\r\n    ErrorStateMatcher,\r\n    {\r\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\r\n      useValue: {\r\n        separatorKeyCodes: [ENTER]\r\n      } as MatChipsDefaultOptions\r\n    }\r\n  ]\r\n})\r\nexport class MatChipsModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\r\nimport {hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\r\nimport {MatChipList} from './chip-list';\r\nimport {MatChipTextControl} from './chip-text-control';\r\n\r\n\r\n/** Represents an input event on a `matChipInput`. */\r\nexport interface MatChipInputEvent {\r\n  /** The native `<input>` element that the event is being fired for. */\r\n  input: HTMLInputElement;\r\n\r\n  /** The value of the input. */\r\n  value: string;\r\n}\r\n\r\n// Increasing integer for generating unique ids.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\r\n * May be placed inside or outside of an `<mat-chip-list>`.\r\n */\r\n@Directive({\r\n  selector: 'input[matChipInputFor]',\r\n  exportAs: 'matChipInput, matChipInputFor',\r\n  host: {\r\n    'class': 'mat-chip-input mat-input-element',\r\n    '(keydown)': '_keydown($event)',\r\n    '(blur)': '_blur()',\r\n    '(focus)': '_focus()',\r\n    '(input)': '_onInput()',\r\n    '[id]': 'id',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.placeholder]': 'placeholder || null',\r\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\r\n  }\r\n})\r\nexport class MatChipInput implements MatChipTextControl, OnChanges {\r\n  /** Whether the control is focused. */\r\n  focused: boolean = false;\r\n  _chipList: MatChipList;\r\n\r\n  /** Register input for chip list */\r\n  @Input('matChipInputFor')\r\n  set chipList(value: MatChipList) {\r\n    if (value) {\r\n      this._chipList = value;\r\n      this._chipList.registerInput(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\r\n   */\r\n  @Input('matChipInputAddOnBlur')\r\n  get addOnBlur(): boolean { return this._addOnBlur; }\r\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\r\n  _addOnBlur: boolean = false;\r\n\r\n  /**\r\n   * The list of key codes that will trigger a chipEnd event.\r\n   *\r\n   * Defaults to `[ENTER]`.\r\n   */\r\n  @Input('matChipInputSeparatorKeyCodes')\r\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\r\n\r\n  /** Emitted when a chip is to be added. */\r\n  @Output('matChipInputTokenEnd')\r\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\r\n\r\n  /** The input's placeholder text. */\r\n  @Input() placeholder: string = '';\r\n\r\n  /** Unique id for the input. */\r\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\r\n\r\n  /** Whether the input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Whether the input is empty. */\r\n  get empty(): boolean { return !this._inputElement.value; }\r\n\r\n  /** The native input element to which this directive is attached. */\r\n  protected _inputElement: HTMLInputElement;\r\n\r\n  constructor(\r\n    protected _elementRef: ElementRef<HTMLInputElement>,\r\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\r\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Utility method to make host definition/tests more clear. */\r\n  _keydown(event?: KeyboardEvent) {\r\n    this._emitChipEnd(event);\r\n  }\r\n\r\n  /** Checks to see if the blur should emit the (chipEnd) event. */\r\n  _blur() {\r\n    if (this.addOnBlur) {\r\n      this._emitChipEnd();\r\n    }\r\n    this.focused = false;\r\n    // Blur the chip list if it is not focused\r\n    if (!this._chipList.focused) {\r\n      this._chipList._blur();\r\n    }\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  _focus() {\r\n    this.focused = true;\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\r\n  _emitChipEnd(event?: KeyboardEvent) {\r\n    if (!this._inputElement.value && !!event) {\r\n      this._chipList._keydown(event);\r\n    }\r\n    if (!event || this._isSeparatorKey(event)) {\r\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\r\n\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  _onInput() {\r\n    // Let chip list know whenever the value changes.\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(): void {\r\n    this._inputElement.focus();\r\n  }\r\n\r\n  /** Checks whether a keycode is one of the configured separators. */\r\n  private _isSeparatorKey(event: KeyboardEvent) {\r\n    if (hasModifierKey(event)) {\r\n      return false;\r\n    }\r\n\r\n    const separators = this.separatorKeyCodes;\r\n    const keyCode = event.keyCode;\r\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {\r\n  CanUpdateErrorState,\r\n  CanUpdateErrorStateCtor,\r\n  ErrorStateMatcher,\r\n  mixinErrorState,\r\n} from '@angular/material/core';\r\nimport {MatFormFieldControl} from '@angular/material/form-field';\r\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\r\nimport {startWith, takeUntil} from 'rxjs/operators';\r\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\r\nimport {MatChipTextControl} from './chip-text-control';\r\n\r\n\r\n// Boilerplate for applying mixins to MatChipList.\r\n/** @docs-private */\r\nexport class MatChipListBase {\r\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              /** @docs-private */\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\r\n    mixinErrorState(MatChipListBase);\r\n\r\n\r\n// Increasing integer for generating unique ids for chip-list components.\r\nlet nextUniqueId = 0;\r\n\r\n/** Change event object that is emitted when the chip list value has changed. */\r\nexport class MatChipListChange {\r\n  constructor(\r\n    /** Chip list that emitted the event. */\r\n    public source: MatChipList,\r\n    /** Value of the chip list when the event was emitted. */\r\n    public value: any) { }\r\n}\r\n\r\n\r\n/**\r\n * A material design chips component (named ChipList for its similarity to the List component).\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-chip-list',\r\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\r\n  exportAs: 'matChipList',\r\n  host: {\r\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.role]': 'role',\r\n    '[class.mat-chip-list-disabled]': 'disabled',\r\n    '[class.mat-chip-list-invalid]': 'errorState',\r\n    '[class.mat-chip-list-required]': 'required',\r\n    '[attr.aria-orientation]': 'ariaOrientation',\r\n    'class': 'mat-chip-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[id]': '_uid',\r\n  },\r\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\r\n  styleUrls: ['chips.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\r\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  readonly controlType: string = 'mat-chip-list';\r\n\r\n  /**\r\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\r\n   * query list notifies about the update. This is necessary because we cannot determine an\r\n   * appropriate chip that should receive focus until the array of chips updated completely.\r\n   */\r\n  private _lastDestroyedChipIndex: number | null = null;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Subscription to focus changes in the chips. */\r\n  private _chipFocusSubscription: Subscription | null;\r\n\r\n  /** Subscription to blur changes in the chips. */\r\n  private _chipBlurSubscription: Subscription | null;\r\n\r\n  /** Subscription to selection changes in chips. */\r\n  private _chipSelectionSubscription: Subscription | null;\r\n\r\n  /** Subscription to remove changes in chips. */\r\n  private _chipRemoveSubscription: Subscription | null;\r\n\r\n  /** The chip input to add more chips */\r\n  protected _chipInput: MatChipTextControl;\r\n\r\n  /** Uid of the chip list */\r\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\r\n\r\n  /** The aria-describedby attribute on the chip list for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** Tab index for the chip list. */\r\n  _tabIndex = 0;\r\n\r\n  /**\r\n   * User defined tab index.\r\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\r\n   */\r\n  _userTabIndex: number | null = null;\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatChip>;\r\n\r\n  /** Function when touched */\r\n  _onTouched = () => {};\r\n\r\n  /** Function when changed */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  _selectionModel: SelectionModel<MatChip>;\r\n\r\n  /** The array of selected chips inside chip list. */\r\n  get selected(): MatChip[] | MatChip {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\r\n\r\n  /** The ARIA role applied to the chip list. */\r\n  get role(): string | null { return this.empty ? null : 'listbox'; }\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /** Whether the user should be allowed to select multiple chips. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n    this._syncChipsState();\r\n  }\r\n  private _multiple: boolean = false;\r\n\r\n  /**\r\n   * A function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  @Input()\r\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\r\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    this.writeValue(value);\r\n    this._value = value;\r\n  }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get id(): string {\r\n    return this._chipInput ? this._chipInput.id : this._uid;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n  protected _required: boolean = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get placeholder(): string {\r\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\r\n  }\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\r\n  protected _placeholder: string;\r\n\r\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\r\n  get focused(): boolean {\r\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get empty(): boolean {\r\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._syncChipsState();\r\n  }\r\n  protected _disabled: boolean = false;\r\n\r\n  /** Orientation of the chip list. */\r\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  /**\r\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\r\n   * the selected states for all the chips inside the chip list are always ignored.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable; }\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n\r\n    if (this.chips) {\r\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\r\n    }\r\n  }\r\n  protected _selectable: boolean = true;\r\n\r\n  @Input()\r\n  set tabIndex(value: number) {\r\n    this._userTabIndex = value;\r\n    this._tabIndex = value;\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' selection change events. */\r\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\r\n    return merge(...this.chips.map(chip => chip.selectionChange));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' focus change events. */\r\n  get chipFocusChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onFocus));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' blur change events. */\r\n  get chipBlurChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onBlur));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' remove change events. */\r\n  get chipRemoveChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip.destroyed));\r\n  }\r\n\r\n  /** Event emitted when the selected chip list value has been changed by the user. */\r\n  @Output() readonly change: EventEmitter<MatChipListChange> =\r\n      new EventEmitter<MatChipListChange>();\r\n\r\n  /**\r\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /** The chip components contained within this chip list. */\r\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() _parentForm: NgForm,\r\n              @Optional() _parentFormGroup: FormGroupDirective,\r\n              _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              /** @docs-private */\r\n              @Optional() @Self() public ngControl: NgControl) {\r\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\r\n      .withWrap()\r\n      .withVerticalOrientation()\r\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\r\n\r\n    if (this._dir) {\r\n      this._dir.change\r\n        .pipe(takeUntil(this._destroyed))\r\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\r\n    }\r\n\r\n    // Prevents the chip list from capturing focus and redirecting\r\n    // it back to the first chip when the user tabs out.\r\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n      this._tabIndex = -1;\r\n      setTimeout(() => {\r\n        this._tabIndex = this._userTabIndex || 0;\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    });\r\n\r\n    // When the list changes, re-subscribe\r\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\r\n      if (this.disabled) {\r\n        // Since this happens after the content has been\r\n        // checked, we need to defer it to the next tick.\r\n        Promise.resolve().then(() => {\r\n          this._syncChipsState();\r\n        });\r\n      }\r\n\r\n      this._resetChips();\r\n\r\n      // Reset chips selected/deselected status\r\n      this._initializeSelection();\r\n\r\n      // Check to see if we need to update our tab index\r\n      this._updateTabIndex();\r\n\r\n      // Check to see if we have a destroyed chip and need to refocus\r\n      this._updateFocusForDestroyedChips();\r\n\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n    this.stateChanges.complete();\r\n\r\n    this._dropSubscriptions();\r\n  }\r\n\r\n\r\n  /** Associates an HTML input element with this chip list. */\r\n  registerInput(inputElement: MatChipTextControl): void {\r\n    this._chipInput = inputElement;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    if (this.chips) {\r\n      this._setSelectionByValue(value, false);\r\n    }\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick(event: MouseEvent) {\r\n    if (!this._originatesFromChip(event)) {\r\n      this.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\r\n   * are no eligible chips.\r\n   */\r\n  focus(): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\r\n    // Focus on first element if there's no chipInput inside chip-list\r\n    if (this._chipInput && this._chipInput.focused) {\r\n      // do nothing\r\n    } else if (this.chips.length > 0) {\r\n      this._keyManager.setFirstItemActive();\r\n      this.stateChanges.next();\r\n    } else {\r\n      this._focusInput();\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Attempt to focus an input if we have one. */\r\n  _focusInput() {\r\n    if (this._chipInput) {\r\n      this._chipInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pass events to the keyboard manager. Available here for tests.\r\n   */\r\n  _keydown(event: KeyboardEvent) {\r\n    const target = event.target as HTMLElement;\r\n\r\n    // If they are on an empty input and hit backspace, focus the last chip\r\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\r\n      this._keyManager.setLastItemActive();\r\n      event.preventDefault();\r\n    } else if (target && target.classList.contains('mat-chip')) {\r\n      if (event.keyCode === HOME) {\r\n        this._keyManager.setFirstItemActive();\r\n        event.preventDefault();\r\n      } else if (event.keyCode === END) {\r\n        this._keyManager.setLastItemActive();\r\n        event.preventDefault();\r\n      } else {\r\n        this._keyManager.onKeydown(event);\r\n      }\r\n\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Check the tab index as you should not be allowed to focus an empty list.\r\n   */\r\n  protected _updateTabIndex(): void {\r\n    // If we have 0 chips, we should not allow keyboard focus\r\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\r\n  }\r\n\r\n  /**\r\n   * If the amount of chips changed, we need to update the\r\n   * key manager state and focus the next closest chip.\r\n   */\r\n  protected _updateFocusForDestroyedChips() {\r\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\r\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\r\n      this._keyManager.setActiveItem(newChipIndex);\r\n    }\r\n\r\n    this._lastDestroyedChipIndex = null;\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   *\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of chips.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.chips.length;\r\n  }\r\n\r\n  private _isInputEmpty(element: HTMLElement): boolean {\r\n    if (element && element.nodeName.toLowerCase() === 'input') {\r\n      let input = element as HTMLInputElement;\r\n      return !input.value;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\r\n    this._clearSelection();\r\n    this.chips.forEach(chip => chip.deselect());\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const correspondingChip = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what chip the user interacted with last.\r\n      if (correspondingChip) {\r\n        if (isUserInput) {\r\n          this._keyManager.setActiveItem(correspondingChip);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and selects the chip based on its value.\r\n   * @returns Chip that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\r\n\r\n    const correspondingChip = this.chips.find(chip => {\r\n      return chip.value != null && this._compareWith(chip.value,  value);\r\n    });\r\n\r\n    if (correspondingChip) {\r\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n      this._selectionModel.select(correspondingChip);\r\n    }\r\n\r\n    return correspondingChip;\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      if (this.ngControl || this._value) {\r\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\r\n        this.stateChanges.next();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deselects every chip in the list.\r\n   * @param skip Chip that should not be deselected.\r\n   */\r\n  private _clearSelection(skip?: MatChip): void {\r\n    this._selectionModel.clear();\r\n    this.chips.forEach(chip => {\r\n      if (chip !== skip) {\r\n        chip.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Sorts the model values, ensuring that they keep the same\r\n   * order that they have in the panel.\r\n   */\r\n  private _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.chips.forEach(chip => {\r\n        if (chip.selected) {\r\n          this._selectionModel.select(chip);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Emits change event to set the model value. */\r\n  private _propagateChanges(fallbackValue?: any): void {\r\n    let valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(chip => chip.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n    this._value = valueToEmit;\r\n    this.change.emit(new MatChipListChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\r\n  _blur() {\r\n    if (!this._hasFocusedChip()) {\r\n      this._keyManager.setActiveItem(-1);\r\n    }\r\n\r\n    if (!this.disabled) {\r\n      if (this._chipInput) {\r\n        // If there's a chip input, we should check whether the focus moved to chip input.\r\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\r\n        // to chip input, do nothing.\r\n        // Timeout is needed to wait for the focus() event trigger on chip input.\r\n        setTimeout(() => {\r\n          if (!this.focused) {\r\n            this._markAsTouched();\r\n          }\r\n        });\r\n      } else {\r\n        // If there's no chip input, then mark the field as touched.\r\n        this._markAsTouched();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Mark the field as touched */\r\n  _markAsTouched() {\r\n    this._onTouched();\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _resetChips() {\r\n    this._dropSubscriptions();\r\n    this._listenToChipsFocus();\r\n    this._listenToChipsSelection();\r\n    this._listenToChipsRemoved();\r\n  }\r\n\r\n  private _dropSubscriptions() {\r\n    if (this._chipFocusSubscription) {\r\n      this._chipFocusSubscription.unsubscribe();\r\n      this._chipFocusSubscription = null;\r\n    }\r\n\r\n    if (this._chipBlurSubscription) {\r\n      this._chipBlurSubscription.unsubscribe();\r\n      this._chipBlurSubscription = null;\r\n    }\r\n\r\n    if (this._chipSelectionSubscription) {\r\n      this._chipSelectionSubscription.unsubscribe();\r\n      this._chipSelectionSubscription = null;\r\n    }\r\n\r\n    if (this._chipRemoveSubscription) {\r\n      this._chipRemoveSubscription.unsubscribe();\r\n      this._chipRemoveSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsSelection(): void {\r\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\r\n      event.source.selected\r\n        ? this._selectionModel.select(event.source)\r\n        : this._selectionModel.deselect(event.source);\r\n\r\n      // For single selection chip list, make sure the deselected value is unselected.\r\n      if (!this.multiple) {\r\n        this.chips.forEach(chip => {\r\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\r\n            chip.deselect();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (event.isUserInput) {\r\n        this._propagateChanges();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsFocus(): void {\r\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\r\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        this._keyManager.updateActiveItemIndex(chipIndex);\r\n      }\r\n      this.stateChanges.next();\r\n    });\r\n\r\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\r\n      this._blur();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  private _listenToChipsRemoved(): void {\r\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\r\n      const chip = event.chip;\r\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\r\n\r\n      // In case the chip that will be removed is currently focused, we temporarily store\r\n      // the index in order to be able to determine an appropriate sibling chip that will\r\n      // receive focus.\r\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\r\n        this._lastDestroyedChipIndex = chipIndex;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Checks whether an event comes from inside a chip element. */\r\n  private _originatesFromChip(event: Event): boolean {\r\n    let currentElement = event.target as HTMLElement | null;\r\n\r\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\r\n      if (currentElement.classList.contains('mat-chip')) {\r\n        return true;\r\n      }\r\n\r\n      currentElement = currentElement.parentElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Checks whether any of the chips is focused. */\r\n  private _hasFocusedChip() {\r\n    return this.chips.some(chip => chip._hasFocus);\r\n  }\r\n\r\n  /** Syncs the list's state with the individual chips. */\r\n  private _syncChipsState() {\r\n    if (this.chips) {\r\n      this.chips.forEach(chip => {\r\n        chip.disabled = this._disabled;\r\n        chip._chipListMultiple = this.multiple;\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/** Default options, for the chips module, that can be overridden. */\r\nexport interface MatChipsDefaultOptions {\r\n  /** The list of key codes that will trigger a chipEnd event. */\r\n  separatorKeyCodes: number[] | Set<number>;\r\n}\r\n\r\n/** Injection token to be used to override the default options for the chips module. */\r\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ContentChild,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanColorCtor,\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  MAT_RIPPLE_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  RippleConfig,\r\n  RippleGlobalOptions,\r\n  RippleRenderer,\r\n  RippleTarget,\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {take} from 'rxjs/operators';\r\n\r\n\r\n/** Represents an event fired on an individual `mat-chip`. */\r\nexport interface MatChipEvent {\r\n  /** The chip the event was fired on. */\r\n  chip: MatChip;\r\n}\r\n\r\n/** Event object emitted by MatChip when selected or deselected. */\r\nexport class MatChipSelectionChange {\r\n  constructor(\r\n    /** Reference to the chip that emitted the event. */\r\n    public source: MatChip,\r\n    /** Whether the chip that emitted the event is selected. */\r\n    public selected: boolean,\r\n    /** Whether the selection change was a result of a user interaction. */\r\n    public isUserInput = false) { }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatChip.\r\n/** @docs-private */\r\nexport class MatChipBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n\r\nexport const _MatChipMixinBase:\r\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\r\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\r\n\r\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\r\n\r\n/**\r\n * Dummy directive to add CSS class to chip avatar.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-chip-avatar, [matChipAvatar]',\r\n  host: {'class': 'mat-chip-avatar'}\r\n})\r\nexport class MatChipAvatar {}\r\n\r\n/**\r\n * Dummy directive to add CSS class to chip trailing icon.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\r\n  host: {'class': 'mat-chip-trailing-icon'}\r\n})\r\nexport class MatChipTrailingIcon {}\r\n\r\n/**\r\n * Material design styled Chip component. Used inside the MatChipList component.\r\n */\r\n@Directive({\r\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\r\n  inputs: ['color', 'disabled', 'disableRipple'],\r\n  exportAs: 'matChip',\r\n  host: {\r\n    'class': 'mat-chip',\r\n    '[attr.tabindex]': 'disabled ? null : -1',\r\n    'role': 'option',\r\n    '[class.mat-chip-selected]': 'selected',\r\n    '[class.mat-chip-with-avatar]': 'avatar',\r\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\r\n    '[class.mat-chip-disabled]': 'disabled',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-selected]': 'ariaSelected',\r\n    '(click)': '_handleClick($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n  },\r\n})\r\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\r\n    CanDisable, CanDisableRipple, RippleTarget {\r\n\r\n  /** Reference to the RippleRenderer for the chip. */\r\n  private _chipRipple: RippleRenderer;\r\n\r\n  /**\r\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\r\n   * is set to the global ripple options since we don't have any configurable options for\r\n   * the chip ripples.\r\n   * @docs-private\r\n   */\r\n  rippleConfig: RippleConfig & RippleGlobalOptions;\r\n\r\n  /**\r\n   * Whether ripples are disabled on interaction\r\n   * @docs-private\r\n   */\r\n  get rippleDisabled(): boolean {\r\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\r\n  }\r\n\r\n  /** Whether the chip has focus. */\r\n  _hasFocus: boolean = false;\r\n\r\n  /** Whether the chip list is selectable */\r\n  chipListSelectable: boolean = true;\r\n\r\n  /** Whether the chip list is in multi-selection mode. */\r\n  _chipListMultiple: boolean = false;\r\n\r\n  /** The chip avatar */\r\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\r\n\r\n  /** The chip's trailing icon. */\r\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\r\n\r\n  /** The chip's remove toggler. */\r\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\r\n\r\n  /** Whether the chip is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    const coercedValue = coerceBooleanProperty(value);\r\n\r\n    if (coercedValue !== this._selected) {\r\n      this._selected = coercedValue;\r\n      this._dispatchSelectionChange();\r\n    }\r\n  }\r\n  protected _selected: boolean = false;\r\n\r\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value != undefined\r\n      ? this._value\r\n      : this._elementRef.nativeElement.textContent;\r\n  }\r\n  set value(value: any) { this._value = value; }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Whether or not the chip is selectable. When a chip is not selectable,\r\n   * changes to its selected state are always ignored. By default a chip is\r\n   * selectable, and it becomes non-selectable if its parent chip list is\r\n   * not selectable.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\r\n  protected _selectable: boolean = true;\r\n\r\n  /**\r\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\r\n   */\r\n  @Input()\r\n  get removable(): boolean { return this._removable; }\r\n  set removable(value: boolean) {\r\n    this._removable = coerceBooleanProperty(value);\r\n  }\r\n  protected _removable: boolean = true;\r\n\r\n  /** Emits when the chip is focused. */\r\n  readonly _onFocus = new Subject<MatChipEvent>();\r\n\r\n  /** Emits when the chip is blured. */\r\n  readonly _onBlur = new Subject<MatChipEvent>();\r\n\r\n  /** Emitted when the chip is selected or deselected. */\r\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\r\n      new EventEmitter<MatChipSelectionChange>();\r\n\r\n  /** Emitted when the chip is destroyed. */\r\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /** Emitted when a chip is to be removed. */\r\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /** The ARIA selected applied to the chip. */\r\n  get ariaSelected(): string | null {\r\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\r\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\r\n    return this.selectable && (this._chipListMultiple || this.selected) ?\r\n        this.selected.toString() : null;\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef,\r\n              private _ngZone: NgZone,\r\n              platform: Platform,\r\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\r\n              globalRippleOptions: RippleGlobalOptions | null) {\r\n    super(_elementRef);\r\n\r\n    this._addHostClassName();\r\n\r\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\r\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\r\n    this.rippleConfig = globalRippleOptions || {};\r\n  }\r\n\r\n  _addHostClassName() {\r\n    // Add class for the different chips\r\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\r\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\r\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\r\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\r\n        return;\r\n      }\r\n    }\r\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.emit({chip: this});\r\n    this._chipRipple._removeTriggerEvents();\r\n  }\r\n\r\n  /** Selects the chip. */\r\n  select(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._dispatchSelectionChange();\r\n    }\r\n  }\r\n\r\n  /** Deselects the chip. */\r\n  deselect(): void {\r\n    if (this._selected) {\r\n      this._selected = false;\r\n      this._dispatchSelectionChange();\r\n    }\r\n  }\r\n\r\n  /** Select this chip and emit selected event */\r\n  selectViaInteraction(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._dispatchSelectionChange(true);\r\n    }\r\n  }\r\n\r\n  /** Toggles the current selected state of this chip. */\r\n  toggleSelected(isUserInput: boolean = false): boolean {\r\n    this._selected = !this.selected;\r\n    this._dispatchSelectionChange(isUserInput);\r\n    return this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the chip. */\r\n  focus(): void {\r\n    if (!this._hasFocus) {\r\n      this._elementRef.nativeElement.focus();\r\n      this._onFocus.next({chip: this});\r\n    }\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  /**\r\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n   * BACKSPACE keys are pressed.\r\n   *\r\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n   */\r\n  remove(): void {\r\n    if (this.removable) {\r\n      this.removed.emit({chip: this});\r\n    }\r\n  }\r\n\r\n  /** Handles click events on the chip. */\r\n  _handleClick(event: Event) {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n    } else {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /** Handle custom key presses. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        // If we are removable, remove the focused chip\r\n        this.remove();\r\n        // Always prevent so page navigation does not occur\r\n        event.preventDefault();\r\n        break;\r\n      case SPACE:\r\n        // If we are selectable, toggle the focused chip\r\n        if (this.selectable) {\r\n          this.toggleSelected(true);\r\n        }\r\n\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\r\n\r\n  _blur(): void {\r\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\r\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\r\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\r\n    // as not focused until the next time the zone stabilizes.\r\n    this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        this._ngZone.run(() => {\r\n          this._hasFocus = false;\r\n          this._onBlur.next({chip: this});\r\n        });\r\n      });\r\n  }\r\n\r\n  private _dispatchSelectionChange(isUserInput = false) {\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput,\r\n      selected: this._selected\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\r\n * available at https://material.io/icons/#ic_cancel.\r\n *\r\n * Example:\r\n *\r\n *     `<mat-chip>\r\n *       <mat-icon matChipRemove>cancel</mat-icon>\r\n *     </mat-chip>`\r\n *\r\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\r\n * styles to properly center the icon within the chip.\r\n */\r\n@Directive({\r\n  selector: '[matChipRemove]',\r\n  host: {\r\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\r\n    '(click)': '_handleClick($event)',\r\n  }\r\n})\r\nexport class MatChipRemove {\r\n  constructor(protected _parentChip: MatChip) {}\r\n\r\n  /** Calls the parent chip's public `remove()` method if applicable. */\r\n  _handleClick(event: Event): void {\r\n    if (this._parentChip.removable) {\r\n      this._parentChip.remove();\r\n    }\r\n\r\n    // We need to stop event propagation because otherwise the event will bubble up to the\r\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\r\n    // reset the focused chip that has been focused after chip removal. Usually the parent\r\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\r\n    // that the chip is being removed before the event bubbles up.\r\n    event.stopPropagation();\r\n  }\r\n}\r\n"],"names":["nextUniqueId","tslib_1.__extends"],"mappings":"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"}