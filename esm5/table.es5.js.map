{"version":3,"file":"table.es5.js","sources":["../../../src/lib/table/table-data-source.ts","../../../src/lib/table/table-module.ts","../../../src/lib/table/row.ts","../../../src/lib/table/cell.ts","../../../src/lib/table/table.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {_isNumberValue} from '@angular/cdk/coercion';\r\nimport {DataSource} from '@angular/cdk/table';\r\nimport {\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  merge,\r\n  Observable,\r\n  of as observableOf,\r\n  Subscription,\r\n  Subject,\r\n} from 'rxjs';\r\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\r\nimport {MatSort, Sort} from '@angular/material/sort';\r\nimport {map} from 'rxjs/operators';\r\n\r\n/**\r\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\r\n * flaky browser support and the value not being defined in Closure's typings.\r\n */\r\nconst MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/**\r\n * Data source that accepts a client-side data array and includes native support of filtering,\r\n * sorting (using MatSort), and pagination (using MatPaginator).\r\n *\r\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\r\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\r\n * which defines how row data is converted to a string for filter matching.\r\n */\r\nexport class MatTableDataSource<T> extends DataSource<T> {\r\n  /** Stream that emits when a new data array is set on the data source. */\r\n  private readonly _data: BehaviorSubject<T[]>;\r\n\r\n  /** Stream emitting render data to the table (depends on ordered data changes). */\r\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\r\n\r\n  /** Stream that emits when a new filter string is set on the data source. */\r\n  private readonly _filter = new BehaviorSubject<string>('');\r\n\r\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\r\n  private readonly _internalPageChanges = new Subject<void>();\r\n\r\n  /**\r\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\r\n   * as filtering, sorting, pagination, or base data changes.\r\n   */\r\n  _renderChangesSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * The filtered set of data that has been matched by the filter string, or all the data if there\r\n   * is no filter. Useful for knowing the set of data the table represents.\r\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\r\n   * shown to the user rather than all the data.\r\n   */\r\n  filteredData: T[];\r\n\r\n  /** Array of data that should be rendered by the table, where each object represents one row. */\r\n  get data() { return this._data.value; }\r\n  set data(data: T[]) { this._data.next(data); }\r\n\r\n  /**\r\n   * Filter term that should be used to filter out objects from the data array. To override how\r\n   * data objects match to this filter string, provide a custom function for filterPredicate.\r\n   */\r\n  get filter(): string { return this._filter.value; }\r\n  set filter(filter: string) { this._filter.next(filter); }\r\n\r\n  /**\r\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\r\n   * emitted by the MatSort will trigger an update to the table's rendered data.\r\n   */\r\n  get sort(): MatSort | null { return this._sort; }\r\n  set sort(sort: MatSort|null) {\r\n    this._sort = sort;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _sort: MatSort|null;\r\n\r\n  /**\r\n   * Instance of the MatPaginator component used by the table to control what page of the data is\r\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\r\n   * table's rendered data.\r\n   *\r\n   * Note that the data source uses the paginator's properties to calculate which page of data\r\n   * should be displayed. If the paginator receives its properties as template inputs,\r\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\r\n   * initialized before assigning it to this data source.\r\n   */\r\n  get paginator(): MatPaginator | null { return this._paginator; }\r\n  set paginator(paginator: MatPaginator|null) {\r\n    this._paginator = paginator;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _paginator: MatPaginator|null;\r\n\r\n  /**\r\n   * Data accessor function that is used for accessing data properties for sorting through\r\n   * the default sortData function.\r\n   * This default function assumes that the sort header IDs (which defaults to the column name)\r\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n   * May be set to a custom function for different behavior.\r\n   * @param data Data object that is being accessed.\r\n   * @param sortHeaderId The name of the column that represents the data.\r\n   */\r\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\r\n      (data: T, sortHeaderId: string): string|number => {\r\n    const value = (data as {[key: string]: any})[sortHeaderId];\r\n\r\n    if (_isNumberValue(value)) {\r\n      const numberValue = Number(value);\r\n\r\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\r\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\r\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\r\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\r\n   * By default, the function retrieves the active sort and its direction and compares data\r\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\r\n   * of data ordering.\r\n   * @param data The array of data that should be sorted.\r\n   * @param sort The connected MatSort that holds the current sort state.\r\n   */\r\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\r\n    const active = sort.active;\r\n    const direction = sort.direction;\r\n    if (!active || direction == '') { return data; }\r\n\r\n    return data.sort((a, b) => {\r\n      let valueA = this.sortingDataAccessor(a, active);\r\n      let valueB = this.sortingDataAccessor(b, active);\r\n\r\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n      // one value exists while the other doesn't. In this case, existing value should come first.\r\n      // This avoids inconsistent results when comparing values to undefined/null.\r\n      // If neither value exists, return 0 (equal).\r\n      let comparatorResult = 0;\r\n      if (valueA != null && valueB != null) {\r\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n        if (valueA > valueB) {\r\n          comparatorResult = 1;\r\n        } else if (valueA < valueB) {\r\n          comparatorResult = -1;\r\n        }\r\n      } else if (valueA != null) {\r\n        comparatorResult = 1;\r\n      } else if (valueB != null) {\r\n        comparatorResult = -1;\r\n      }\r\n\r\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if a data object matches the data source's filter string. By default, each data object\r\n   * is converted to a string of its properties and returns true if the filter has\r\n   * at least one occurrence in that string. By default, the filter string has its whitespace\r\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n   * filter matching.\r\n   * @param data Data object used to check against the filter.\r\n   * @param filter Filter string that has been set on the data source.\r\n   * @returns Whether the filter matches against the data\r\n   */\r\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\r\n    // Transform the data into a lowercase string of all property values.\r\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\r\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\r\n      // This avoids matches where the values of two columns combined will match the user's query\r\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\r\n      // that has a very low chance of being typed in by somebody in a text field. This one in\r\n      // particular is \"White up-pointing triangle with dot\" from\r\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\r\n      return currentTerm + (data as {[key: string]: any})[key] + 'â—¬';\r\n    }, '').toLowerCase();\r\n\r\n    // Transform the filter by converting it to lowercase and removing whitespace.\r\n    const transformedFilter = filter.trim().toLowerCase();\r\n\r\n    return dataStr.indexOf(transformedFilter) != -1;\r\n  }\r\n\r\n  constructor(initialData: T[] = []) {\r\n    super();\r\n    this._data = new BehaviorSubject<T[]>(initialData);\r\n    this._updateChangeSubscription();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n   * changes occur, process the current state of the filter, sort, and pagination along with\r\n   * the provided base data and send it to the table for rendering.\r\n   */\r\n  _updateChangeSubscription() {\r\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\r\n    // The events should emit whenever the component emits a change or initializes, or if no\r\n    // component is provided, a stream with just a null event should be provided.\r\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\r\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\r\n    // they purely act as a signal to progress in the pipeline.\r\n    const sortChange: Observable<Sort|null|void> = this._sort ?\r\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\r\n        observableOf(null);\r\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\r\n        merge<PageEvent|void>(\r\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\r\n        observableOf(null);\r\n    const dataStream = this._data;\r\n    // Watch for base data or filter changes to provide a filtered set of data.\r\n    const filteredData = combineLatest(dataStream, this._filter)\r\n      .pipe(map(([data]) => this._filterData(data)));\r\n    // Watch for filtered data or sort changes to provide an ordered set of data.\r\n    const orderedData = combineLatest(filteredData, sortChange)\r\n      .pipe(map(([data]) => this._orderData(data)));\r\n    // Watch for ordered data or page changes to provide a paged set of data.\r\n    const paginatedData = combineLatest(orderedData, pageChange)\r\n      .pipe(map(([data]) => this._pageData(data)));\r\n    // Watched for paged data changes and send the result to the table to render.\r\n    this._renderChangesSubscription.unsubscribe();\r\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\r\n  }\r\n\r\n  /**\r\n   * Returns a filtered data array where each filter object contains the filter string within\r\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\r\n   * as provided.\r\n   */\r\n  _filterData(data: T[]) {\r\n    // If there is a filter string, filter out data that does not contain it.\r\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\r\n    // May be overridden for customization.\r\n    this.filteredData =\r\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\r\n\r\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\r\n\r\n    return this.filteredData;\r\n  }\r\n\r\n  /**\r\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n   * data array as provided. Uses the default data accessor for data lookup, unless a\r\n   * sortDataAccessor function is defined.\r\n   */\r\n  _orderData(data: T[]): T[] {\r\n    // If there is no active sort or direction, return the data without trying to sort.\r\n    if (!this.sort) { return data; }\r\n\r\n    return this.sortData(data.slice(), this.sort);\r\n  }\r\n\r\n  /**\r\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\r\n   * index and length. If there is no paginator provided, returns the data array as provided.\r\n   */\r\n  _pageData(data: T[]): T[] {\r\n    if (!this.paginator) { return data; }\r\n\r\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n    return data.slice().splice(startIndex, this.paginator.pageSize);\r\n  }\r\n\r\n  /**\r\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n   * guard against making property changes within a round of change detection.\r\n   */\r\n  _updatePaginator(filteredDataLength: number) {\r\n    Promise.resolve().then(() => {\r\n      const paginator = this.paginator;\r\n\r\n      if (!paginator) { return; }\r\n\r\n      paginator.length = filteredDataLength;\r\n\r\n      // If the page index is set beyond the page, reduce it to the last page.\r\n      if (paginator.pageIndex > 0) {\r\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\r\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\r\n\r\n        if (newPageIndex !== paginator.pageIndex) {\r\n          paginator.pageIndex = newPageIndex;\r\n\r\n          // Since the paginator only emits after user-generated changes,\r\n          // we need our own stream so we know to should re-render the data.\r\n          this._internalPageChanges.next();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it connects to the data source.\r\n   * @docs-private\r\n   */\r\n  connect() { return this._renderData; }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it is destroyed. No-op.\r\n   * @docs-private\r\n   */\r\n  disconnect() { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatTable} from './table';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {\r\n  MatCell,\r\n  MatCellDef,\r\n  MatColumnDef,\r\n  MatFooterCell,\r\n  MatFooterCellDef,\r\n  MatHeaderCell,\r\n  MatHeaderCellDef\r\n} from './cell';\r\nimport {\r\n  MatFooterRow,\r\n  MatFooterRowDef,\r\n  MatHeaderRow,\r\n  MatHeaderRowDef,\r\n  MatRow,\r\n  MatRowDef\r\n} from './row';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n  // Table\r\n  MatTable,\r\n\r\n  // Template defs\r\n  MatHeaderCellDef,\r\n  MatHeaderRowDef,\r\n  MatColumnDef,\r\n  MatCellDef,\r\n  MatRowDef,\r\n  MatFooterCellDef,\r\n  MatFooterRowDef,\r\n\r\n  // Cell directives\r\n  MatHeaderCell,\r\n  MatCell,\r\n  MatFooterCell,\r\n\r\n  // Row directives\r\n  MatHeaderRow,\r\n  MatRow,\r\n  MatFooterRow,\r\n];\r\n\r\n@NgModule({\r\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\r\n  exports: EXPORTED_DECLARATIONS,\r\n  declarations: EXPORTED_DECLARATIONS,\r\n})\r\nexport class MatTableModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\r\n  CdkHeaderRow,\r\n  CdkHeaderRowDef,\r\n  CdkRow,\r\n  CdkRowDef,\r\n} from '@angular/cdk/table';\r\n\r\n/**\r\n * Header row definition for the mat-table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[matHeaderRowDef]',\r\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\r\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\r\n})\r\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\r\n\r\n/**\r\n * Footer row definition for the mat-table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[matFooterRowDef]',\r\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\r\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\r\n})\r\nexport class MatFooterRowDef extends CdkFooterRowDef {}\r\n\r\n/**\r\n * Data row definition for the mat-table.\r\n * Captures the data row's template and other properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\n@Directive({\r\n  selector: '[matRowDef]',\r\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\r\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\r\n})\r\nexport class MatRowDef<T> extends CdkRowDef<T> {}\r\n\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-header-row, tr[mat-header-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-header-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matHeaderRow',\r\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\r\n})\r\nexport class MatHeaderRow extends CdkHeaderRow { }\r\n\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-footer-row, tr[mat-footer-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-footer-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matFooterRow',\r\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\r\n})\r\nexport class MatFooterRow extends CdkFooterRow { }\r\n\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-row, tr[mat-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matRow',\r\n  providers: [{provide: CdkRow, useExisting: MatRow}],\r\n})\r\nexport class MatRow extends CdkRow { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef, Input} from '@angular/core';\r\nimport {\r\n  CdkCell,\r\n  CdkCellDef,\r\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\r\n  CdkHeaderCell,\r\n  CdkHeaderCellDef,\r\n} from '@angular/cdk/table';\r\n\r\n/**\r\n * Cell definition for the mat-table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matCellDef]',\r\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\r\n})\r\nexport class MatCellDef extends CdkCellDef {}\r\n\r\n/**\r\n * Header cell definition for the mat-table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matHeaderCellDef]',\r\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\r\n})\r\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\r\n\r\n/**\r\n * Footer cell definition for the mat-table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matFooterCellDef]',\r\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\r\n})\r\nexport class MatFooterCellDef extends CdkFooterCellDef {}\r\n\r\n/**\r\n * Column definition for the mat-table.\r\n * Defines a set of cells available for a table column.\r\n */\r\n@Directive({\r\n  selector: '[matColumnDef]',\r\n  providers: [\r\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\r\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\r\n  ],\r\n})\r\nexport class MatColumnDef extends CdkColumnDef {\r\n  /** Unique name for this column. */\r\n  @Input('matColumnDef') name: string;\r\n\r\n  /** Whether this column should be sticky positioned at the start of the row */\r\n  @Input() sticky: boolean;\r\n\r\n  /** Whether this column should be sticky positioned on the end of the row */\r\n  @Input() stickyEnd: boolean;\r\n}\r\n\r\n/** Header cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-header-cell, th[mat-header-cell]',\r\n  host: {\r\n    'class': 'mat-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n})\r\nexport class MatHeaderCell extends CdkHeaderCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef<HTMLElement>) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n\r\n/** Footer cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\r\n  host: {\r\n    'class': 'mat-footer-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class MatFooterCell extends CdkFooterCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n\r\n/** Cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-cell, td[mat-cell]',\r\n  host: {\r\n    'class': 'mat-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class MatCell extends CdkCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef<HTMLElement>) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\r\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\r\n\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-table, table[mat-table]',\r\n  exportAs: 'matTable',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  styleUrls: ['table.css'],\r\n  host: {\r\n    'class': 'mat-table',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatTable<T> extends CdkTable<T> {\r\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\r\n  protected stickyCssClass = 'mat-table-sticky';\r\n}\r\n"],"names":["observableOf","tslib_1.__extends"],"mappings":"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"}