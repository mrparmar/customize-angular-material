{"version":3,"file":"progress-bar.es5.js","sources":["../../../src/lib/progress-bar/progress-bar-module.ts","../../../src/lib/progress-bar/progress-bar.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatProgressBar} from './progress-bar';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCommonModule],\r\n  exports: [MatProgressBar, MatCommonModule],\r\n  declarations: [MatProgressBar],\r\n})\r\nexport class MatProgressBarModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  Optional,\r\n  NgZone,\r\n  ViewEncapsulation,\r\n  AfterViewInit,\r\n  ViewChild,\r\n  OnDestroy,\r\n  InjectionToken,\r\n  inject,\r\n} from '@angular/core';\r\nimport {fromEvent, Subscription} from 'rxjs';\r\nimport {filter} from 'rxjs/operators';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\r\n\r\n// Boilerplate for applying mixins to MatProgressBar.\r\n/** @docs-private */\r\nexport class MatProgressBarBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\n/** Last animation end data. */\r\nexport interface ProgressAnimationEnd {\r\n  value: number;\r\n}\r\n\r\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\r\n    mixinColor(MatProgressBarBase, 'primary');\r\n\r\n/**\r\n * Injection token used to provide the current location to `MatProgressBar`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * @docs-private\r\n */\r\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\r\n  'mat-progress-bar-location',\r\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\r\n);\r\n\r\n/**\r\n * Stubbed out location for `MatProgressBar`.\r\n * @docs-private\r\n */\r\nexport interface MatProgressBarLocation {\r\n  getPathname: () => string;\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\r\n  const _document = inject(DOCUMENT);\r\n  const _location = _document ? _document.location : null;\r\n\r\n  return {\r\n    // Note that this needs to be a function, rather than a property, because Angular\r\n    // will only resolve it once, but we want the current path on each call.\r\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\r\n  };\r\n}\r\n\r\n\r\n/** Counter used to generate unique IDs for progress bars. */\r\nlet progressbarId = 0;\r\n\r\n/**\r\n * `<mat-progress-bar>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-bar',\r\n  exportAs: 'matProgressBar',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'aria-valuemin': '0',\r\n    'aria-valuemax': '100',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n    'class': 'mat-progress-bar',\r\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-bar.html',\r\n  styleUrls: ['progress-bar.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\r\n                                                      AfterViewInit, OnDestroy {\r\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\r\n              /**\r\n               * @deprecated `location` parameter to be made required.\r\n               * @breaking-change 8.0.0\r\n               */\r\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\r\n    super(_elementRef);\r\n\r\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\r\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\r\n\r\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\r\n    // we can't tell the difference between whether\r\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\r\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\r\n    const path = location ? location.getPathname().split('#')[0] : '';\r\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\r\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\r\n  }\r\n\r\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\r\n  _isNoopAnimation = false;\r\n\r\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\r\n  @Input()\r\n  get value(): number { return this._value; }\r\n  set value(v: number) {\r\n    this._value = clamp(v || 0);\r\n\r\n    // When noop animation is set to true, trigger animationEnd directly.\r\n    if (this._isNoopAnimation) {\r\n      this.emitAnimationEnd();\r\n    }\r\n  }\r\n  private _value: number = 0;\r\n\r\n  /** Buffer value of the progress bar. Defaults to zero. */\r\n  @Input()\r\n  get bufferValue(): number { return this._bufferValue; }\r\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\r\n  private _bufferValue: number = 0;\r\n\r\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\r\n\r\n  /**\r\n   * Event emitted when animation of the primary progress bar completes. This event will not\r\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\r\n   * animations (indeterminate and query).\r\n   */\r\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\r\n\r\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\r\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Mode of the progress bar.\r\n   *\r\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\r\n   * 'determinate'.\r\n   * Mirrored to mode attribute.\r\n   */\r\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\r\n\r\n  /** ID of the progress bar. */\r\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\r\n\r\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\r\n  _rectangleFillValue: string;\r\n\r\n  /** Gets the current transform value for the progress bar's primary indicator. */\r\n  _primaryTransform() {\r\n    const scale = this.value / 100;\r\n    return {transform: `scaleX(${scale})`};\r\n  }\r\n\r\n  /**\r\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\r\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\r\n   */\r\n  _bufferTransform() {\r\n    if (this.mode === 'buffer') {\r\n      const scale = this.bufferValue / 100;\r\n      return {transform: `scaleX(${scale})`};\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!this._isNoopAnimation) {\r\n      // Run outside angular so change detection didn't get triggered on every transition end\r\n      // instead only on the animation that we care about (primary value bar's transitionend)\r\n      this._ngZone.runOutsideAngular((() => {\r\n        this._animationEndSubscription =\r\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\r\n            .pipe(filter(((e: TransitionEvent) =>\r\n              e.target === this._primaryValueBar.nativeElement)))\r\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\r\n      }));\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._animationEndSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Emit an animationEnd event if in determinate or buffer mode. */\r\n  private emitAnimationEnd(): void {\r\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\r\n      this.animationEnd.next({value: this.value});\r\n    }\r\n  }\r\n}\r\n\r\n/** Clamps a value to be between two numbers, by default 0 and 100. */\r\nfunction clamp(v: number, min = 0, max = 100) {\r\n  return Math.max(min, Math.min(max, v));\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}