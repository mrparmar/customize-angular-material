{"version":3,"file":"slide-toggle.es5.js","sources":["../../../src/lib/slide-toggle/slide-toggle-module.ts","../../../src/lib/slide-toggle/slide-toggle.ts","../../../src/lib/slide-toggle/slide-toggle-config.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {NgModule} from '@angular/core';\r\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {MatSlideToggle} from './slide-toggle';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\r\n  exports: [MatSlideToggle, MatCommonModule],\r\n  declarations: [MatSlideToggle],\r\n  providers: [\r\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\r\n  ],\r\n})\r\nexport class MatSlideToggleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n  Optional,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor, CanColorCtor,\r\n  CanDisable, CanDisableCtor,\r\n  CanDisableRipple, CanDisableRippleCtor,\r\n  HammerInput,\r\n  HasTabIndex, HasTabIndexCtor,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {\r\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\r\n  MatSlideToggleDefaultOptions\r\n} from './slide-toggle-config';\r\n\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\nlet nextUniqueId = 0;\r\n\r\n/** @docs-private */\r\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSlideToggle),\r\n  multi: true\r\n};\r\n\r\n/** Change event object emitted by a MatSlideToggle. */\r\nexport class MatSlideToggleChange {\r\n  constructor(\r\n    /** The source MatSlideToggle of the event. */\r\n    public source: MatSlideToggle,\r\n    /** The new `checked` value of the MatSlideToggle. */\r\n    public checked: boolean) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSlideToggle.\r\n/** @docs-private */\r\nexport class MatSlideToggleBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatSlideToggleMixinBase:\r\n    HasTabIndexCtor &\r\n    CanColorCtor &\r\n    CanDisableRippleCtor &\r\n    CanDisableCtor &\r\n    typeof MatSlideToggleBase =\r\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\r\n\r\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-slide-toggle',\r\n  exportAs: 'matSlideToggle',\r\n  host: {\r\n    'class': 'mat-slide-toggle',\r\n    '[id]': 'id',\r\n    // Needs to be `-1` so it can still receive programmatic focus.\r\n    '[attr.tabindex]': 'disabled ? null : -1',\r\n    '[class.mat-checked]': 'checked',\r\n    '[class.mat-disabled]': 'disabled',\r\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n    '(focus)': '_inputElement.nativeElement.focus()',\r\n  },\r\n  templateUrl: 'slide-toggle.html',\r\n  styleUrls: ['slide-toggle.css'],\r\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\r\n                                                                        ControlValueAccessor,\r\n                                                                        CanDisable, CanColor,\r\n                                                                        HasTabIndex,\r\n                                                                        CanDisableRipple {\r\n  private onChange = (_: any) => {};\r\n  private onTouched = () => {};\r\n\r\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\r\n  private _required: boolean = false;\r\n  private _checked: boolean = false;\r\n\r\n  /** Whether the thumb is currently being dragged. */\r\n  private _dragging = false;\r\n\r\n  /** Previous checked state before drag started. */\r\n  private _previousChecked: boolean;\r\n\r\n  /** Width of the thumb bar of the slide-toggle. */\r\n  private _thumbBarWidth: number;\r\n\r\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\r\n  private _dragPercentage: number;\r\n\r\n  /** Reference to the thumb HTMLElement. */\r\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\r\n\r\n  /** Reference to the thumb bar HTMLElement. */\r\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\r\n\r\n  /** Name value will be applied to the input element if present. */\r\n  @Input() name: string | null = null;\r\n\r\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Used to set the aria-label attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string | null = null;\r\n\r\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Whether the slide-toggle is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value) { this._required = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the slide-toggle element is checked or not. */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value) {\r\n    this._checked = coerceBooleanProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  /** An event will be dispatched each time the slide-toggle changes its value. */\r\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\r\n      new EventEmitter<MatSlideToggleChange>();\r\n\r\n  /**\r\n   * An event will be dispatched each time the slide-toggle input is toggled.\r\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\r\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\r\n   * the slide toggle value.\r\n   */\r\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * An event will be dispatched each time the slide-toggle is dragged.\r\n   * This event is always emitted when the user drags the slide toggle to make a change greater\r\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\r\n   * the user toggles the slide toggle to change its value.\r\n   */\r\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Reference to the underlying input element. */\r\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              /**\r\n               * @deprecated The `_platform` parameter to be removed.\r\n               * @breaking-change 8.0.0\r\n               */\r\n              _platform: Platform,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Attribute('tabindex') tabIndex: string,\r\n              private _ngZone: NgZone,\r\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\r\n                  public defaults: MatSlideToggleDefaultOptions,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\r\n              @Optional() private _dir?: Directionality) {\r\n    super(elementRef);\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._focusMonitor\r\n      .monitor(this._elementRef, true)\r\n      .subscribe(focusOrigin => {\r\n        if (!focusOrigin) {\r\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\r\n          // Angular does not expect events to be raised during change detection, so any state\r\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\r\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\r\n          // we defer telling the form control it has been touched until the next tick.\r\n          Promise.resolve().then(() => this.onTouched());\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n\r\n  /** Method being called whenever the underlying input emits a change event. */\r\n  _onChangeEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the component's `change` output.\r\n    event.stopPropagation();\r\n\r\n    if (!this._dragging) {\r\n      this.toggleChange.emit();\r\n    }\r\n    // Releasing the pointer over the `<label>` element while dragging triggers another\r\n    // click event on the `<label>` element. This means that the checked state of the underlying\r\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\r\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\r\n    // does not change, and the checked state of the underlying input needs to be changed back.\r\n    if (this._dragging || this.defaults.disableToggleValue) {\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      return;\r\n    }\r\n\r\n    // Sync the value from the underlying input element with the component instance.\r\n    this.checked = this._inputElement.nativeElement.checked;\r\n\r\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\r\n    // there is no change event, when the checked state changes programmatically.\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /** Method being called whenever the slide-toggle has been clicked. */\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(value: any): void {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the slide-toggle. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\r\n  }\r\n\r\n  /** Toggles the checked state of the slide-toggle. */\r\n  toggle(): void {\r\n    this.checked = !this.checked;\r\n    this.onChange(this.checked);\r\n  }\r\n\r\n  /**\r\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\r\n   */\r\n  private _emitChangeEvent() {\r\n    this.onChange(this.checked);\r\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\r\n  }\r\n\r\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\r\n  private _getDragPercentage(distance: number) {\r\n    let percentage = (distance / this._thumbBarWidth) * 100;\r\n\r\n    // When the toggle was initially checked, then we have to start the drag at the end.\r\n    if (this._previousChecked) {\r\n      percentage += 100;\r\n    }\r\n\r\n    return Math.max(0, Math.min(percentage, 100));\r\n  }\r\n\r\n  _onDragStart() {\r\n    if (!this.disabled && !this._dragging) {\r\n      const thumbEl = this._thumbEl.nativeElement;\r\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\r\n      thumbEl.classList.add('mat-dragging');\r\n\r\n      this._previousChecked = this.checked;\r\n      this._dragging = true;\r\n    }\r\n  }\r\n\r\n  _onDrag(event: HammerInput) {\r\n    if (this._dragging) {\r\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\r\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\r\n      // Calculate the moved distance based on the thumb bar width.\r\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\r\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\r\n    }\r\n  }\r\n\r\n  _onDragEnd() {\r\n    if (this._dragging) {\r\n      const newCheckedValue = this._dragPercentage > 50;\r\n\r\n      if (newCheckedValue !== this.checked) {\r\n        this.dragChange.emit();\r\n        if (!this.defaults.disableDragValue) {\r\n          this.checked = newCheckedValue;\r\n          this._emitChangeEvent();\r\n        }\r\n      }\r\n\r\n      // The drag should be stopped outside of the current event handler, otherwise the\r\n      // click event will be fired before it and will revert the drag change.\r\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\r\n        if (this._dragging) {\r\n          this._dragging = false;\r\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\r\n\r\n          // Reset the transform because the component will take care\r\n          // of the thumb position after drag.\r\n          this._thumbEl.nativeElement.style.transform = '';\r\n        }\r\n      }));\r\n    }\r\n  }\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\r\n    // slide-toggle component will be only marked for check, but no actual change detection runs\r\n    // automatically. Instead of going back into the zone in order to trigger a change detection\r\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\r\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\n/** Default `mat-slide-toggle` options that can be overridden. */\r\nexport interface MatSlideToggleDefaultOptions {\r\n  /** Whether toggle action triggers value changes in slide toggle. */\r\n  disableToggleValue?: boolean;\r\n  /** Whether drag action triggers value changes in slide toggle. */\r\n  disableDragValue?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\r\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\r\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\r\n    providedIn: 'root',\r\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\r\n  });\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}