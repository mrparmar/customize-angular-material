{"version":3,"file":"badge.es5.js","sources":["../../../src/lib/badge/badge-module.ts","../../../src/lib/badge/badge.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MatBadge} from './badge';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    A11yModule,\r\n    MatCommonModule\r\n  ],\r\n  exports: [MatBadge],\r\n  declarations: [MatBadge],\r\n})\r\nexport class MatBadgeModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AriaDescriber} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\r\n\r\n\r\nlet nextId = 0;\r\n\r\n// Boilerplate for applying mixins to MatBadge.\r\n/** @docs-private */\r\nexport class MatBadgeBase {}\r\n\r\nexport const _MatBadgeMixinBase:\r\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\r\n\r\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\r\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\r\n\r\n/** Directive to display a text badge. */\r\n@Directive({\r\n  selector: '[matBadge]',\r\n  inputs: ['disabled: matBadgeDisabled'],\r\n  host: {\r\n    'class': 'mat-badge',\r\n    '[class.mat-badge-overlap]': 'overlap',\r\n    '[class.mat-badge-above]': 'isAbove()',\r\n    '[class.mat-badge-below]': '!isAbove()',\r\n    '[class.mat-badge-before]': '!isAfter()',\r\n    '[class.mat-badge-after]': 'isAfter()',\r\n    '[class.mat-badge-small]': 'size === \"small\"',\r\n    '[class.mat-badge-medium]': 'size === \"medium\"',\r\n    '[class.mat-badge-large]': 'size === \"large\"',\r\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\r\n    '[class.mat-badge-disabled]': 'disabled',\r\n  },\r\n})\r\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\r\n  /** Whether the badge has any content. */\r\n  _hasContent = false;\r\n\r\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\r\n  @Input('matBadgeColor')\r\n  get color(): ThemePalette { return this._color; }\r\n  set color(value: ThemePalette) {\r\n    this._setColor(value);\r\n    this._color = value;\r\n  }\r\n  private _color: ThemePalette = 'primary';\r\n\r\n  /** Whether the badge should overlap its contents or not */\r\n  @Input('matBadgeOverlap')\r\n  get overlap(): boolean { return this._overlap; }\r\n  set overlap(val: boolean) {\r\n    this._overlap = coerceBooleanProperty(val);\r\n  }\r\n  private _overlap: boolean = true;\r\n\r\n  /**\r\n   * Position the badge should reside.\r\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\r\n   */\r\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\r\n\r\n  /** The content for the badge */\r\n  @Input('matBadge')\r\n  get content(): string { return this._content; }\r\n  set content(value: string) {\r\n    this._content = value;\r\n    this._hasContent = value != null && `${value}`.trim().length > 0;\r\n    this._updateTextContent();\r\n  }\r\n  private _content: string;\r\n\r\n  /** Message used to describe the decorated element via aria-describedby */\r\n  @Input('matBadgeDescription')\r\n  get description(): string { return this._description; }\r\n  set description(newDescription: string) {\r\n    if (newDescription !== this._description) {\r\n      const badgeElement = this._badgeElement;\r\n      this._updateHostAriaDescription(newDescription, this._description);\r\n      this._description = newDescription;\r\n\r\n      if (badgeElement) {\r\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\r\n            badgeElement.removeAttribute('aria-label');\r\n      }\r\n    }\r\n  }\r\n  private _description: string;\r\n\r\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\r\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\r\n\r\n  /** Whether the badge is hidden. */\r\n  @Input('matBadgeHidden')\r\n  get hidden(): boolean { return this._hidden; }\r\n  set hidden(val: boolean) {\r\n    this._hidden = coerceBooleanProperty(val);\r\n  }\r\n  private _hidden: boolean;\r\n\r\n  /** Unique id for the badge */\r\n  _id: number = nextId++;\r\n\r\n  private _badgeElement: HTMLElement;\r\n\r\n  constructor(\r\n      @Optional() @Inject(DOCUMENT) private _document: any,\r\n      private _ngZone: NgZone,\r\n      private _elementRef: ElementRef<HTMLElement>,\r\n      private _ariaDescriber: AriaDescriber,\r\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\r\n      private _renderer?: Renderer2) {\r\n        super();\r\n      }\r\n\r\n  /** Whether the badge is above the host or not */\r\n  isAbove(): boolean {\r\n    return this.position.indexOf('below') === -1;\r\n  }\r\n\r\n  /** Whether the badge is after the host or not */\r\n  isAfter(): boolean {\r\n    return this.position.indexOf('before') === -1;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const badgeElement = this._badgeElement;\r\n\r\n    if (badgeElement) {\r\n      if (this.description) {\r\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\r\n      }\r\n\r\n      // When creating a badge through the Renderer, Angular will keep it in an index.\r\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\r\n      // @breaking-change 8.0.0 remove _renderer from null.\r\n      if (this._renderer && this._renderer.destroyNode) {\r\n        this._renderer.destroyNode(badgeElement);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Injects a span element into the DOM with the content. */\r\n  private _updateTextContent(): HTMLSpanElement {\r\n    if (!this._badgeElement) {\r\n      this._badgeElement = this._createBadgeElement();\r\n    } else {\r\n      this._badgeElement.textContent = this.content;\r\n    }\r\n    return this._badgeElement;\r\n  }\r\n\r\n  /** Creates the badge element */\r\n  private _createBadgeElement(): HTMLElement {\r\n    // @breaking-change 8.0.0 Remove null check for _renderer\r\n    const rootNode = this._renderer || this._document;\r\n    const badgeElement = rootNode.createElement('span');\r\n    const activeClass = 'mat-badge-active';\r\n    const contentClass = 'mat-badge-content';\r\n\r\n    // Clear any existing badges which may have persisted from a server-side render.\r\n    this._clearExistingBadges(contentClass);\r\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\r\n    badgeElement.classList.add(contentClass);\r\n    badgeElement.textContent = this.content;\r\n\r\n    if (this.description) {\r\n      badgeElement.setAttribute('aria-label', this.description);\r\n    }\r\n\r\n    this._elementRef.nativeElement.appendChild(badgeElement);\r\n\r\n    // animate in after insertion\r\n    if (typeof requestAnimationFrame === 'function') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => {\r\n          badgeElement.classList.add(activeClass);\r\n        });\r\n      });\r\n    } else {\r\n      badgeElement.classList.add(activeClass);\r\n    }\r\n\r\n    return badgeElement;\r\n  }\r\n\r\n  /** Sets the aria-label property on the element */\r\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\r\n    // ensure content available before setting label\r\n    const content = this._updateTextContent();\r\n\r\n    if (oldDescription) {\r\n      this._ariaDescriber.removeDescription(content, oldDescription);\r\n    }\r\n\r\n    if (newDescription) {\r\n      this._ariaDescriber.describe(content, newDescription);\r\n    }\r\n  }\r\n\r\n  /** Adds css theme class given the color to the component host */\r\n  private _setColor(colorPalette: ThemePalette) {\r\n    if (colorPalette !== this._color) {\r\n      if (this._color) {\r\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\r\n      }\r\n      if (colorPalette) {\r\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clears any existing badges that might be left over from server-side rendering. */\r\n  private _clearExistingBadges(cssClass: string) {\r\n    const element = this._elementRef.nativeElement;\r\n    let childCount = element.children.length;\r\n\r\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\r\n    while (childCount--) {\r\n      const currentChild = element.children[childCount];\r\n\r\n      if (currentChild.classList.contains(cssClass)) {\r\n        element.removeChild(currentChild);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}