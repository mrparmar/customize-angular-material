{"version":3,"file":"sort.es5.js","sources":["../../../src/lib/sort/sort-module.ts","../../../src/lib/sort/sort-header.ts","../../../src/lib/sort/sort-header-intl.ts","../../../src/lib/sort/sort-animations.ts","../../../src/lib/sort/sort.ts","../../../src/lib/sort/sort-errors.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatSortHeader} from './sort-header';\r\nimport {MatSort} from './sort';\r\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [MatSort, MatSortHeader],\r\n  declarations: [MatSort, MatSortHeader],\r\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\r\n})\r\nexport class MatSortModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  ViewEncapsulation,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {MatSort, MatSortable} from './sort';\r\nimport {matSortAnimations} from './sort-animations';\r\nimport {SortDirection} from './sort-direction';\r\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\r\nimport {MatSortHeaderIntl} from './sort-header-intl';\r\n\r\n\r\n// Boilerplate for applying mixins to the sort header.\r\n/** @docs-private */\r\nexport class MatSortHeaderBase {}\r\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\r\n    mixinDisabled(MatSortHeaderBase);\r\n\r\n/**\r\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\r\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\r\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\r\n * be fully opaque in the center.\r\n *\r\n * @docs-private\r\n */\r\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\r\n\r\n/**\r\n * States describing the arrow's animated position (animating fromState to toState).\r\n * If the fromState is not defined, there will be no animated transition to the toState.\r\n * @docs-private\r\n */\r\nexport interface ArrowViewStateTransition {\r\n  fromState?: ArrowViewState;\r\n  toState: ArrowViewState;\r\n}\r\n\r\n/** Column definition associated with a `MatSortHeader`. */\r\ninterface MatSortHeaderColumnDef {\r\n  name: string;\r\n}\r\n\r\n/**\r\n * Applies sorting behavior (click to change sort) and styles to an element, including an\r\n * arrow to display the current sort direction.\r\n *\r\n * Must be provided with an id and contained within a parent MatSort directive.\r\n *\r\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\r\n * column definition.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-sort-header]',\r\n  exportAs: 'matSortHeader',\r\n  templateUrl: 'sort-header.html',\r\n  styleUrls: ['sort-header.css'],\r\n  host: {\r\n    '(click)': '_handleClick()',\r\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\r\n    '(longpress)': '_setIndicatorHintVisible(true)',\r\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\r\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\r\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  animations: [\r\n    matSortAnimations.indicator,\r\n    matSortAnimations.leftPointer,\r\n    matSortAnimations.rightPointer,\r\n    matSortAnimations.arrowOpacity,\r\n    matSortAnimations.arrowPosition,\r\n    matSortAnimations.allowChildren,\r\n  ]\r\n})\r\nexport class MatSortHeader extends _MatSortHeaderMixinBase\r\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\r\n  private _rerenderSubscription: Subscription;\r\n\r\n  /**\r\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\r\n   * provide an affordance that the header is sortable by showing on focus and hover.\r\n   */\r\n  _showIndicatorHint: boolean = false;\r\n\r\n  /**\r\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\r\n   * position through the animation. If animations are currently disabled, the fromState is removed\r\n   * so that there is no animation displayed.\r\n   */\r\n  _viewState: ArrowViewStateTransition;\r\n\r\n  /** The direction the arrow should be facing according to the current state. */\r\n  _arrowDirection: SortDirection = '';\r\n\r\n  /**\r\n   * Whether the view state animation should show the transition between the `from` and `to` states.\r\n   */\r\n  _disableViewStateAnimation = false;\r\n\r\n  /**\r\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\r\n   * the column's name.\r\n   */\r\n  @Input('mat-sort-header') id: string;\r\n\r\n  /** Sets the position of the arrow that displays when sorted. */\r\n  @Input() arrowPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\r\n  @Input() start: 'asc' | 'desc';\r\n\r\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\r\n  @Input()\r\n  get disableClear(): boolean { return this._disableClear; }\r\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\r\n  private _disableClear: boolean;\r\n\r\n  constructor(public _intl: MatSortHeaderIntl,\r\n              changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _sort: MatSort,\r\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\r\n                  public _columnDef: MatSortHeaderColumnDef) {\r\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\r\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\r\n    // and we want to avoid having the sort header depending on the CDK table because\r\n    // of this single reference.\r\n    super();\r\n\r\n    if (!_sort) {\r\n      throw getSortHeaderNotContainedWithinSortError();\r\n    }\r\n\r\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\r\n        .subscribe(() => {\r\n          if (this._isSorted()) {\r\n            this._updateArrowDirection();\r\n          }\r\n\r\n          // If this header was recently active and now no longer sorted, animate away the arrow.\r\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\r\n            this._disableViewStateAnimation = false;\r\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\r\n          }\r\n\r\n          changeDetectorRef.markForCheck();\r\n        });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.id && this._columnDef) {\r\n      this.id = this._columnDef.name;\r\n    }\r\n\r\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\r\n    this._updateArrowDirection();\r\n    this._setAnimationTransitionState(\r\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\r\n\r\n    this._sort.register(this);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._sort.deregister(this);\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\r\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\r\n   */\r\n  _setIndicatorHintVisible(visible: boolean) {\r\n    // No-op if the sort header is disabled - should not make the hint visible.\r\n    if (this._isDisabled() && visible) { return; }\r\n\r\n    this._showIndicatorHint = visible;\r\n\r\n    if (!this._isSorted()) {\r\n      this._updateArrowDirection();\r\n      if (this._showIndicatorHint) {\r\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\r\n      } else {\r\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the animation transition view state for the arrow's position and opacity. If the\r\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\r\n   * no animation appears.\r\n   */\r\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\r\n    this._viewState = viewState;\r\n\r\n    // If the animation for arrow position state (opacity/translation) should be disabled,\r\n    // remove the fromState so that it jumps right to the toState.\r\n    if (this._disableViewStateAnimation) {\r\n      this._viewState = {toState: viewState.toState};\r\n    }\r\n  }\r\n\r\n  /** Triggers the sort on this sort header and removes the indicator hint. */\r\n  _handleClick() {\r\n    if (this._isDisabled()) { return; }\r\n\r\n    this._sort.sort(this);\r\n\r\n    // Do not show the animation if the header was already shown in the right position.\r\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\r\n      this._disableViewStateAnimation = true;\r\n    }\r\n\r\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\r\n    // the direction it is facing.\r\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\r\n        {fromState: this._arrowDirection, toState: 'active'} :\r\n        {fromState: 'active', toState: this._arrowDirection};\r\n    this._setAnimationTransitionState(viewState);\r\n\r\n    this._showIndicatorHint = false;\r\n  }\r\n\r\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\r\n  _isSorted() {\r\n    return this._sort.active == this.id &&\r\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\r\n  }\r\n\r\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\r\n  _getArrowDirectionState() {\r\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\r\n  }\r\n\r\n  /** Returns the arrow position state (opacity, translation). */\r\n  _getArrowViewState() {\r\n    const fromState = this._viewState.fromState;\r\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\r\n  }\r\n\r\n  /**\r\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\r\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\r\n   * active sorted direction. The reason this is updated through a function is because the direction\r\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\r\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\r\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\r\n   * preserving its direction, even though the next sort direction is actually different and should\r\n   * only be changed once the arrow displays again (hint or activation).\r\n   */\r\n  _updateArrowDirection() {\r\n    this._arrowDirection = this._isSorted() ?\r\n        this._sort.direction :\r\n        (this.start || this._sort.start);\r\n  }\r\n\r\n  _isDisabled() {\r\n    return this._sort.disabled || this.disabled;\r\n  }\r\n\r\n  /**\r\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\r\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\r\n   * says that the aria-sort property should only be present on one header at a time, so removing\r\n   * ensures this is true.\r\n   */\r\n  _getAriaSortAttribute() {\r\n    if (!this._isSorted()) { return null; }\r\n\r\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\r\n  }\r\n\r\n  /** Whether the arrow inside the sort header should be rendered. */\r\n  _renderArrow() {\r\n    return !this._isDisabled() || this._isSorted();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\r\n * include it in a custom provider.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatSortHeaderIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** ARIA label for the sorting button. */\r\n  sortButtonLabel = (id: string) => {\r\n    return `Change sorting for ${id}`;\r\n  }\r\n}\r\n/** @docs-private */\r\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\r\n  return parentIntl || new MatSortHeaderIntl();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\r\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatSortHeaderIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\r\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\r\n};\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  keyframes,\r\n  AnimationTriggerMetadata, query, animateChild,\r\n} from '@angular/animations';\r\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\r\n\r\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\r\n                                  AnimationCurves.STANDARD_CURVE;\r\n\r\n/**\r\n * Animations used by MatSort.\r\n * @docs-private\r\n */\r\nexport const matSortAnimations: {\r\n  readonly indicator: AnimationTriggerMetadata;\r\n  readonly leftPointer: AnimationTriggerMetadata;\r\n  readonly rightPointer: AnimationTriggerMetadata;\r\n  readonly arrowOpacity: AnimationTriggerMetadata;\r\n  readonly arrowPosition: AnimationTriggerMetadata;\r\n  readonly allowChildren: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that moves the sort indicator. */\r\n  indicator: trigger('indicator', [\r\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\r\n    // 10px is the height of the sort indicator, minus the width of the pointers\r\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\r\n  leftPointer: trigger('leftPointer', [\r\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\r\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\r\n  rightPointer: trigger('rightPointer', [\r\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\r\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that controls the arrow opacity. */\r\n  arrowOpacity: trigger('arrowOpacity', [\r\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\r\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\r\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\r\n        style({opacity: 0})),\r\n    // Transition between all states except for immediate transitions\r\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\r\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\r\n  ]),\r\n\r\n  /**\r\n   * Animation for the translation of the arrow as a whole. States are separated into two\r\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\r\n   * peek, and active. The other states define a specific animation (source-to-destination)\r\n   * and are determined as a function of their prev user-perceived state and what the next state\r\n   * should be.\r\n   */\r\n  arrowPosition: trigger('arrowPosition', [\r\n    // Hidden Above => Hint Center\r\n    transition('* => desc-to-hint, * => desc-to-active',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(-25%)'}),\r\n          style({transform: 'translateY(0)'})\r\n        ]))),\r\n    // Hint Center => Hidden Below\r\n    transition('* => hint-to-desc, * => active-to-desc',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(0)'}),\r\n          style({transform: 'translateY(25%)'})\r\n        ]))),\r\n    // Hidden Below => Hint Center\r\n    transition('* => asc-to-hint, * => asc-to-active',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(25%)'}),\r\n          style({transform: 'translateY(0)'})\r\n        ]))),\r\n    // Hint Center => Hidden Above\r\n    transition('* => hint-to-asc, * => active-to-asc',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(0)'}),\r\n          style({transform: 'translateY(-25%)'})\r\n        ]))),\r\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\r\n        style({transform: 'translateY(0)'})),\r\n    state('hint-to-desc, active-to-desc, desc',\r\n        style({transform: 'translateY(-25%)'})),\r\n    state('hint-to-asc, active-to-asc, asc',\r\n        style({transform: 'translateY(25%)'})),\r\n  ]),\r\n\r\n  /** Necessary trigger that calls animate on children animations. */\r\n  allowChildren: trigger('allowChildren', [\r\n    transition('* <=> *', [\r\n      query('@*', animateChild(), {optional: true})\r\n    ])\r\n  ]),\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  isDevMode,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  HasInitialized,\r\n  HasInitializedCtor,\r\n  mixinDisabled,\r\n  mixinInitialized,\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {SortDirection} from './sort-direction';\r\nimport {\r\n  getSortDuplicateSortableIdError,\r\n  getSortHeaderMissingIdError,\r\n  getSortInvalidDirectionError,\r\n} from './sort-errors';\r\n\r\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\r\nexport interface MatSortable {\r\n  /** The id of the column being sorted. */\r\n  id: string;\r\n\r\n  /** Starting sort direction. */\r\n  start: 'asc' | 'desc';\r\n\r\n  /** Whether to disable clearing the sorting state. */\r\n  disableClear: boolean;\r\n}\r\n\r\n/** The current sort state. */\r\nexport interface Sort {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n\r\n  /** The sort direction. */\r\n  direction: SortDirection;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSort.\r\n/** @docs-private */\r\nexport class MatSortBase {}\r\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\r\n    mixinInitialized(mixinDisabled(MatSortBase));\r\n\r\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\r\n@Directive({\r\n  selector: '[matSort]',\r\n  exportAs: 'matSort',\r\n  inputs: ['disabled: matSortDisabled']\r\n})\r\nexport class MatSort extends _MatSortMixinBase\r\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\r\n  /** Collection of all registered sortables that this directive manages. */\r\n  sortables = new Map<string, MatSortable>();\r\n\r\n  /** Used to notify any child components listening to state changes. */\r\n  readonly _stateChanges = new Subject<void>();\r\n\r\n  /** The id of the most recently sorted MatSortable. */\r\n  @Input('matSortActive') active: string;\r\n\r\n  /**\r\n   * The direction to set when an MatSortable is initially sorted.\r\n   * May be overriden by the MatSortable's sort start.\r\n   */\r\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\r\n\r\n  /** The sort direction of the currently active MatSortable. */\r\n  @Input('matSortDirection')\r\n  get direction(): SortDirection { return this._direction; }\r\n  set direction(direction: SortDirection) {\r\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\r\n      throw getSortInvalidDirectionError(direction);\r\n    }\r\n    this._direction = direction;\r\n  }\r\n  private _direction: SortDirection = '';\r\n\r\n  /**\r\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\r\n   * May be overriden by the MatSortable's disable clear input.\r\n   */\r\n  @Input('matSortDisableClear')\r\n  get disableClear(): boolean { return this._disableClear; }\r\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\r\n  private _disableClear: boolean;\r\n\r\n  /** Event emitted when the user changes either the active sort or sort direction. */\r\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\r\n\r\n  /**\r\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\r\n   * collection of MatSortables.\r\n   */\r\n  register(sortable: MatSortable): void {\r\n    if (!sortable.id) {\r\n      throw getSortHeaderMissingIdError();\r\n    }\r\n\r\n    if (this.sortables.has(sortable.id)) {\r\n      throw getSortDuplicateSortableIdError(sortable.id);\r\n    }\r\n    this.sortables.set(sortable.id, sortable);\r\n  }\r\n\r\n  /**\r\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\r\n   * collection of contained MatSortables.\r\n   */\r\n  deregister(sortable: MatSortable): void {\r\n    this.sortables.delete(sortable.id);\r\n  }\r\n\r\n  /** Sets the active sort id and determines the new sort direction. */\r\n  sort(sortable: MatSortable): void {\r\n    if (this.active != sortable.id) {\r\n      this.active = sortable.id;\r\n      this.direction = sortable.start ? sortable.start : this.start;\r\n    } else {\r\n      this.direction = this.getNextSortDirection(sortable);\r\n    }\r\n\r\n    this.sortChange.emit({active: this.active, direction: this.direction});\r\n  }\r\n\r\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\r\n  getNextSortDirection(sortable: MatSortable): SortDirection {\r\n    if (!sortable) { return ''; }\r\n\r\n    // Get the sort direction cycle with the potential sortable overrides.\r\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\r\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\r\n\r\n    // Get and return the next direction in the cycle\r\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\r\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\r\n    return sortDirectionCycle[nextDirectionIndex];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._markInitialized();\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this._stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n\r\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\r\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\r\n                               disableClear: boolean): SortDirection[] {\r\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\r\n  if (start == 'desc') { sortOrder.reverse(); }\r\n  if (!disableClear) { sortOrder.push(''); }\r\n\r\n  return sortOrder;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getSortDuplicateSortableIdError(id: string): Error {\r\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortHeaderNotContainedWithinSortError(): Error {\r\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortHeaderMissingIdError(): Error {\r\n  return Error(`MatSortHeader must be provided with a unique id.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortInvalidDirectionError(direction: string): Error {\r\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}