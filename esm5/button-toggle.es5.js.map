{"version":3,"file":"button-toggle.es5.js","sources":["../../../src/lib/button-toggle/button-toggle-module.ts","../../../src/lib/button-toggle/button-toggle.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, MatRippleModule],\r\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\r\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\r\n})\r\nexport class MatButtonToggleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  InjectionToken,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanDisableRipple,\r\n  mixinDisableRipple,\r\n  CanDisableRippleCtor,\r\n} from '@angular/material/core';\r\n\r\n\r\n/** Acceptable types for a button toggle. */\r\nexport type ToggleType = 'checkbox' | 'radio';\r\n\r\n/** Possible appearance styles for the button toggle. */\r\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\r\n\r\n/**\r\n * Represents the default options for the button toggle that can be configured\r\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\r\n */\r\nexport interface MatButtonToggleDefaultOptions {\r\n  appearance?: MatButtonToggleAppearance;\r\n}\r\n\r\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all button toggles within an app.\r\n */\r\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\r\n\r\n\r\n\r\n/**\r\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatButtonToggleGroup),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * @deprecated Use `MatButtonToggleGroup` instead.\r\n * @breaking-change 8.0.0\r\n */\r\nexport class MatButtonToggleGroupMultiple {}\r\n\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Change event object emitted by MatButtonToggle. */\r\nexport class MatButtonToggleChange {\r\n  constructor(\r\n    /** The MatButtonToggle that emits the event. */\r\n    public source: MatButtonToggle,\r\n\r\n    /** The value assigned to the MatButtonToggle. */\r\n    public value: any) {}\r\n}\r\n\r\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\r\n@Directive({\r\n  selector: 'mat-button-toggle-group',\r\n  providers: [\r\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\r\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\r\n  ],\r\n  host: {\r\n    'role': 'group',\r\n    'class': 'mat-button-toggle-group',\r\n    '[attr.aria-disabled]': 'disabled',\r\n    '[class.mat-button-toggle-vertical]': 'vertical',\r\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\r\n  },\r\n  exportAs: 'matButtonToggleGroup',\r\n})\r\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\r\n  private _vertical = false;\r\n  private _multiple = false;\r\n  private _disabled = false;\r\n  private _selectionModel: SelectionModel<MatButtonToggle>;\r\n\r\n  /**\r\n   * Reference to the raw value that the consumer tried to assign. The real\r\n   * value will exclude any values from this one that don't correspond to a\r\n   * toggle. Useful for the cases where the value is assigned before the toggles\r\n   * have been initialized or at the same that they're being swapped out.\r\n   */\r\n  private _rawValue: any;\r\n\r\n  /**\r\n   * The method to be called in order to update ngModel.\r\n   * Now `ngModel` binding is not supported in multiple selection mode.\r\n   */\r\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  _onTouched: () => any = () => {};\r\n\r\n  /** Child button toggle buttons. */\r\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\r\n\r\n  /** The appearance for all the buttons in the group. */\r\n  @Input() appearance: MatButtonToggleAppearance;\r\n\r\n  /** `name` attribute for the underlying `input` element. */\r\n  @Input()\r\n  get name(): string { return this._name; }\r\n  set name(value: string) {\r\n    this._name = value;\r\n\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach(toggle => {\r\n        toggle.name = this._name;\r\n        toggle._markForCheck();\r\n      });\r\n    }\r\n  }\r\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether the toggle group is vertical. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Value of the toggle group. */\r\n  @Input()\r\n  get value(): any {\r\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\r\n\r\n    if (this.multiple) {\r\n      return selected.map(toggle => toggle.value);\r\n    }\r\n\r\n    return selected[0] ? selected[0].value : undefined;\r\n  }\r\n  set value(newValue: any) {\r\n    this._setSelectionByValue(newValue);\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  /**\r\n   * Event that emits whenever the value of the group changes.\r\n   * Used to facilitate two-way data binding.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange = new EventEmitter<any>();\r\n\r\n  /** Selected button toggles in the group. */\r\n  get selected() {\r\n    const selected = this._selectionModel.selected;\r\n    return this.multiple ? selected : (selected[0] || null);\r\n  }\r\n\r\n  /** Whether multiple button toggles can be selected. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether multiple button toggle group is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\r\n    }\r\n  }\r\n\r\n  /** Event emitted when the group's value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(\r\n    private _changeDetector: ChangeDetectorRef,\r\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\r\n        defaultOptions?: MatButtonToggleDefaultOptions) {\r\n\r\n      this.appearance =\r\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n    }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value Value to be set to the model.\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  _emitChangeEvent(): void {\r\n    const selected = this.selected;\r\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\r\n    const event = new MatButtonToggleChange(source!, this.value);\r\n    this._controlValueAccessorChangeFn(event.value);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Syncs a button toggle's selected state with the model value.\r\n   * @param toggle Toggle to be synced.\r\n   * @param select Whether the toggle should be selected.\r\n   * @param isUserInput Whether the change was a result of a user interaction.\r\n   */\r\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\r\n    // Deselect the currently-selected toggle, if we're in single-selection\r\n    // mode and the button being toggled isn't selected at the moment.\r\n    if (!this.multiple && this.selected && !toggle.checked) {\r\n      (this.selected as MatButtonToggle).checked = false;\r\n    }\r\n\r\n    if (select) {\r\n      this._selectionModel.select(toggle);\r\n    } else {\r\n      this._selectionModel.deselect(toggle);\r\n    }\r\n\r\n    // Only emit the change event for user input.\r\n    if (isUserInput) {\r\n      this._emitChangeEvent();\r\n    }\r\n\r\n    // Note: we emit this one no matter whether it was a user interaction, because\r\n    // it is used by Angular to sync up the two-way data binding.\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  /** Checks whether a button toggle is selected. */\r\n  _isSelected(toggle: MatButtonToggle) {\r\n    return this._selectionModel.isSelected(toggle);\r\n  }\r\n\r\n  /** Determines whether a button toggle should be checked on init. */\r\n  _isPrechecked(toggle: MatButtonToggle) {\r\n    if (typeof this._rawValue === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    if (this.multiple && Array.isArray(this._rawValue)) {\r\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\r\n    }\r\n\r\n    return toggle.value === this._rawValue;\r\n  }\r\n\r\n  /** Updates the selection state of the toggles in the group based on a value. */\r\n  private _setSelectionByValue(value: any|any[]) {\r\n    this._rawValue = value;\r\n\r\n    if (!this._buttonToggles) {\r\n      return;\r\n    }\r\n\r\n    if (this.multiple && value) {\r\n      if (!Array.isArray(value)) {\r\n        throw Error('Value must be an array in multiple-selection mode.');\r\n      }\r\n\r\n      this._clearSelection();\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\r\n    } else {\r\n      this._clearSelection();\r\n      this._selectValue(value);\r\n    }\r\n  }\r\n\r\n  /** Clears the selected toggles. */\r\n  private _clearSelection() {\r\n    this._selectionModel.clear();\r\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\r\n  }\r\n\r\n  /** Selects a value if there's a toggle that corresponds to it. */\r\n  private _selectValue(value: any) {\r\n    const correspondingOption = this._buttonToggles.find(toggle => {\r\n      return toggle.value != null && toggle.value === value;\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      correspondingOption.checked = true;\r\n      this._selectionModel.select(correspondingOption);\r\n    }\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to the MatButtonToggle class.\r\n/** @docs-private */\r\nexport class MatButtonToggleBase {}\r\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\r\n    mixinDisableRipple(MatButtonToggleBase);\r\n\r\n/** Single button inside of a toggle group. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-button-toggle',\r\n  templateUrl: 'button-toggle.html',\r\n  styleUrls: ['button-toggle.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matButtonToggle',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\r\n    '[class.mat-button-toggle-checked]': 'checked',\r\n    '[class.mat-button-toggle-disabled]': 'disabled',\r\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\r\n    'class': 'mat-button-toggle',\r\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\r\n    // but can still receive focus from things like cdkFocusInitial.\r\n    '[attr.tabindex]': '-1',\r\n    '[attr.id]': 'id',\r\n    '(focus)': 'focus()',\r\n  }\r\n})\r\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\r\n  CanDisableRipple, OnDestroy {\r\n\r\n  private _isSingleSelector = false;\r\n  private _checked = false;\r\n\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\r\n  _type: ToggleType;\r\n\r\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\r\n\r\n  /** The parent button toggle group (exclusive selection). Optional. */\r\n  buttonToggleGroup: MatButtonToggleGroup;\r\n\r\n  /** Unique ID for the underlying `button` element. */\r\n  get buttonId(): string { return `${this.id}-button`; }\r\n\r\n  /** The unique ID for this button toggle. */\r\n  @Input() id: string;\r\n\r\n  /** HTML's 'name' attribute used to group radios for unique selection. */\r\n  @Input() name: string;\r\n\r\n  /** MatButtonToggleGroup reads this to assign its own value. */\r\n  @Input() value: any;\r\n\r\n  /** Tabindex for the toggle. */\r\n  @Input() tabIndex: number | null;\r\n\r\n  /** The appearance style of the button. */\r\n  @Input()\r\n  get appearance(): MatButtonToggleAppearance {\r\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\r\n  }\r\n  set appearance(value: MatButtonToggleAppearance) {\r\n    this._appearance = value;\r\n  }\r\n  private _appearance: MatButtonToggleAppearance;\r\n\r\n  /** Whether the button is checked. */\r\n  @Input()\r\n  get checked(): boolean {\r\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\r\n  }\r\n  set checked(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._checked) {\r\n      this._checked = newValue;\r\n\r\n      if (this.buttonToggleGroup) {\r\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\r\n      }\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\r\n  }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Event emitted when the group value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _elementRef: ElementRef<HTMLElement>,\r\n              private _focusMonitor: FocusMonitor,\r\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\r\n              @Attribute('tabindex') defaultTabIndex: string,\r\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\r\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\r\n    super();\r\n\r\n    const parsedTabIndex = Number(defaultTabIndex);\r\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\r\n    this.buttonToggleGroup = toggleGroup;\r\n    this.appearance =\r\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\r\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\r\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\r\n\r\n    if (this._isSingleSelector) {\r\n      this.name = this.buttonToggleGroup.name;\r\n    }\r\n\r\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\r\n      this.checked = true;\r\n    }\r\n\r\n    this._focusMonitor.monitor(this._elementRef, true);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const group = this.buttonToggleGroup;\r\n\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n\r\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\r\n    // on the next tick in order to avoid \"changed after checked\" errors.\r\n    if (group && group._isSelected(this)) {\r\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\r\n    }\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._buttonElement.nativeElement.focus();\r\n  }\r\n\r\n  /** Checks the button toggle due to an interaction with the underlying native button. */\r\n  _onButtonClick() {\r\n    const newChecked = this._isSingleSelector ? true : !this._checked;\r\n\r\n    if (newChecked !== this._checked) {\r\n      this._checked = newChecked;\r\n      if (this.buttonToggleGroup) {\r\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\r\n        this.buttonToggleGroup._onTouched();\r\n      }\r\n    }\r\n    // Emit a change event when it's the single selector\r\n    this.change.emit(new MatButtonToggleChange(this, this.value));\r\n  }\r\n\r\n  /**\r\n   * Marks the button toggle as needing checking for change detection.\r\n   * This method is exposed because the parent button toggle group will directly\r\n   * update bound properties of the radio button.\r\n   */\r\n  _markForCheck() {\r\n    // When the group value changes, the button will not be notified.\r\n    // Use `markForCheck` to explicit update button toggle's status.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}